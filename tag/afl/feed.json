{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"afl\" tag",
    "description": "🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/course/AFL/",
            "url": "http://example.com/course/AFL/",
            "title": "AFL",
            "date_published": "2024-10-28T04:45:49.000Z",
            "content_html": "<h1 id=\"American Fuzzy Lop\" class=\"active\"><a class=\"anchor\"  href=\"#American Fuzzy Lop\">#</a> American Fuzzy Lop</h1>\n<h2 id=\"Definition\" class=\"active\"><a class=\"anchor\"  href=\"#Definition\">#</a>Definition</h2>\n<ol>\n<li>A security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. Currently state-of-the-practice at fuzzing (together with forks)</li>\n</ol>\n<ul>\n<li>A type of coverage-based fuzzing: Instrument target programs to track test coverage</li>\n<li>A type of evolutionary/genetic fuzzing: Attempt to generate inputs based on the response of the program</li>\n</ul>\n<ol start=\"2\">\n<li>Why AFL</li>\n</ol>\n<ul>\n<li>The best general purpose fuzzer\n<ul>\n<li>For C/C++/Objective C programs</li>\n</ul>\n</li>\n<li>Effective and well-engineered with lots of heuristics\n<ul>\n<li>Fast – lots of test cases per second</li>\n<li>Clever – test cases are well chosen</li>\n<li>Easy to use (Linux and other platforms)</li>\n</ul>\n</li>\n<li>Deliver out-of-the-box performance far superior to mutation fuzzing or coverage-only tools</li>\n</ul>\n<ol start=\"3\">\n<li>AFL Approach\n<ol>\n<li>Load user-supplied initial test cases into the queue</li>\n<li>Take next input file from the queue</li>\n<li>Attempt to trim the test case to the smallest size</li>\n<li>Repeatedly mutate the file using traditional fuzzing strategies</li>\n<li>If any of the generated mutations resulted in a new state transition recorded by the instrumentation, add mutated output as a new entry in the queue</li>\n<li>Go to 2<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/28/671f221b5c7ee.png\" alt=\"img\"></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Fuzzing Through AFL\" class=\"active\"><a class=\"anchor\"  href=\"#Fuzzing Through AFL\">#</a>Fuzzing Through AFL</h2>\n<ol>\n<li>Instrumenting Programs for AFL<br>\nCompile through AFL wrappers to generate an instrumented executable for fuzzing\n<ul>\n<li>Basically, replace  <code>gcc</code>  with  <code>afl‐gcc</code>  or  <code>afl-clang</code></li>\n<li>For simple compilation,  <code>afl‐gcc test.c ‐o test</code> <br>\nFor larger projects that use the make build system, add to the Makefile:</li>\n<li><code>CC=path-to/afl-gcc</code>  or  <code>CC=path-to/afl-clang</code></li>\n<li>This allows to build instrumented target program with the AFL wrappers<br>\nFor C++ code, use the C++ wrappers  <code>afl-g++</code>  or  <code>afl-clang++</code></li>\n<li>For example in the Makefile:  <code>CXX=path-to/afl-g++</code>  or  <code>CXX=path-to/afl-clang++</code> <br>\nAFL 会在编译时插装目标程序的代码，以便在执行期间跟踪路径覆盖情况。插装后的二进制文件包含对 <code> __afl_maybe_log</code>  的调用，该函数记录程序的执行状态。</li>\n</ul>\n</li>\n<li>Fuzzing Through AFL</li>\n</ol>\n<ul>\n<li>Start fuzzing with AFL   <code>afl‐fuzz ‐i testcase ‐o output ./test @@</code></li>\n<li>Test cases are under testcase</li>\n<li>The output produced by  goes to the output directory</li>\n<li>The special symbols  <code>@@</code>  tell AFL to take the file names under test case and feed it to test. Not needed if the program takes input from stdin</li>\n<li>Other common options:\n<ul>\n<li><code>-t</code>  sets timeout for the executed process</li>\n<li><code>-m</code>  sets memory limit for the executed process</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Initial Test Cases<br>\nDon’t waste too much time trying to synthesise your target’s input format<br>\nFind some real inputs that exercise as much of the target as possible<br>\nFrom the AFL user guide:\n<ul>\n<li>Keep the files small. Under 1 kB is ideal, although not strictly necessary</li>\n<li>Use multiple test cases only if they are functionally different from each other</li>\n</ul>\n</li>\n<li>When To Stop</li>\n</ol>\n<ul>\n<li>Never, as fuzzing is part of continuous integration</li>\n<li>hen the  <code>cycles counter</code>  is green\n<ul>\n<li>Last new path was found many cycles ago</li>\n<li>Pending paths is zero</li>\n</ul>\n</li>\n<li>When the cycles counter is blue\n<ul>\n<li>Last new path was found over a cycle ago</li>\n</ul>\n</li>\n<li>If you want to stop earlier, press Ctrl-C\n<ul>\n<li>E.g. it’s been running for a while (hours + millions of executions + at least 2 cycles</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>AFL Output</li>\n</ol>\n<ul>\n<li>File  <code>fuzzer_stats</code>  provides summary of stats UI</li>\n<li>File  <code>plot_data</code>  shows the progress of fuzzer</li>\n<li>Directory  <code>queue</code>  shows inputs that led to paths</li>\n<li>Directory  <code>crashes</code>  contains input that caused crash</li>\n<li>Directory  <code>hangs</code>  contains input that caused hang</li>\n</ul>\n<ol start=\"6\">\n<li>AFL Crashes<br>\nUnique if the associated execution paths involve any state transitions not seen previously. A single bug may be reached in multiple ways, but AFL can usually recognise<br>\nCrashes may be caused by failed assertions - as they abort</li>\n</ol>\n<h1 id=\"Compiler-supported sanitizers\" class=\"active\"><a class=\"anchor\"  href=\"#Compiler-supported sanitizers\">#</a>Compiler-supported sanitizers</h1>\n<ol>\n<li>Sanitisers 和加固措施</li>\n</ol>\n<ul>\n<li>Sanitisers（内存清理器）：通过在二进制文件中插入额外的代码，检查不良的运行条件。提高模糊测试效果。</li>\n<li>Common compiler-supported sanitisers: ASan, MSan, UBSan, TSan</li>\n<li>加固选项：使内存错误的检测更容易。 <code>AFL_HARDEN=1</code> ：AFL 的硬化选项，用于检测更多的内存错误。</li>\n<li>注意：Sanitisers 通常不兼容，因此建议：\n<ul>\n<li>大多数模糊测试运行时启用  <code>AFL_HARDEN</code> 。</li>\n<li>小部分测试运行时分别启用每个 Sanitisers，以覆盖不同类型的内存错误。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ASan（Address Sanitizer）Compile with  <code>-fsanitize=address</code> <br>\n 检测内容：\n<ul>\n<li>堆、栈和全局变量的越界访问。</li>\n<li>Use-after-free、double-free、invalid free。</li>\n<li>内存泄漏。</li>\n</ul>\n</li>\n</ol>\n<p>性能影响：大约 2 倍的运行时间开销。</p>\n<figure class=\"highlight c\"><figcaption><span>ASan Example1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 10 </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> s[N] = <span class=\"string\">&quot;123456789&quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= N; i++) </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, s[i]); </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>Loop bound goes past the end of the array, cannot assess  <code>s[10]</code></p>\n <figure class=\"highlight c\"><figcaption><span>ASan Example2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * <span class=\"number\">100</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(a); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> a[<span class=\"number\">5</span>]; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is dereferenced after it is free</p>\n <figure class=\"highlight c\"><figcaption><span>ASan Example3</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">char</span> *s = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) * <span class=\"number\">10</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(s); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(s);</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, s);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is double-freed</p>\n<ol start=\"3\">\n<li>MSan（Memory Sanitizer） Compile with  <code>-fsanitize=memory</code> <br>\n 检测未初始化的内存使用。<br>\n性能影响：大约 3 倍的运行时间开销。</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>MSan Example1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> a[<span class=\"number\">10</span>]; </span><br><span class=\"line\">     a[<span class=\"number\">2</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (a[argc]) </span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;print something\\n&quot;</span>); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is allocated on <strong>stack</strong>, but only partially initialised</p>\n <figure class=\"highlight c\"><figcaption><span>MSan Example2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> a = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">     a[<span class=\"number\">2</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (a[argc]) </span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;print something\\n&quot;</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(a); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is allocated on <strong>heap</strong>, but only partially initialised</p>\n<ol start=\"4\">\n<li>UBSan（Undefined Behavior Sanitizer） Compile with  <code>-fsanitize=undefined</code> <br>\n 检测：\n<ul>\n<li>解引用空指针。</li>\n<li>有符号整数溢出。<br>\n性能影响：大约 20% 的运行时间开销。</li>\n</ul>\n</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>UBSan Example1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> n = <span class=\"number\">65</span>; </span><br><span class=\"line\">     <span class=\"type\">int</span> m = n / (n - n); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Division-by-zero is undefined</p>\n <figure class=\"highlight c\"><figcaption><span>UBSan Example2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> </span></span><br><span class=\"line\"><span class=\"class\"> &#123;</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> a, b; </span><br><span class=\"line\"> &#125;; </span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> *<span class=\"title\">x</span> =</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">     <span class=\"type\">int</span> m = x-&gt;a;  <span class=\"comment\">// 访问空指针</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Accessing a null pointer is undefined</p>\n<ol start=\"5\">\n<li>TSan（Thread Sanitizer）<br>\n检测数据竞争（data races）。<br>\n性能影响：运行时间开销约为 5-15 倍，内存开销约为 5-10 倍。</li>\n</ol>\n<h1 id=\"Others\" class=\"active\"><a class=\"anchor\"  href=\"#Others\">#</a>Others</h1>\n<ol>\n<li>\n<p>Parallel Fuzzing(High performance fuzzing)<br>\nRun concurrent fuzzing jobs on multicore systems</p>\n<ul>\n<li>One master instance, one slave per core</li>\n<li>Use the afl-gotcpu tool to measure per-core pre-emption rate<br>\nRun the master (-M) like this:</li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -M fuzzer01</code> <br>\nThen, run the slaves (-S) instances like this:</li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer02</code></li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer03</code></li>\n</ul>\n</li>\n<li>\n<p>Fuzzer Dictionaries(Improve fuzzer mutations)<br>\nBy default, AFL mutation engine is optimised for compact data formats<br>\nCustom dictionaries can help the fuzzer access paths it otherwise wouldn’t  <code>afl-fuzz -x mydict</code> <br>\nGet them from:</p>\n<ul>\n<li><code>dictionaries</code>  directory in AFL</li>\n<li><code>libtokencap</code>  directory in AFL\n<ul>\n<li>Create a dictionary by intercepting calls like  <code>strcmp</code>  and  <code>memcmp</code></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rL21hc3Rlci90ZXN0aW5nL2xpYmZ1enplci9mdXp6ZXJzL2RpY3Rz\">Online resource</span></li>\n</ul>\n</li>\n<li>\n<p>Limitations of Fuzzing</p>\n</li>\n</ol>\n<ul>\n<li>Hard to tell when to stop</li>\n<li>Test the target in the exact configuration you provided, on the input source you set up</li>\n<li>Can get stuck (e.g. checksums)</li>\n<li>Crashes only (typical of most fuzzers). Only notice problems that can be automatically detected</li>\n<li>Need to build target from source</li>\n<li>stdin or file input only</li>\n<li>Coverage-based instrumentation won’t guide it towards all crashes\n<ul>\n<li><code>x = 1/(input – 1234)</code>  ：在这种情况下，AFL 可能难以找到输入 1234，从而导致无法检测到除零错误。</li>\n</ul>\n</li>\n<li>No automatic parallelisation</li>\n<li>Linux/macOS only</li>\n</ul>\n<ol start=\"4\">\n<li>libFuzzer: Guided Fuzzing for APIs<br>\nThe other top general purpose fuzzer\n<ul>\n<li>Use similar algorithms to AFL</li>\n<li>Build it with special compiler instrumentation (LLVM)<br>\nTargets functions rather than programs</li>\n<li>Testers have to write a harness</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "C",
                "software security",
                "AFL",
                "Linux"
            ]
        }
    ]
}