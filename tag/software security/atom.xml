<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title> • Posts by &#34;software security&#34; tag</title>
    <link href="http://example.com" />
    <updated>2024-10-24T11:00:05.000Z</updated>
    <category term="Blog" />
    <category term="日常" />
    <category term="JavaScript" />
    <category term="C language" />
    <category term="Linux" />
    <category term="software security" />
    <entry>
        <id>http://example.com/course/C-language-basics-and-Computer-memory/</id>
        <title>C language basics and Computer memory</title>
        <link rel="alternate" href="http://example.com/course/C-language-basics-and-Computer-memory/"/>
        <content type="html">&lt;h1 id=&#34;C language basics&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#C language basics&#34;&gt;#&lt;/a&gt;C language basics&lt;/h1&gt;
&lt;h2 id=&#34;input/output&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#input/output&#34;&gt;#&lt;/a&gt; input/output&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;To print output to the terminal screen:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;printf(“Hello\n”);&lt;/li&gt;
&lt;li&gt;printf(“Hello %s”, “haxor”);  &amp;#x2F;&amp;#x2F; using a format string&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;To get input from the user:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;scanf(“%d”, &amp;amp;number);&lt;/li&gt;
&lt;/ul&gt;
 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Input/output format symbols&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test\n&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;// `\n`:  Carriage return/new line&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test %d&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;123&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//`%d`:  Decimal value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test %s&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//`%s`:  String value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;test %x&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x123&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//`%x`:  Hex value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

 &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;C Program takes command-line arguments&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//meet.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;greeting(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *temp1, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *temp2) &lt;span class=&#34;comment&#34;&gt;// greeting function to say hello&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; name[&lt;span class=&#34;number&#34;&gt;400&lt;/span&gt;];  &lt;span class=&#34;comment&#34;&gt;// string variable to hold the name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(name, temp2);  &lt;span class=&#34;comment&#34;&gt;// copy function argument to name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello %s %s\n&amp;quot;&lt;/span&gt;, temp1, name);  &lt;span class=&#34;comment&#34;&gt;// print out the greeting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[]) &lt;span class=&#34;comment&#34;&gt;// note the format for arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    greeting(argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], argv[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);  &lt;span class=&#34;comment&#34;&gt;// call function, pass title &amp;amp; name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Bye %s %s\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], argv[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]);  &lt;span class=&#34;comment&#34;&gt;// say “bye&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Compiling C programs&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Compiling C programs&#34;&gt;#&lt;/a&gt; Compiling C programs&lt;/h2&gt;
Compiling C programs(Linux) Using gcc

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;To compile our &lt;code&gt;meet.c&lt;/code&gt; program, type&lt;/p&gt;
 &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$gcc&lt;/span&gt; -o meet meet.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then to execute the new program, type&lt;/p&gt;
 &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ ./meet zz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commonly used gcc flags&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;-o &lt;filename&gt;: produces compiled binary file with filename (a.out by default).&lt;/li&gt;
&lt;li&gt;-S: produces assembly code in a file; saved with a .s extension&lt;/li&gt;
&lt;li&gt;-g, -ggdb: produces extra debugging information for gdb (GNU debugger)&lt;/li&gt;
&lt;li&gt;-c: compiles without linking; produces object files with an .o extension&lt;/li&gt;
&lt;li&gt;Check out manual by using: man gcc&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;32-bit vs 64-bit compilation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;To compile into 32-bit binaries: &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$gcc&lt;/span&gt; -m32 hello.c -o hello&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;install a standard library of  &lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption&gt;&lt;span&gt;OvO&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$sudo&lt;/span&gt; apt install gcc-multilib &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;C vs C#&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#C vs C#&#34;&gt;#&lt;/a&gt; C vs C#&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;C# is type-safe&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Strong static type system + runtime checks (e.g. bounds, type casts) + automatic memory management&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;C is type-unsafe&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Pointers + no runtime check (out-of-bound access, bad type casts), manual memory management&lt;br&gt;Runtime array bounds check in C#&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the following C# code is executed on .NET:&lt;br&gt; &lt;figure class=&#34;highlight c#&#34;&gt;&lt;figcaption&gt;&lt;span&gt;(●ˇ∀ˇ●)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;An exception will be raised at runtime!&lt;/p&gt;
&lt;p&gt;The length of the array is recorded and checked by the runtime&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The length of an array is fixed once created&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No runtime array bounds check in C, If the same C code is executed:&lt;br&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;(●ˇ∀ˇ●)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;No error, result in a silent buffer overflow!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unexpected behaviours such as mysterious crashes depending on what was overwritten&lt;/li&gt;
&lt;li&gt;Attackers may exploit this if they can control the overwritten data&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Automatic memory management in C#&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Programmers do not write code to perform memory management tasks&lt;br&gt;Garbage collector manages the allocation and release of memory&lt;br&gt;C# has no common memory problems such as buffer overflow&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;C# strings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C# strings are &lt;code&gt;objects&lt;/code&gt; of the &lt;code&gt;String&lt;/code&gt; class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Similar to an array of chars, but immutable&lt;/li&gt;
&lt;li&gt;The length is stored on the object for bounds checks at runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All string manipulation operations do not modify the original string&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new string is created upon modification&lt;/li&gt;
&lt;li&gt;For example, &lt;code&gt;str.Trim()&lt;/code&gt; returns a new string&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;C strings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C strings are arrays of characters&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Terminated by and including the first occurrence of the null character &lt;code&gt;\0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String length is not automatically tracked&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is determined by the number of bytes (character) preceding the null character. &lt;/li&gt;
&lt;li&gt;The memory required to store a string is the number of characters plus one&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A string can be manipulated just like any other arrays&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We usually use some built-in string functions in C libraries &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;copy one string to another&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;// use string library     &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str1[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;Hello, Z&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str2[&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;strcpy&lt;/span&gt;(str2, str1);  &lt;span class=&#34;comment&#34;&gt;// copy each character in str1 into str2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 The function &lt;code&gt;strcpy&lt;/code&gt; copies each character in the source string (a series of characters ending with and including a null character) into the destination string &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;To compare two strings&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str1[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; str2[] = &lt;span class=&#34;string&#34;&gt;&amp;quot;haxor&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(str1, str2) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Strings are the same.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Strings are different.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 This code prints out: Strings are different.&lt;br&gt; Note that the function &lt;code&gt;strcmp()&lt;/code&gt; does not return a &lt;code&gt;boolean&lt;/code&gt; result&lt;/li&gt;
&lt;li&gt;Zero represents false, anything else represents true&lt;/li&gt;
&lt;li&gt;No &lt;code&gt;boolean&lt;/code&gt; type in C language prior to C99&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;strong&gt;Other common string functions&lt;/strong&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvQ19Qcm9ncmFtbWluZy9TdHJpbmdfbWFuaXB1bGF0aW9u&#34;&gt;More can be found&lt;/span&gt;&lt;br&gt; &lt;code&gt;strlen&lt;/code&gt;: gets the length of a string&lt;br&gt; &lt;code&gt;strncpy&lt;/code&gt;: copies one string to another with a bound&lt;br&gt; &lt;code&gt;strcat&lt;/code&gt;, &lt;code&gt;strncat&lt;/code&gt;: string concatenation&lt;br&gt; &lt;code&gt;gets&lt;/code&gt;, &lt;code&gt;fgets&lt;/code&gt;: receives input into a string&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;C strings is error prone&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#C strings is error prone&#34;&gt;#&lt;/a&gt;C strings is error prone&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Common string manipulation errors:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Buffer errors&lt;/li&gt;
&lt;li&gt;Heap errors&lt;/li&gt;
&lt;li&gt;Out‐by‐bound errors&lt;/li&gt;
&lt;li&gt;Integer overflows&lt;/li&gt;
&lt;li&gt;Other memory, pointer and type errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;When data is copied from an unbounded source to a fixed‐length sink&lt;/strong&gt;&lt;br&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Unbounded string copy&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; username[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Please enter your username:&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	gets(username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Your username is %s\n&amp;quot;&lt;/span&gt;, username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use of &lt;code&gt;gets()&lt;/code&gt; Function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function &lt;code&gt;gets()&lt;/code&gt; reads input from the user into a buffer, but it does not check the length of the input against the buffer’s size.&lt;br&gt;In this code, the &lt;code&gt;username&lt;/code&gt; array is only 8 bytes long. However, &lt;code&gt;gets()&lt;/code&gt; allows users to enter an input of any length, which means it can write beyond the 8 bytes allocated for &lt;code&gt;username&lt;/code&gt;.&lt;br&gt;This can cause a buffer overflow, which can lead to memory corruption, unexpected behavior, or even security vulnerabilities where attackers can execute arbitrary code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed-Length Buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The username array is declared to have a size of 8, but we need to reserve one byte for the null-terminator &lt;code&gt;\0&lt;/code&gt;, which marks the end of the string.&lt;br&gt;This means only 7 characters can safely be stored in the username buffer.&lt;br&gt;If the input exceeds this limit, it will overflow into adjacent memory, potentially causing the program to crash or behave unpredictably.&lt;br&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Unbounded string copy(fixed)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; username[&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;];  &lt;span class=&#34;comment&#34;&gt;// Buffer limited to 8 bytes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;puts&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Please enter your username:&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fgets(username, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(username), &lt;span class=&#34;built_in&#34;&gt;stdin&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;// Limit input size to prevent overflow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Your username is %s\n&amp;quot;&lt;/span&gt;, username);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;// Standard return type&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;strong&gt;Better string functions from libraries&lt;/strong&gt;&lt;br&gt; Should use functions that restrict the number of bytes for safer programming&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;fgets()&lt;/code&gt;, instead of &lt;code&gt;gets()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;strncpy()&lt;/code&gt;, instead of &lt;code&gt;strcpy()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;strncat()&lt;/code&gt;, instead of &lt;code&gt;strcat()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;snprintf()&lt;/code&gt;, instead of instead of &lt;code&gt;sprintf()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Null‐termination errors&lt;/strong&gt;&lt;br&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Null‐termination errors&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr, &lt;span class=&#34;string&#34;&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;The array is not properly terminated by a null character! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When there is no null character among the first n character of the source, the string placed in the&lt;br&gt;destination will not be null-terminated!&lt;br&gt;The &lt;code&gt;printf()&lt;/code&gt; call prints out all bytes as character till reaching a null!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To test out, let’s add another array:&lt;br&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Null‐termination errors&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr2[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr, &lt;span class=&#34;string&#34;&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr2, &lt;span class=&#34;string&#34;&gt;&amp;quot;9876543210&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr2));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt; The program will print out 01234567899876543210&lt;br&gt; Where the length of source string is the same or greater than the length of target string&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The source string gets truncated&lt;/li&gt;
&lt;li&gt;The target string may not be properly terminated by null!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; How can we fix it?&lt;br&gt; Manually add a null character at the end of the target string:&lt;br&gt; &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Null‐termination errors(fixed)&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; arr[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(arr, &lt;span class=&#34;string&#34;&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;, &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	arr[&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(arr)&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;] = &lt;span class=&#34;string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;The function char &lt;code&gt;*fgets(char *str, int n, FILE *stream)&lt;/code&gt; reads &lt;code&gt;(n-1)&lt;/code&gt; characters from the specific stream plus the final null character&lt;/p&gt;
&lt;h1 id=&#34; Computer memory&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Computer memory&#34;&gt;#&lt;/a&gt; Computer memory&lt;/h1&gt;

&lt;h2 id=&#34; Intel x86 (32-bit)&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Intel x86 (32-bit)&#34;&gt;#&lt;/a&gt; Intel x86 (32-bit)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;von Neumann architecture&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Central processing unit (CPU) executes code &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Main memory of the system (RAM) stores all data and code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Input&amp;#x2F;output system (I&amp;#x2F;O) interfaces with devices such as hard drives, keyboards, and monitors&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/24/671a56f0c953f.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;CPU&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;control unit&lt;/strong&gt; gets instructions to execute from RAM using the instruction pointer, which stores the address of the instruction to execute&lt;br&gt;&lt;strong&gt;Registers&lt;/strong&gt; are the CPU’s basic data storage units and are often used to save time so that the CPU doesn’t need to access RAM. &lt;/p&gt;
&lt;p&gt;在 32 位 x86 架构中，主要的通用寄存器包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EAX: 累加器寄存器，用于算术运算和返回值。&lt;/li&gt;
&lt;li&gt;EBX: 基址寄存器，常用于基址存取。&lt;/li&gt;
&lt;li&gt;ECX: 计数器寄存器，常用于循环和移位操作。&lt;/li&gt;
&lt;li&gt;EDX: 数据寄存器，用于 I&amp;#x2F;O 操作和乘除法。&lt;/li&gt;
&lt;li&gt;ESI: 源索引寄存器，常用于指向内存数据源。&lt;/li&gt;
&lt;li&gt;EDI: 目标索引寄存器，常用于指向内存数据目标。&lt;/li&gt;
&lt;li&gt;EBP: 基址指针寄存器，用于栈帧基址指针。&lt;/li&gt;
&lt;li&gt;ESP: 栈指针寄存器，指向当前栈顶&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;Arithmetic Logic Unit (ALU)&lt;/strong&gt; executes an instruction fetched from RAM and places the results in registers or memory&lt;/p&gt;
&lt;p&gt;CPU runs a program by fetching and executing each instruction&lt;/p&gt;
&lt;h2 id=&#34;Programs in the main memory&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;#Programs in the main memory&#34;&gt; #&lt;/a&gt;  Programs in the main memory&lt;/h2&gt;

&lt;p&gt; Processes are programs loaded into memory, broken into small sections&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;.text section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.data section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.bss section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Heap section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stack section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment&amp;#x2F;Arguments section&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img.picui.cn/free/2024/10/24/671a56f09cb3d.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;.text section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Correspond to the .text portion of the binary executable file. &lt;/p&gt;
&lt;p&gt;Contain the machine instructions to get the task done&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;.data section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store global initialised variables such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int a &amp;#x3D; 0;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;.bss section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store global uninitialised variables such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int a;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Heap section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store dynamically allocated variables&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contain the pre-existing value of that memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Grows from the lower-addressed memory to the higher-addressed memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int *I &amp;#x3D; malloc (sizeof (int));&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Stack section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep track of function calls (recursively)&lt;/p&gt;
&lt;p&gt;Grow from the higher-addressed memory to the lower-addressed memory&lt;/p&gt;
&lt;p&gt;Local variables are in the stack section&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Environment&amp;#x2F;Arguments section&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Store a copy of system-level variables that may be required by the process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, path, shell name, hostname, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command-line arguments are stored in this area.&lt;/p&gt;
&lt;h2 id=&#34; Buffers&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Buffers&#34;&gt;#&lt;/a&gt; Buffers&lt;/h2&gt;

&lt;p&gt; A storage place used to receive and hold data until it can be handled by a process&lt;br&gt; Each process can have its own set of buffers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E.g. memory allocated within the .data or .bss section of the process’s memory&lt;br&gt; Buffer is of &lt;strong&gt;fixed length once allocated&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Hold any predefined type of data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34; Pointers&#34; class=&#34;active&#34;&gt;&lt;a class=&#34;anchor&#34;  href=&#34;# Pointers&#34;&gt;#&lt;/a&gt; Pointers&lt;/h2&gt;

&lt;p&gt;Pointers hold the address of other pieces of memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their size is fixed of 4 bytes for 32-bit memory address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C string can be written as a pointer to character:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;char * str; &lt;/li&gt;
&lt;li&gt;int * point1;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C#’s reference types implicitly use pointers&lt;br&gt;Use dereference to read the value inside the memory address pointed to by the pointer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;printf(“%d”, *point1);&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; symbol dereferences the pointer called point1 and displays the value of the integer using the &lt;code&gt;printf()&lt;/code&gt; function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The type of &lt;code&gt;point1&lt;/code&gt; is a pointer&lt;/li&gt;
&lt;li&gt;The type of &lt;code&gt;*point1&lt;/code&gt; is an integer &lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;Putting the pieces of memory together&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; ind = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;                     &lt;span class=&#34;comment&#34;&gt;// integer stored in .data (initialized)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *str;                       &lt;span class=&#34;comment&#34;&gt;// string pointer stored in .bss (uninitialized)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nothing;                     &lt;span class=&#34;comment&#34;&gt;// integer stored in .bss (uninitialized)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;                                              &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = c;                                  &lt;span class=&#34;comment&#34;&gt;// stored in stack section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	str = (&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; *)&lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt; * &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;));    &lt;span class=&#34;comment&#34;&gt;// reserves 10 characters in heap region &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&lt;span class=&#34;built_in&#34;&gt;strncpy&lt;/span&gt;(str, &lt;span class=&#34;string&#34;&gt;&amp;quot;abcde&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);                   &lt;span class=&#34;comment&#34;&gt;// copies &amp;quot;abcde&amp;quot; into str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fun(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="C language" />
        <category term="Linux" />
        <category term="software security" />
        <updated>2024-10-24T11:00:05.000Z</updated>
    </entry>
</feed>
