{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"c\" tag",
    "description": "🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/course/Heap-buffer-overflow/",
            "url": "http://example.com/course/Heap-buffer-overflow/",
            "title": "Heap buffer overflow",
            "date_published": "2024-10-28T11:57:22.000Z",
            "content_html": "<h1 id=\"Heap allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Heap allocation\">#</a>Heap allocation</h1>\n<h2 id=\"Memory Allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Memory Allocation\">#</a>Memory Allocation</h2>\n<ol>\n<li>Static memory</li>\n</ol>\n<ul>\n<li>Store global variables, permanent for the entire lifetime of the process</li>\n</ul>\n<ol start=\"2\">\n<li>Automatic memory</li>\n</ol>\n<ul>\n<li>Stack stores local variables, stackframes are added or removed for functional calls</li>\n</ul>\n<ol start=\"3\">\n<li>Dynamic memory</li>\n</ol>\n<ul>\n<li>Heap stores shared data structures in a large pool of memory</li>\n<li>Not allocated in contiguous order 由程序员管理</li>\n</ul>\n<h2 id=\"Stack Allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Stack Allocation\">#</a>Stack Allocation</h2>\n<ol>\n<li>Stack is contiguous blocks of memory managed by OS</li>\n</ol>\n<ul>\n<li>Cannot be modified</li>\n</ul>\n<ol start=\"2\">\n<li>Stack grows and shrinks as functions are called and exited</li>\n</ol>\n<ul>\n<li>Usually has an upper bound, may raise exceptions</li>\n</ul>\n<ol start=\"3\">\n<li>Variables are allocated and freed automatically</li>\n</ol>\n<ul>\n<li>Only exist when the function that created them is active on the stack</li>\n</ul>\n<h2 id=\"Heap Allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Heap Allocation\">#</a>Heap Allocation</h2>\n<ol>\n<li>Heap is noncontiguous blocks of memory managed by the programmer</li>\n</ol>\n<ul>\n<li>Can be modified programatically</li>\n</ul>\n<ol start=\"2\">\n<li>Heap is large and boundless, usually limited by only the physical memory available</li>\n<li>Variables are allocated and freed by using library functions or build-in language constructs</li>\n</ol>\n<ul>\n<li>C calls standard library functions, e.g. malloc, realloc, calloc and free</li>\n<li>C++ also uses these functions, but adds build-in operators new and delete</li>\n<li>Pointers are required to access data on the heap</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>Memory Allocation Example</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"type\">int</span> x;  <span class=\"comment\">// 静态变量，存储在静态内存区，生命周期与进程相同</span></span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> y;          <span class=\"comment\">// 栈变量</span></span><br><span class=\"line\">     <span class=\"type\">char</span> *str;      <span class=\"comment\">// 指向堆内存的指针</span></span><br><span class=\"line\"> </span><br><span class=\"line\">     y = <span class=\"number\">4</span>;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;stack memory: %d\\n&quot;</span>, y);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">// 分配 100 个字符的堆内存</span></span><br><span class=\"line\">     str = <span class=\"built_in\">malloc</span>(<span class=\"number\">100</span> * <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\">     str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;m&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;heap memory: %c\\n&quot;</span>, str[<span class=\"number\">0</span>]);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">// 释放分配的堆内存</span></span><br><span class=\"line\">     <span class=\"built_in\">free</span>(str);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 栈上的局部变量 y 和 str 会在这里被自动释放</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/28/671f7e7bed371.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Stack</th>\n<th>Heap</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Basic</strong></td>\n<td>Memory is allocated in a contiguous block</td>\n<td>Memory is allocated in any random order</td>\n</tr>\n<tr>\n<td><strong>Allocation and Deallocation</strong></td>\n<td>Automatic by compiler instructions</td>\n<td>Manual by programmer</td>\n</tr>\n<tr>\n<td><strong>Cost</strong></td>\n<td>Less</td>\n<td>More</td>\n</tr>\n<tr>\n<td><strong>Implementation</strong></td>\n<td>Hard</td>\n<td>Easy</td>\n</tr>\n<tr>\n<td><strong>Access time</strong></td>\n<td>Faster</td>\n<td>Slower</td>\n</tr>\n<tr>\n<td><strong>Main Issue</strong></td>\n<td>Shortage of memory</td>\n<td>Memory fragmentation</td>\n</tr>\n<tr>\n<td><strong>Locality of reference</strong></td>\n<td>Excellent</td>\n<td>Adequate</td>\n</tr>\n<tr>\n<td><strong>Flexibility</strong></td>\n<td>Fixed size</td>\n<td>Resizing is possible</td>\n</tr>\n<tr>\n<td><strong>Data type structure</strong></td>\n<td>Linear</td>\n<td>Hierarchical</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Heap buffer overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Heap buffer overflow\">#</a>Heap buffer overflow</h1>\n<h2 id=\"Dereference\" class=\"active\"><a class=\"anchor\"  href=\"#Dereference\">#</a>Dereference</h2>\n<p>Much harder to exploit heap overflows:</p>\n<ul>\n<li>Heap memory is not flat or contiguous</li>\n<li>There is no return address saved on the heap</li>\n<li>The address to overwrite is hard to find</li>\n<li>General exploitation techniques manipulate the metadata used by memory allocator</li>\n</ul>\n<p>To read/write the value inside the memory address pointed to by the pointer</p>\n<figure class=\"highlight c\"><figcaption><span>Dereference a Pointer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x; </span><br><span class=\"line\"> <span class=\"type\">int</span> *p; <span class=\"comment\">// p 是一个指向整数的指针  *p is an integer</span></span><br><span class=\"line\"> x = <span class=\"number\">0</span>;  <span class=\"comment\">// x 现在等于 0 </span></span><br><span class=\"line\"> p = &amp;x; <span class=\"comment\">// p 指向 x 的地址   now *p == 0, since *p == x</span></span><br><span class=\"line\"> *p = <span class=\"number\">1</span>; <span class=\"comment\">// 相当于 x = 1，因为 p == &amp;x</span></span><br><span class=\"line\">\t     <span class=\"comment\">// 现在 *p 和 x 都等于 1</span></span><br></pre></td></tr></table></figure>\n<p>A C-language structure is a basic data structure that holds multiple fields</p>\n<figure class=\"highlight c\"><figcaption><span>Dereference a Structure Pointer</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MY_STRUCT</span> &#123;</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> my_int; </span><br><span class=\"line\">     <span class=\"type\">float</span> my_float; </span><br><span class=\"line\"> &#125; MY_STRUCT_T; </span><br><span class=\"line\"></span><br><span class=\"line\"> MY_STRUCT_T info = &#123;<span class=\"number\">1</span>, <span class=\"number\">3.141593F</span>&#125;; </span><br><span class=\"line\"> MY_STRUCT_T *instance = &amp;info; </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">int</span> a = info.my_int;        <span class=\"comment\">// 使用 &#x27;.&#x27; 操作符选择字段</span></span><br><span class=\"line\"> <span class=\"type\">int</span> b = (*instance).my_int; <span class=\"comment\">// 解引用后选择字段</span></span><br><span class=\"line\"> <span class=\"type\">int</span> c = instance-&gt;my_int;   <span class=\"comment\">// &#x27;-&gt;&#x27; 是前一种情况的语法糖</span></span><br></pre></td></tr></table></figure>\n<p>访问结构体字段的三种方式：</p>\n<ul>\n<li><code>info.my_int</code> ：使用  <code>.</code>  操作符直接访问结构体变量  <code>info</code>  中的字段  <code>my_int</code> 。这是最简单的访问方式，因为  <code>info</code>  是结构体变量，不是指针。</li>\n<li><code>*instance</code> ：解引用指针  <code>instance</code> ，获取它指向的结构体  <code>info</code> 。 <code>(*instance)</code>  代表结构体本身。<br>\n <code>(*instance).my_int</code> ：在解引用后使用 <code>.</code>  操作符访问结构体字段  <code>my_int</code> 。这种方式相当于对 info 变量的直接访问，只不过是通过指针来完成的。</li>\n<li><code>instance-&gt;my_int</code> ： <code>-&gt;</code>  是一种简便写法（语法糖），用于访问指针指向的结构体的字段。这相当于  <code>(*instance).my_int</code> ，但写法更加简洁。 <code>-&gt;</code>  只能用于指针，而  <code>.</code>  用于直接的结构体变量。</li>\n</ul>\n<h2 id=\"Heap Overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Heap Overflow\">#</a>Heap Overflow</h2>\n<ol>\n<li>Simple Heap Overflow</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>Simple Heap Overflow</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">target</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">char</span> buf[<span class=\"number\">100</span>];        <span class=\"comment\">// 易受攻击的缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">void</span> (*fun)(<span class=\"type\">char</span> *);  <span class=\"comment\">// 函数指针</span></span><br><span class=\"line\"> &#125; <span class=\"type\">target_t</span>;</span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">(<span class=\"type\">char</span> *buf)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 目标函数，可能被攻击者控制的数据替换</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">target_t</span> *rec = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">target_t</span>)); <span class=\"comment\">// 动态分配结构体内存</span></span><br><span class=\"line\">     rec-&gt;fun = foo; <span class=\"comment\">// 将函数指针初始化为 foo</span></span><br><span class=\"line\">     gets(rec-&gt;buf); <span class=\"comment\">// 易受攻击的函数，可能导致缓冲区溢出</span></span><br><span class=\"line\">     rec-&gt;fun(<span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">// 调用函数指针</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结构体定义</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">target</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">char</span> buf[<span class=\"number\">100</span>];        <span class=\"comment\">// 缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">void</span> (*fun)(<span class=\"type\">char</span> *);  <span class=\"comment\">// 函数指针</span></span><br><span class=\"line\"> &#125; <span class=\"type\">target_t</span>;</span><br></pre></td></tr></table></figure>\n<p>结构体  <code>target</code>  包含两个字段：<br>\n <code>buf</code> ：一个大小为 100 字节的字符数组，是易受攻击的缓冲区。<br>\n <code>fun</code> ：一个函数指针，指向接受一个字符指针参数的函数。</p>\n<ul>\n<li>缓冲区溢出</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gets(rec-&gt;buf);</span><br></pre></td></tr></table></figure>\n<p><code>gets()</code>  是一个危险的函数，它从标准输入读取数据并存储到指定的缓冲区  <code>buf</code>  中。<br>\n <code>gets()</code>  不会检查输入数据的长度，如果输入超过了  <code>buf</code>  的 100 字节大小限制，就会导致缓冲区溢出。</p>\n<ul>\n<li>利用堆溢出<br>\n当攻击者提供的输入长度超过 100 字节时，超出的数据将会覆盖  <code>fun</code>  函数指针。<br>\n攻击者可以利用这种情况，将  <code>fun</code>  指针重写为攻击者控制的地址，从而在程序中执行任意代码。</li>\n</ul>\n<ol start=\"2\">\n<li>Difficult to Overwrite Non-Contiguous Memory<br>\nHeap buffers are not adjacent, there may some extra space</li>\n</ol>\n<ul>\n<li>It may be possible to calculate the extra space to craft an exploit</li>\n<li>But the exploit will be application-specific!\n<ol>\n<li>堆内存的分散性\n<ul>\n<li>堆上的缓冲区并不总是相邻的，因为它们根据内存分配器的策略进行分配。</li>\n<li>不同分配之间可能存在空隙（padding）或元数据（metadata），使得直接覆盖非连续内存变得困难。</li>\n</ul>\n</li>\n<li>内存分配器的元数据\n<ul>\n<li>堆内存中分配的每个块通常带有元数据（如大小、状态、指向下一个块的指针等），用于管理内存块的分配和释放。</li>\n<li>攻击者在试图覆盖非连续内存时，还需要考虑这些元数据的存在，否则可能导致分配器崩溃或异常，暴露攻击的痕迹。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Heap Allocator\" class=\"active\"><a class=\"anchor\"  href=\"#Heap Allocator\">#</a>Heap Allocator</h2>\n<ol>\n<li>How heap memory is allocated?<br>\nHeap allocator maintains a <strong>doubly-linked list</strong> of allocated and free chunks (blocks of memory)\n<ul>\n<li><code>malloc()</code>  and  <code>free()</code>  add or remove chunks from this list<br>\nChunk management information is stored together with user data in memory</li>\n<li>Writing data past the end of a chunk boundary may overwrite the management fields</li>\n</ul>\n</li>\n<li>Chunk Record<br>\nHeap blocks are C records (i.e. struct) that have a few fields along with the chunk of memory\n<ul>\n<li>fd: the pointer to the next block</li>\n<li>bk: the pointer to the previous block</li>\n<li>ps: the size of the previous chunk</li>\n<li>sz: the size of the current chunk</li>\n<li>Other fields such as free flag to indicate if the current chunk is in the freelis</li>\n</ul>\n</li>\n<li>Unlink a Chunk<br>\n <code>free()</code>  removes a chunk from allocated list</li>\n</ol>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/28/671f8d584507c.png\" alt=\"img\"></p>\n<ul>\n<li>Unlink performs the following two writes on the list’s fields:\n<ul>\n<li>chunk2‐&gt;bk‐&gt;fd = chunk2‐&gt;fd</li>\n<li>chunk2‐&gt;fd‐&gt;bk = chunk2‐&gt;bk</li>\n</ul>\n</li>\n<li>By overflowing  <code>chunk2</code> , attacker can take control of  <code>chunk2‐&gt;fd</code>  and  <code>chunk2‐&gt;bk</code></li>\n<li>Suppose the attacker wants to write  <code>value</code>  to memory address  <code>addr</code>\n<ul>\n<li>Attacker sets  <code>chunk2‐&gt;fd</code>  to be  <code>value</code></li>\n<li>Attacker sets  <code>chunk2‐&gt;bk</code>  to be  <code>(addr - offset_fd)</code>\n<ul>\n<li><code>offset_fd</code>  is the offset of the fd field in the record</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The attacker can write arbitrary value to arbitrary memory address in this way</li>\n<li>The first unlink write achieves the attacker’s goal:  <code>chunk2‐&gt;bk‐&gt;fd = chunk2‐&gt;fd</code></li>\n<li>The first write effectively becomes:  <code>(addr - offset_fb)‐&gt;fd = value</code></li>\n<li>This is the same as  <code>*addr = value</code>\n<ul>\n<li>Fields are selected by offsets</li>\n<li><code>offset_fd</code>  cancels out  <code>fd</code> <br>\nAttackers can use hundreds of writes to copy the shellcode into memory</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Prevention\">#</a>Prevention</h2>\n<p>Very hard to detect and prevent due to the dynamic nature of the heap<br>\nPossible ways to protect against heap overflow</p>\n<ul>\n<li>Prevent execution of the payload by separating the code and data</li>\n<li>Introduce randomisation so the heap is not found at a fixed offset</li>\n<li>Introduce sanity checks into the heap allocator</li>\n</ul>\n<h1 id=\"Pointer-related heap errors \" class=\"active\"><a class=\"anchor\"  href=\"#Pointer-related heap errors \">#</a>Pointer-related heap errors </h1>\n<h2 id=\"Use After Free\" class=\"active\"><a class=\"anchor\"  href=\"#Use After Free\">#</a>Use After Free</h2>\n<ol>\n<li>A memory is accessed after it is freed (and re-allocated)\n<ul>\n<li>Can cause a program to crash, use unexpected values, or execute code</li>\n</ul>\n</li>\n<li>Attackers may overwrite the re-allocated memory including metadata\n<ul>\n<li>May result in the same effect as some heap overflow vulnerabilities</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>Use After Free Example</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> *buf1, *buf2; </span><br><span class=\"line\">    buf1 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE1); <span class=\"comment\">// 为 buf1 分配 BUFSIZE1 大小的内存</span></span><br><span class=\"line\">    <span class=\"comment\">// 释放 buf1，使其分配的内存可被重用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf1); </span><br><span class=\"line\">    <span class=\"comment\">// 可能在 buf1 释放的内存区域内分配 buf2</span></span><br><span class=\"line\">    buf2 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE2); </span><br><span class=\"line\">    <span class=\"comment\">// 攻击者可能会通过覆盖 buf2 及其元数据来利用漏洞</span></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(buf1, argv[<span class=\"number\">1</span>], BUFSIZE1<span class=\"number\">-1</span>); </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Example Problems\n<ol>\n<li><code>free(buf1)</code>  的影响\n<ul>\n<li>当  <code>buf1</code>  被释放后，其对应的内存区域变得可供再次分配。</li>\n<li>因为  <code>free()</code>  并不会立即将内存清零或使指针失效，所以  <code>buf1</code>  仍然指向被释放的内存区域。</li>\n<li>在这段代码中， <code>buf2</code>  可能会被分配到  <code>buf1</code>  释放的内存区域（这取决于堆分配器的实现和内存布局）。</li>\n</ul>\n</li>\n<li><code>strncpy(buf1, argv[1], BUFSIZE1-1)</code>  的问题\n<ul>\n<li>即使  <code>buf1</code>  已被释放，程序仍然在此处试图使用  <code>buf1</code>  进行写操作。</li>\n<li>由于  <code>buf1</code>  被释放后可能被  <code>buf2</code>  重新使用， <code>buf1</code>  和  <code>buf2</code>  可能指向相同的内存区域。这意味着通过  <code>strncpy()</code>  对  <code>buf1</code>  的写入可能会影响  <code>buf2</code> ，甚至覆盖  <code>buf2</code>  的元数据。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Double Free\" class=\"active\"><a class=\"anchor\"  href=\"#Double Free\">#</a>Double Free</h2>\n<ol>\n<li>A memory address is freed (i.e.  <code>free()</code> ) twice\n<ul>\n<li>Can also cause a program to crash, use unexpected values, or execute code</li>\n</ul>\n</li>\n<li>Attackers may corrupt metadata of new memory allocated at the address\n<ul>\n<li>May also result in the same effect as some heap overflow vulnerabilities</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>Double Free Example</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> *buf1, *buf2; </span><br><span class=\"line\">    buf1 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE1);  <span class=\"comment\">// 为 buf1 分配 BUFSIZE1 大小的内存</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf1);  <span class=\"comment\">// 释放 buf1，内存可供重用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf2 可能被分配到 buf1 释放的内存区域</span></span><br><span class=\"line\">    buf2 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE2);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf2 可能包含攻击者提供的数据</span></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(buf2, argv[<span class=\"number\">1</span>], BUFSIZE2<span class=\"number\">-1</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf1 被再次释放（双重释放）</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf1); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放 buf2（使用了可能被攻击者修改的元数据）</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf2);  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Example Problems\n<ol>\n<li>第一次释放  <code>buf1</code>\n<ul>\n<li>通过  <code>free(buf1)</code> ， <code>buf1</code>  所占用的内存被释放，成为可供重用的内存区域。</li>\n<li><code>buf2</code>  可能分配到  <code>buf1</code>  的内存区域</li>\n<li>因为  <code>buf1</code>  已被释放，内存分配器可能会将  <code>buf2</code>  分配到之前  <code>buf1</code>  占用的内存区域。</li>\n<li>攻击者可能通过覆盖  <code>buf2</code>  中的内容来修改元数据</li>\n<li>使用  <code>strncpy()</code>  函数将用户输入复制到  <code>buf2</code>  中，这可能导致覆盖  <code>buf2</code>  的元数据（如堆链表指针或其他关键数据）。</li>\n</ul>\n</li>\n<li>第二次释放  <code>buf1</code>\n<ul>\n<li><code>free(buf1)</code>  导致双重释放，因为  <code>buf1</code>  已经在第一次释放后被重用，现在与  <code>buf2</code>  指向相同的内存区域。</li>\n<li>此时，内存分配器可能会使用被攻击者修改的元数据，从而导致不安全的内存操作。</li>\n</ul>\n</li>\n<li>释放  <code>buf2</code>\n<ul>\n<li>当  <code>buf2</code>  被释放时，内存分配器可能会再次处理被攻击者修改的元数据，进一步导致内存覆盖或异常。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Prevention and Detection of Pointer Errors\" class=\"active\"><a class=\"anchor\"  href=\"#Prevention and Detection of Pointer Errors\">#</a>Prevention and Detection of Pointer Errors</h2>\n<ol>\n<li>Difficult to detect all of them by either dynamic or static analysis</li>\n</ol>\n<ul>\n<li>Complex runtime states</li>\n<li>E.g. memory may be allocated, freed and used in different functions via aliases (pointers)</li>\n<li>Fuzzing may detect some in executed paths when they crash the program</li>\n</ul>\n<ol start=\"2\">\n<li>The simplest prevention is to set all freed pointers to NULL</li>\n</ol>\n<ul>\n<li>Trigger null pointer dereference errors when accessed</li>\n<li>Most operating systems provide built-in defence against null-pointer dereference</li>\n</ul>\n",
            "tags": [
                "C",
                "software security"
            ]
        },
        {
            "id": "http://example.com/course/AFL/",
            "url": "http://example.com/course/AFL/",
            "title": "AFL",
            "date_published": "2024-10-28T04:45:49.000Z",
            "content_html": "<h1 id=\"American Fuzzy Lop\" class=\"active\"><a class=\"anchor\"  href=\"#American Fuzzy Lop\">#</a> American Fuzzy Lop</h1>\n<h2 id=\"Definition\" class=\"active\"><a class=\"anchor\"  href=\"#Definition\">#</a>Definition</h2>\n<ol>\n<li>A security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. Currently state-of-the-practice at fuzzing (together with forks)</li>\n</ol>\n<ul>\n<li>A type of coverage-based fuzzing: Instrument target programs to track test coverage</li>\n<li>A type of evolutionary/genetic fuzzing: Attempt to generate inputs based on the response of the program</li>\n</ul>\n<ol start=\"2\">\n<li>Why AFL</li>\n</ol>\n<ul>\n<li>The best general purpose fuzzer\n<ul>\n<li>For C/C++/Objective C programs</li>\n</ul>\n</li>\n<li>Effective and well-engineered with lots of heuristics\n<ul>\n<li>Fast – lots of test cases per second</li>\n<li>Clever – test cases are well chosen</li>\n<li>Easy to use (Linux and other platforms)</li>\n</ul>\n</li>\n<li>Deliver out-of-the-box performance far superior to mutation fuzzing or coverage-only tools</li>\n</ul>\n<ol start=\"3\">\n<li>AFL Approach\n<ol>\n<li>Load user-supplied initial test cases into the queue</li>\n<li>Take next input file from the queue</li>\n<li>Attempt to trim the test case to the smallest size</li>\n<li>Repeatedly mutate the file using traditional fuzzing strategies</li>\n<li>If any of the generated mutations resulted in a new state transition recorded by the instrumentation, add mutated output as a new entry in the queue</li>\n<li>Go to 2<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/28/671f221b5c7ee.png\" alt=\"img\"></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Fuzzing Through AFL\" class=\"active\"><a class=\"anchor\"  href=\"#Fuzzing Through AFL\">#</a>Fuzzing Through AFL</h2>\n<ol>\n<li>Instrumenting Programs for AFL<br>\nCompile through AFL wrappers to generate an instrumented executable for fuzzing\n<ul>\n<li>Basically, replace  <code>gcc</code>  with  <code>afl‐gcc</code>  or  <code>afl-clang</code></li>\n<li>For simple compilation,  <code>afl‐gcc test.c ‐o test</code> <br>\nFor larger projects that use the make build system, add to the Makefile:</li>\n<li><code>CC=path-to/afl-gcc</code>  or  <code>CC=path-to/afl-clang</code></li>\n<li>This allows to build instrumented target program with the AFL wrappers<br>\nFor C++ code, use the C++ wrappers  <code>afl-g++</code>  or  <code>afl-clang++</code></li>\n<li>For example in the Makefile:  <code>CXX=path-to/afl-g++</code>  or  <code>CXX=path-to/afl-clang++</code> <br>\nAFL 会在编译时插装目标程序的代码，以便在执行期间跟踪路径覆盖情况。插装后的二进制文件包含对 <code> __afl_maybe_log</code>  的调用，该函数记录程序的执行状态。</li>\n</ul>\n</li>\n<li>Fuzzing Through AFL</li>\n</ol>\n<ul>\n<li>Start fuzzing with AFL   <code>afl‐fuzz ‐i testcase ‐o output ./test @@</code></li>\n<li>Test cases are under testcase</li>\n<li>The output produced by  goes to the output directory</li>\n<li>The special symbols  <code>@@</code>  tell AFL to take the file names under test case and feed it to test. Not needed if the program takes input from stdin</li>\n<li>Other common options:\n<ul>\n<li><code>-t</code>  sets timeout for the executed process</li>\n<li><code>-m</code>  sets memory limit for the executed process</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Initial Test Cases<br>\nDon’t waste too much time trying to synthesise your target’s input format<br>\nFind some real inputs that exercise as much of the target as possible<br>\nFrom the AFL user guide:\n<ul>\n<li>Keep the files small. Under 1 kB is ideal, although not strictly necessary</li>\n<li>Use multiple test cases only if they are functionally different from each other</li>\n</ul>\n</li>\n<li>When To Stop</li>\n</ol>\n<ul>\n<li>Never, as fuzzing is part of continuous integration</li>\n<li>hen the  <code>cycles counter</code>  is green\n<ul>\n<li>Last new path was found many cycles ago</li>\n<li>Pending paths is zero</li>\n</ul>\n</li>\n<li>When the cycles counter is blue\n<ul>\n<li>Last new path was found over a cycle ago</li>\n</ul>\n</li>\n<li>If you want to stop earlier, press Ctrl-C\n<ul>\n<li>E.g. it’s been running for a while (hours + millions of executions + at least 2 cycles</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>AFL Output</li>\n</ol>\n<ul>\n<li>File  <code>fuzzer_stats</code>  provides summary of stats UI</li>\n<li>File  <code>plot_data</code>  shows the progress of fuzzer</li>\n<li>Directory  <code>queue</code>  shows inputs that led to paths</li>\n<li>Directory  <code>crashes</code>  contains input that caused crash</li>\n<li>Directory  <code>hangs</code>  contains input that caused hang</li>\n</ul>\n<ol start=\"6\">\n<li>AFL Crashes<br>\nUnique if the associated execution paths involve any state transitions not seen previously. A single bug may be reached in multiple ways, but AFL can usually recognise<br>\nCrashes may be caused by failed assertions - as they abort</li>\n</ol>\n<h1 id=\"Compiler-supported sanitizers\" class=\"active\"><a class=\"anchor\"  href=\"#Compiler-supported sanitizers\">#</a>Compiler-supported sanitizers</h1>\n<ol>\n<li>Sanitisers 和加固措施</li>\n</ol>\n<ul>\n<li>Sanitisers（内存清理器）：通过在二进制文件中插入额外的代码，检查不良的运行条件。提高模糊测试效果。</li>\n<li>Common compiler-supported sanitisers: ASan, MSan, UBSan, TSan</li>\n<li>加固选项：使内存错误的检测更容易。 <code>AFL_HARDEN=1</code> ：AFL 的硬化选项，用于检测更多的内存错误。</li>\n<li>注意：Sanitisers 通常不兼容，因此建议：\n<ul>\n<li>大多数模糊测试运行时启用  <code>AFL_HARDEN</code> 。</li>\n<li>小部分测试运行时分别启用每个 Sanitisers，以覆盖不同类型的内存错误。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ASan（Address Sanitizer）Compile with  <code>-fsanitize=address</code> <br>\n 检测内容：\n<ul>\n<li>堆、栈和全局变量的越界访问。</li>\n<li>Use-after-free、double-free、invalid free。</li>\n<li>内存泄漏。</li>\n</ul>\n</li>\n</ol>\n<p>性能影响：大约 2 倍的运行时间开销。</p>\n<figure class=\"highlight c\"><figcaption><span>ASan Example1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 10 </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> s[N] = <span class=\"string\">&quot;123456789&quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= N; i++) </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, s[i]); </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>Loop bound goes past the end of the array, cannot assess  <code>s[10]</code></p>\n <figure class=\"highlight c\"><figcaption><span>ASan Example2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * <span class=\"number\">100</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(a); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> a[<span class=\"number\">5</span>]; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is dereferenced after it is free</p>\n <figure class=\"highlight c\"><figcaption><span>ASan Example3</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">char</span> *s = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) * <span class=\"number\">10</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(s); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(s);</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, s);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is double-freed</p>\n<ol start=\"3\">\n<li>MSan（Memory Sanitizer） Compile with  <code>-fsanitize=memory</code> <br>\n 检测未初始化的内存使用。<br>\n性能影响：大约 3 倍的运行时间开销。</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>MSan Example1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> a[<span class=\"number\">10</span>]; </span><br><span class=\"line\">     a[<span class=\"number\">2</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (a[argc]) </span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;print something\\n&quot;</span>); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is allocated on <strong>stack</strong>, but only partially initialised</p>\n <figure class=\"highlight c\"><figcaption><span>MSan Example2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> a = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">     a[<span class=\"number\">2</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (a[argc]) </span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;print something\\n&quot;</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(a); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is allocated on <strong>heap</strong>, but only partially initialised</p>\n<ol start=\"4\">\n<li>UBSan（Undefined Behavior Sanitizer） Compile with  <code>-fsanitize=undefined</code> <br>\n 检测：\n<ul>\n<li>解引用空指针。</li>\n<li>有符号整数溢出。<br>\n性能影响：大约 20% 的运行时间开销。</li>\n</ul>\n</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>UBSan Example1</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> n = <span class=\"number\">65</span>; </span><br><span class=\"line\">     <span class=\"type\">int</span> m = n / (n - n); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Division-by-zero is undefined</p>\n <figure class=\"highlight c\"><figcaption><span>UBSan Example2</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> </span></span><br><span class=\"line\"><span class=\"class\"> &#123;</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> a, b; </span><br><span class=\"line\"> &#125;; </span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> *<span class=\"title\">x</span> =</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">     <span class=\"type\">int</span> m = x-&gt;a;  <span class=\"comment\">// 访问空指针</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Accessing a null pointer is undefined</p>\n<ol start=\"5\">\n<li>TSan（Thread Sanitizer）<br>\n检测数据竞争（data races）。<br>\n性能影响：运行时间开销约为 5-15 倍，内存开销约为 5-10 倍。</li>\n</ol>\n<h1 id=\"Others\" class=\"active\"><a class=\"anchor\"  href=\"#Others\">#</a>Others</h1>\n<ol>\n<li>\n<p>Parallel Fuzzing(High performance fuzzing)<br>\nRun concurrent fuzzing jobs on multicore systems</p>\n<ul>\n<li>One master instance, one slave per core</li>\n<li>Use the afl-gotcpu tool to measure per-core pre-emption rate<br>\nRun the master (-M) like this:</li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -M fuzzer01</code> <br>\nThen, run the slaves (-S) instances like this:</li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer02</code></li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer03</code></li>\n</ul>\n</li>\n<li>\n<p>Fuzzer Dictionaries(Improve fuzzer mutations)<br>\nBy default, AFL mutation engine is optimised for compact data formats<br>\nCustom dictionaries can help the fuzzer access paths it otherwise wouldn’t  <code>afl-fuzz -x mydict</code> <br>\nGet them from:</p>\n<ul>\n<li><code>dictionaries</code>  directory in AFL</li>\n<li><code>libtokencap</code>  directory in AFL\n<ul>\n<li>Create a dictionary by intercepting calls like  <code>strcmp</code>  and  <code>memcmp</code></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rL21hc3Rlci90ZXN0aW5nL2xpYmZ1enplci9mdXp6ZXJzL2RpY3Rz\">Online resource</span></li>\n</ul>\n</li>\n<li>\n<p>Limitations of Fuzzing</p>\n</li>\n</ol>\n<ul>\n<li>Hard to tell when to stop</li>\n<li>Test the target in the exact configuration you provided, on the input source you set up</li>\n<li>Can get stuck (e.g. checksums)</li>\n<li>Crashes only (typical of most fuzzers). Only notice problems that can be automatically detected</li>\n<li>Need to build target from source</li>\n<li>stdin or file input only</li>\n<li>Coverage-based instrumentation won’t guide it towards all crashes\n<ul>\n<li><code>x = 1/(input – 1234)</code>  ：在这种情况下，AFL 可能难以找到输入 1234，从而导致无法检测到除零错误。</li>\n</ul>\n</li>\n<li>No automatic parallelisation</li>\n<li>Linux/macOS only</li>\n</ul>\n<ol start=\"4\">\n<li>libFuzzer: Guided Fuzzing for APIs<br>\nThe other top general purpose fuzzer\n<ul>\n<li>Use similar algorithms to AFL</li>\n<li>Build it with special compiler instrumentation (LLVM)<br>\nTargets functions rather than programs</li>\n<li>Testers have to write a harness</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "C",
                "software security",
                "AFL",
                "Linux"
            ]
        },
        {
            "id": "http://example.com/course/Format-string-bugs/",
            "url": "http://example.com/course/Format-string-bugs/",
            "title": "Format string bugs",
            "date_published": "2024-10-26T11:52:22.000Z",
            "content_html": "<h1 id=\"Format Functions\" class=\"active\"><a class=\"anchor\"  href=\"#Format Functions\">#</a>Format Functions</h1>\n<ol>\n<li>Format Functions</li>\n</ol>\n<ul>\n<li><code>printf</code>  Output a formatted string</li>\n<li><code>fprintf</code>  Writes the printf to a file</li>\n<li><code>sprintf</code>  Prints into a string</li>\n<li><code>snprintf</code>  Prints into a string checking the length</li>\n<li><code>vprintf</code>  Prints the argument list to stdout</li>\n<li><code>vfprintf</code>  Prints the argument list to a file</li>\n<li><code>vsprintf</code>  Prints the argument list to a string</li>\n<li><code>vsnprintf</code>  Prints the argument to a string checking the length<br>\n 总结： <code>printf</code>  和  <code>fprintf</code>  用于输出格式化字符串到标准输出或文件。<br>\n <code>sprintf</code>  和  <code>snprintf</code>  用于将格式化字符串写入字符串缓冲区， <code>snprintf</code>  更安全。<br>\n <code>vprintf</code> 、 <code>vfprintf</code> 、 <code>vsprintf</code>  和  <code>vsnprintf</code>  用于处理可变参数列表，与前面的函数类似，但专门用于  <code>va_list</code>  参数的处理。</li>\n</ul>\n<ol start=\"2\">\n<li>Format Strings</li>\n</ol>\n<ul>\n<li>Format String is the argument of format functions that contains format parameters. Format parameters are placeholders to be replaced with user inputs</li>\n<li>For example, the statement will output different sentences, depending on what is contained in the variable name:  <code>printf(&quot;Hello, %s.&quot;, &amp;name);</code></li>\n<li>If the variable name contains the string “Zz”, then  <code>printf()</code>  will output: Hello, Zz.</li>\n</ul>\n<ol start=\"3\">\n<li>Common Parameters Used in Format String Attacks</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>传递方式</th>\n<th>在攻击中的作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%s</td>\n<td>打印字符串</td>\n<td>引用（指向字符串的指针）</td>\n<td>攻击者可以利用 % s 打印出内存中的任意数据，通过提供特定的内存地址，读取敏感数据（如密码、密钥等）。</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>打印有符号十进制整数</td>\n<td>整数值</td>\n<td>虽然 % d 通常用于整数显示，但攻击者可以通过它来泄露内存中的整数值。</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>打印无符号十进制整数</td>\n<td>无符号整数值</td>\n<td>与 % d 类似，但用于无符号整数的显示。</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>打印十六进制整数（小写）</td>\n<td>无符号整数值</td>\n<td>攻击者可以通过 % x 逐步读取内存，以十六进制显示地址中的数据内容。</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>打印单个字符</td>\n<td>字符值</td>\n<td>用于显示单个字符，但在攻击中用途有限。</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>将已打印的字符数写入指定变量</td>\n<td>引用（指向整数的指针）</td>\n<td>攻击者可以利用 % n 修改任意内存地址的值，这是格式字符串攻击中最危险的参数之一，可能被用来修改程序的控制流。</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>打印 % 字符</td>\n<td>无</td>\n<td>用于输出 % 字符，无特别的攻击价值。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>How Do Format Functions Work?<br>\nAccording to the data format dictated by the format parameters, format functions retrieve the arguments from the stack</li>\n</ol>\n<ul>\n<li>printf(“A is the number %d, B is the string %s”, A, &amp;B);<br>\nThe  <code>printf()</code>  function will attempt to retrieve the value of A and the address of string B from the stack<br>\n 在格式化字符串中，每个格式参数（如  <code>%d</code> 、 <code>%s</code> ）都告诉  <code>printf()</code>  如何解释栈中的数据： <code>%d</code>  表示检索一个 整数值。 <code>%s</code>  表示检索一个 字符串指针（地址），然后根据地址打印对应的字符串。</li>\n</ul>\n<h1 id=\"Exploit\" class=\"active\"><a class=\"anchor\"  href=\"#Exploit\">#</a>Exploit</h1>\nThe vulnerability occurs when there is a mismatch between the number of format parameters and the number of function arguments provided to fill those places \n- For example, if an attacker is able to supply more placeholders than there are arguments, he/she can use format functions to read or write the stack! \nFormat functions can be exploited when an attacker is given direct control over the format string fed into the function\n<ol>\n<li>Reading Data from Stack</li>\n</ol>\n<ul>\n<li>printf(&quot;A is the number  <code>%d</code> , reading stack data:  <code>%x</code> &quot;, A);\n<ul>\n<li><code>printf()</code>  will attempt to retrieve two values from the stack</li>\n<li>But only one of those is placed on the stack</li>\n<li><code>printf()</code>  will retrieve the next value on the stack and display it in hex format!</li>\n</ul>\n</li>\n<li>To print the next 20 items on the stack:\n<ul>\n<li>printf(&quot;%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x&quot;);</li>\n</ul>\n</li>\n<li>To print the tenth element next on the stack:\n<ul>\n<li>printf(&quot;%10$x&quot;);</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Reading Data at Arbitrary Location  <code>%s</code></li>\n</ol>\n<ul>\n<li>Format functions treat the data on the stack as an address to go fetch a string\n<ul>\n<li>Note that  <code>%s</code>  is passed as reference!</li>\n</ul>\n</li>\n<li>How to control the address accessed by  <code>%s</code> ?\n<ul>\n<li>Place an address on the format string (the string is stored on stack)</li>\n<li>Get  <code>%s</code>  to dereference it!</li>\n</ul>\n</li>\n<li>To print the string located at address 0x12345678:\n<ul>\n<li>printf(&quot;\\x78\\x56\\x34\\x12%x%x%x%s&quot;, A, B, C);</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Writing Data at Arbitrary Location  <code>%n</code></li>\n</ol>\n<ul>\n<li><code>%n</code>  stores the number of characters written so far into the corresponding function argument! For example, the following code put the integer 5 into the variable  <code>num_char</code></li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num_char; </span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;11111%n&quot;</span>, &amp;num_char); </span><br></pre></td></tr></table></figure>\n<p>With width-controlling format parameters, the attacker can write arbitrary integers to the location pointed to by the function argument</p>\n<ul>\n<li>Write 10 to num_char using width-controlling format parameter</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num_char; </span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%10d%n&quot;</span>, <span class=\"number\">0</span>, &amp;num_char);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Control the amount of data written with length parameter\n<ul>\n<li><code>printf(&quot;%10d%hn&quot;, 0, &amp;num_char);</code></li>\n<li>Writes 2 bytes (instead of 4 bytes) to  <code>&amp;num_char</code></li>\n</ul>\n</li>\n<li>Combined with the trick to access arbitrary memory locations, the attacker can write to arbitrary memory locations</li>\n</ul>\n<ol start=\"4\">\n<li>Example</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">char</span> buf[<span class=\"number\">512</span>]; </span><br><span class=\"line\">     fgets(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"built_in\">stdin</span>); <span class=\"comment\">// 安全读取输入，不会导致缓冲区溢出</span></span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The input is:&quot;</span>); </span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(buf);  <span class=\"comment\">// 存在格式化字符串漏洞</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>printf(buf);</code>  直接使用了用户输入的内容作为格式化字符串。如果  <code>buf</code>  中包含格式化占位符（如  <code>%s</code> 、 <code>%x</code> 、 <code>%n</code>  等）， <code>printf()</code>  会将其解释为格式化指令，从而造成安全隐患。</li>\n<li>修复：  <code>printf(&quot;The input is: %s&quot;, buf);</code> ：% s 确保输入内容被当作普通字符串处理，而不是格式化字符串</li>\n</ul>\n<h1 id=\"Denial of Service Attacks\" class=\"active\"><a class=\"anchor\"  href=\"#Denial of Service Attacks\">#</a>Denial of Service Attacks</h1>\n<ul>\n<li>\n<p>Crash the program by attempting to access an invalid address</p>\n<ul>\n<li>Use  <code>%s</code>  to retrieve a value from the stack till encountering an invalid memory location</li>\n</ul>\n</li>\n<li>\n<p>The exploit string would look something like this</p>\n<ul>\n<li>·printf(&quot;%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s&quot;);·</li>\n</ul>\n</li>\n<li>\n<p>The more %s used in the format string, the higher the chance of an invalid address</p>\n</li>\n</ul>\n<h1 id=\"Format String Attacks Prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Format String Attacks Prevention\">#</a>Format String Attacks Prevention</h1>\n<ol>\n<li>Hard-coded format strings (e.g. no  <code>printf(arg)</code> )</li>\n<li>Do not use the fancy  <code>%n</code></li>\n<li>Be careful with pass as references</li>\n</ol>\n<ul>\n<li>e.g.  <code>%s</code>  and  <code>sprintf</code>  can be used to create disclosure attacks</li>\n</ul>\n<ol start=\"4\">\n<li>Compiler support to match  <code>printf</code>  arguments with format string</li>\n</ol>\n<ul>\n<li>e.g. the  <code>gcc</code>  compiler provides options to check format strings</li>\n</ul>\n",
            "tags": [
                "C",
                "software security",
                "vulnerability"
            ]
        },
        {
            "id": "http://example.com/course/Integer-overflow/",
            "url": "http://example.com/course/Integer-overflow/",
            "title": "Integer overflow",
            "date_published": "2024-10-26T10:33:32.000Z",
            "content_html": "<h1 id=\"Integer overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Integer overflow\">#</a>Integer overflow</h1>\n When the result of an integer operation does not fit within the allocated memory space. All common languages are affected \n<ol>\n<li>How Does an Integer Overflow Happen?\n<ol>\n<li>无符号整数溢出：例如，一个 32 位无符号整数的范围是 0 到 4,294,967,295（即 2**32 − 1 或 0xffffffff）。如果我们执行计算 4,294,967,295 + 1，则会导致溢出，因为结果超出了无符号整数的范围</li>\n<li>有符号整数溢出</li>\n</ol>\n<ul>\n<li>符号位的溢出<br>\n当一个整数运算的结果超过有符号整数的范围时，符号位（最高位）可能会被覆盖，从而引发溢出。<br>\n有符号整数的符号位：在有符号整数中，最高位用来表示数值的正负。例如，32 位有符号整数的最高位是第 31 位（第 0 位到第 30 位是数值位）。溢出导致符号变化：如果运算结果超出正数范围，符号位会被设置为 1，这会导致数值被解释为负数。例如，在 32 位有符号整数中，+2,147,483,647 + 1 会导致数值变成 -2,147,483,648，因为符号位被改变。</li>\n<li>向下类型转换（Downcasting）和数值截断（Truncation）\n<ul>\n<li>向下类型转换：指将一个高精度的数据类型转换为低精度的数据类型。例如，将 long 类型转换为 int 时，如果原始值超过 int 的范围，可能会导致数值截断。</li>\n<li>数值截断可能导致溢出：截断发生时，较高位的数值会被忽略，只保留低位部分。这可能导致数值错误，甚至触发整数溢出。例如，如果一个 64 位的 long 类型被转换为 32 位的 int 类型，而其数值超过了 32 位整数的最大值，那么高位将被截断，只保留低 32 位，可能导致溢出或错误的计算结果。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Risks of Integer Overflow<br>\nMostly lead to program errors, but can have severe consequences</li>\n</ol>\n<ul>\n<li>Buffer overflow occurs when an integer overflow happens in calculating the length of the buffer</li>\n<li>Erroneous program behaviours in mission critical software Incorrect financial calculations</li>\n</ul>\n<h1 id=\"Real-World Examples\" class=\"active\"><a class=\"anchor\"  href=\"#Real-World Examples\">#</a>Real-World Examples</h1>\n<ol>\n<li>Integer Overflow Leads to Buffer Overflow in OpenSSH 3.3</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nresp = packet_get_int(); </span><br><span class=\"line\"> <span class=\"keyword\">if</span> (nresp &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\"> \tresponse = xmalloc(nresp * <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span> *)); </span><br><span class=\"line\"> \t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nresp; i++) </span><br><span class=\"line\"> \t\tresponse[i] = packet_get_string(<span class=\"literal\">NULL</span>); </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<p>When  <code>nresp</code>  is 1073741824 (1073741824*4=4294967296=2**32), results in an overflow</p>\n<ul>\n<li><code>xmalloc()</code>  receives and allocates a 0-byte buffer</li>\n<li>The subsequent loop causes a heap buffer overflow (当循环试图将数据写入到  <code>response</code>  时，由于  <code>response</code>  并未真正分配内存，写入操作会覆盖其他内存区域，导致程序崩溃或被攻击者利用。)</li>\n<li>fixed:  <code>if (nresp &gt; 0 &amp;&amp; nresp &lt;= SIZE_MAX / sizeof(char *))</code></li>\n</ul>\n<ol start=\"2\">\n<li>A Real-World Vulnerability in the Handling JPEG Files</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getComment</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> len, <span class=\"type\">char</span> *src)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\"> \t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> size; </span><br><span class=\"line\"> \tsize = len ‐ <span class=\"number\">2</span>; </span><br><span class=\"line\"> \t<span class=\"type\">char</span> *comment = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(size + <span class=\"number\">1</span>); </span><br><span class=\"line\"> \t<span class=\"built_in\">memcpy</span>(comment, src, size); </span><br><span class=\"line\"> \t<span class=\"keyword\">return</span>; </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li>整数下溢<br>\n在这段代码中，变量  <code>len</code>  和  <code>size</code>  被声明为无符号整数（unsigned int），这意味着它们的值不能是负数。<br>\n当  <code>len</code>  小于 2 时，计算  <code>size = len - 2</code>  会导致 整数下溢：<br>\n例如， <code>len</code>  为 1 时， <code>size</code>  将变为 0xffffffff（4294967295），即无符号整数的最大值。<br>\n下溢的原因在于无符号整数的运算特性，当减法结果为负时，会回绕（wrap around）到最大值。</li>\n<li>0 字节内存分配<br>\n在下溢的情况下，当  <code>size</code>  被设置为 0xffffffff 时，表达式  <code>size + 1</code>  变为 0。<br>\n这会导致  <code>malloc(0)</code> ，即分配一个 0 字节的缓冲区。<br>\n在许多系统中，0 字节的  <code>malloc()</code>  是合法的，它会返回一个指针，但该指针不能被写入任何数据。</li>\n<li>堆缓冲区溢出<br>\n <code>memcpy(comment, src, size)</code>  将从  <code>src</code>  复制  <code>size</code>  个字节到  <code>comment</code> ，其中  <code>size</code>  的值为 0xffffffff。<br>\n由于  <code>comment</code>  是一个 0 字节的缓冲区，这将导致 堆缓冲区溢出，可能覆盖其他堆内存区域，从而导致程序崩溃或被攻击者利用。</li>\n<li>修复</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> size = len - <span class=\"number\">2</span>;</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Example 3</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CopyStructs</span><span class=\"params\">(InputFile* pInFile, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> count)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">long</span> i;</span><br><span class=\"line\">     m_pStructs = new Structs[count]; </span><br><span class=\"line\">     <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123; </span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!ReadFromFile(pInFile, &amp;(m_pStructs[i]))) </span><br><span class=\"line\">             <span class=\"keyword\">break</span>; </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The C++’s  <code>new[]</code>  operator, it is similar to  <code>malloc(count*sizeof(Structs))</code> <br>\nAllocate a buffer smaller than we need, the attacker is able to write over the buffer</p>\n<ul>\n<li>By <strong>overflowing the multiplication operation</strong> internally</li>\n</ul>\n<ol start=\"4\">\n<li>Example 4</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_BUF 256</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BadCode</span><span class=\"params\">(<span class=\"type\">char</span> *input)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">short</span> len; </span><br><span class=\"line\">     <span class=\"type\">char</span> buf[MAX_BUF]; </span><br><span class=\"line\">     len = <span class=\"built_in\">strlen</span>(input); </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (len &lt; MAX_BUF) </span><br><span class=\"line\">         <span class=\"built_in\">strcpy</span>(buf, input); </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>strlen()</code>  返回无符号整数<br>\n <code>strlen()</code>  返回的是无符号整数类型 <code>size_t</code> ，通常是一个 32 位或 64 位无符号整数。<br>\n <code>len</code>  被定义为一个 16 位有符号短整型 <code>short</code> ，其范围是 -32,768 到 32,767。</li>\n<li>类型截断和符号翻转<br>\n当  <code>strlen(input)</code>  返回的长度超过  <code>32,767</code>  时，赋值给  <code>short len</code>  时会发生 类型截断，导致溢出。<br>\n例如，如果  <code>strlen(input)</code>  返回 40,000，那么赋值后， <code>len</code>  的值将会变成 -25,536（溢出后的值），因为  <code>short</code>  类型的最大正值只能到 32,767。<br>\n这会将一个本应是大于 256 的值变成一个负数。</li>\n<li>缓冲区溢出风险<br>\n在类型截断后， <code>len</code>  可能是负数。条件  <code>if (len &lt; MAX_BUF)</code>  将会成立，因为负数小于 256。<br>\n这意味着，即使输入字符串的实际长度超过了 256 字节， <code>strcpy(buf, input)</code>  仍会被执行，导致缓冲区溢出。</li>\n<li>修复<br>\n <code>len = strnlen(input, MAX_BUF);</code> : The  <code>strnlen()</code>  function returns an integer value capped by  <code>MAX_BUF</code></li>\n</ul>\n<h1 id=\"Integer Overflow Prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Integer Overflow Prevention\">#</a>Integer Overflow Prevention</h1>\nInteger overflow is very hard to discover and prevent\n<ol>\n<li>Runtime checks</li>\n</ol>\n<ul>\n<li>ubsan instruments binaries to be executed and checks the results of arithmetic operations</li>\n<li>Microsoft Visual C++ 2005 and later automatically catch calls to operator new that overflow</li>\n</ul>\n<ol start=\"2\">\n<li>Library support</li>\n</ol>\n<ul>\n<li>SafeInt class performs safe operations</li>\n</ul>\n<ol start=\"3\">\n<li>Static analysis tools and formal verification techniques<br>\n 在程序编译前对源代码进行分析，寻找潜在的整数溢出问题。这些工具可以检测代码中的常见整数运算错误，包括加减乘除溢出、类型转换溢出等</li>\n</ol>\n",
            "tags": [
                "C",
                "software security"
            ]
        },
        {
            "id": "http://example.com/course/Stack-buffer-overflow/",
            "url": "http://example.com/course/Stack-buffer-overflow/",
            "title": "Stack buffer overflow",
            "date_published": "2024-10-26T07:50:30.000Z",
            "content_html": "<h1 id=\"Stack buffer overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Stack buffer overflow\">#</a>Stack buffer overflow</h1>\n<ol>\n<li>The Process Stack</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>Sample Process C Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">A</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span>  </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer1[<span class=\"number\">5</span>]; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer2[<span class=\"number\">10</span>]; </span><br><span class=\"line\">    \t... </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>  </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">\tA(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(...); </span><br><span class=\"line\">   \t ... </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/26/671ca1b71cfbb.png\" alt=\"img\"></p>\n<p>在调用函数时，函数参数是按照从右到左的顺序依次压入栈中。这种参数传递方式是 x86 架构的标准做法，用于保证函数参数在栈上的正确顺序。<br>\n在这个例子中，函数  <code>A(int a, int b, int c)</code>  被调用时， <code>c</code>  首先被压入栈，然后是  <code>b</code> ，最后是  <code>a</code> 。</p>\n<ol start=\"2\">\n<li>Buffer Overflow</li>\n</ol>\n<ul>\n<li>Occurs when:<br>\nInput is unconstrained<br>\nRuns past the end of a buffer, replacing valid (control) data</li>\n<li>Technique that allows:<br>\nYour code to be executed by another program<br>\nOverflow data area to alter variable values</li>\n<li>Problem: declaration in version of login.c is  <code>char name[80], passwd[80], hash[13];</code> . Attack login procedure:\n<ol>\n<li>User types username, which is stored in name</li>\n<li>Compute hash for the corresponding password</li>\n<li>User types password, pads to 80 chars, and types hash for that password</li>\n<li>The program validates password against user-supplied hash; user is in (with any password)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Stack Smashing<br>\n 缓冲区溢出攻击的核心是覆盖栈上的 返回地址（ret）。当返回地址被覆盖时，程序在函数返回时不会跳回调用函数的位置，而是跳转到攻击者指定的位置。攻击者可以利用这种技术让程序执行任意代码（如恶意代码或 shellcode），这被称为堆栈破坏。</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>Stack Smashing</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">functionA</span><span class=\"params\">(<span class=\"type\">char</span> *str)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer[<span class=\"number\">16</span>]; </span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(buffer, str);   <span class=\"comment\">//segmentation fault</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> large_string[<span class=\"number\">256</span>]; </span><br><span class=\"line\">\t<span class=\"type\">int</span> i; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">255</span>; i++) </span><br><span class=\"line\">       &#123; </span><br><span class=\"line\">\t\tlarge_string[i] = <span class=\"string\">&#x27;A&#x27;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">\tfunctionA(large_string); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>buffer</code> ：在  <code>functionA</code>  中声明为 16 字节的字符数组。</li>\n<li><code>strcpy(buffer, str)</code> ：使用  <code>strcpy</code>  将外部传入的字符串 str 复制到 buffer 中。由于  <code>strcpy</code>  不检查长度，如果  <code>str</code>  的长度超过 16 字节，会导致缓冲区溢出。</li>\n<li>在  <code>main</code>  中， <code>large_string</code>  是一个 256 字节的数组，它被填充为 255 个 ‘A’。当  <code>large_string</code>  被传递给  <code>functionA</code>  时， <code>buffer</code>  被溢出。</li>\n<li>修复：  <code>strcpy(buffer, str)</code>  --&gt;  <code>strncpy(buffer, str, 16);</code></li>\n</ul>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/26/671ca87ccb1e2.png\" alt=\"img\"><br>\n <code>large_str</code>  has overflowed  <code>buffer</code>  and  <code>sfp</code>  and  <code>ret</code>  and  <code>*str</code> .Note that  <code>ret</code>  is the return address!<br>\nThis means we can get the function to return to any point in the code that we specify.</p>\n<ul>\n<li>Buffer overflows allow us to change return address\n<ol>\n<li>Can point to any function in the library</li>\n<li>Can point to own code</li>\n</ol>\n</li>\n<li>Add code in the overflowed buffer\n<ol>\n<li>Run at privilege of process (very useful if root!)</li>\n<li>Even a small buffer can invoke a shell using the system call (often called shellcode)</li>\n</ol>\n</li>\n<li>Attacker would like to run shell at root level\n<ol>\n<li>Make system call to  <code>execve</code> , passing  <code>/bin/sh</code></li>\n<li>Needs to be part of the buffer, and in assembly code (以便精确控制其大小和功能)</li>\n<li>Program has to fit in buffer without overwriting return address (如果 shellcode 覆盖了返回地址本身，可能导致程序崩溃而无法执行攻击代码)</li>\n<li>Pad out buffer to return address, and point return address to start of buffer</li>\n<li>Don’t generate core dump (this will cause suspicion)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>What do You Need to Hack a Buffer Overflow\n<ol>\n<li>Address where buffer begins</li>\n</ol>\n<ul>\n<li>Easy to get if you have access to the same type of system being attacked</li>\n<li>Can use Null Operation (NOP) commands to make the target address bigger</li>\n</ul>\n<ol start=\"2\">\n<li>Location where return address is stored</li>\n</ol>\n<ul>\n<li>Can pad out the buffer with return address</li>\n</ul>\n<ol start=\"3\">\n<li>Assembly language program to spawn a shell (shellcode payload)</li>\n</ol>\n<ul>\n<li>Can use gdb to disassemble a program for you</li>\n</ul>\n</li>\n<li>Affected Languages</li>\n</ol>\n<p>Buffer overflows mainly occur in low-level programming languages that allow direct memory access: Assembler, C, C++<br>\nNote that some high-level languages such as Java, C# and Visual Basic are written in C, C++ or call modules written in these languages</p>\n<ol start=\"6\">\n<li>\n<p>Buffer Overflow Examples<br>\nFunctions that handle arrays but do not check length (checking for termination character is insufficient) In C/C++,   <code>gets</code> ,  <code>strcpy</code> ,  <code>strcat</code> ,  <code>sprintf</code></p>\n<ol>\n<li>Example 1</li>\n</ol>\n</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">20</span>]; </span><br><span class=\"line\"> gets(buf);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>char buf[20]</code> ：定义了一个长度为 20 的字符数组  <code>buf</code> 。</p>\n</li>\n<li>\n<p><code>gets(buf)</code> ：使用  <code>gets()</code>  函数从标准输入读取字符串，并存储在  <code>buf</code>  中</p>\n</li>\n<li>\n<p><code>gets()</code>  函数不检查输入的长度，意味着如果输入的字符串长度超过了  <code>buf</code>  的大小（20 字节），则会发生缓冲区溢出。</p>\n</li>\n<li>\n<p>修复：  <code>fgets(buf, sizeof(buf), stdin);</code></p>\n<ol start=\"2\">\n<li>Example 2</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">20</span>]; </span><br><span class=\"line\"> <span class=\"type\">char</span> prefix[] = <span class=\"string\">&quot;http://&quot;</span>; </span><br><span class=\"line\">   ... </span><br><span class=\"line\">   <span class=\"comment\">// copies the string prefix to buf </span></span><br><span class=\"line\"> <span class=\"built_in\">strcpy</span>(buf, prefix); </span><br><span class=\"line\">   <span class=\"comment\">// concatenates path to the string buf </span></span><br><span class=\"line\"> <span class=\"built_in\">strncat</span>(buf, path, <span class=\"keyword\">sizeof</span>(buf));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>char buf[20]</code> ：定义了一个长度为 20 字节的字符数组  <code>buf</code> 。</p>\n</li>\n<li>\n<p><code>char prefix[] = &quot;http://&quot;;</code> ：定义了一个包含字符串  <code>&quot;http://&quot;</code>  的字符数组。</p>\n</li>\n<li>\n<p><code>strcpy(buf, prefix)</code> ：将字符串  <code>&quot;http://&quot;</code>  复制到  <code>buf</code>  中。</p>\n<ul>\n<li>问题： <code>&quot;http://&quot;</code>  长度为 7 字节（包括终止符 \\0），在复制后， <code>buf</code>  中只剩下 13 个字节可用。</li>\n</ul>\n</li>\n<li>\n<p><code>strncat(buf, path, sizeof(buf))</code> ：将字符串  <code>path</code>  连接到  <code>buf</code>  中，指定的最大长度为  <code>sizeof(buf)</code> （即 20 字节）。</p>\n<ul>\n<li>问题：这里的  <code>sizeof(buf)</code>  是 20 字节，但在前面已经用掉了 7 字节（包括终止符）。 <code>strncat()</code>  试图追加  <code>path</code>  的内容时，可能会超出  <code>buf</code>  的剩余空间（13 字节），导致缓冲区溢出。</li>\n</ul>\n</li>\n<li>\n<p>修复： <code>strncat(buf, path, sizeof(buf) - strlen(buf) - 1);</code></p>\n<ol start=\"3\">\n<li>Example 3</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">32</span>]; </span><br><span class=\"line\"> <span class=\"built_in\">strncpy</span>(buf, data, <span class=\"built_in\">strlen</span>(data)); </span><br></pre></td></tr></table></figure>\n<p><code>strncpy(buf, data, strlen(data))</code> ：将字符串  <code>data</code>  复制到  <code>buf</code>  中，复制的长度为  <code>strlen(data)</code> 。</p>\n<ul>\n<li>\n<p>缺陷 1：缺少终止符 \\0： <code>strncpy</code>  不会自动添加字符串的终止符  <code>\\0</code> ，如果  <code>data</code>  的长度等于或大于 32，那么  <code>buf</code>  不会以  <code>\\0</code>  结尾。这可能导致  <code>buf</code>  被当作未终止的字符串处理，带来不确定的行为或安全风险。</p>\n</li>\n<li>\n<p>缺陷 2：可能的缓冲区溢出：如果  <code>strlen(data) &gt; 32</code> ， <code>strncpy</code>  将尝试复制超过  <code>buf</code>  大小的内容，导致缓冲区溢出。</p>\n</li>\n<li>\n<p>修复： <code>strncpy(buf, data, sizeof(buf) - 1); buf[sizeof(buf) - 1] = '\\0';</code></p>\n<ol start=\"4\">\n<li>Example 4</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[MAX_PATH]; </span><br><span class=\"line\"> <span class=\"built_in\">sprintf</span>(buf, <span class=\"string\">&quot;%s - %d\\n&quot;</span>, path, errno);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>sprintf(buf, &quot;%s - %d\\n&quot;, path, errno)</code>  会将  <code>path</code>  和  <code>errno</code>  的格式化字符串复制到  <code>buf</code>  中。</li>\n<li><code>sprintf</code>  不检查  <code>buf</code>  的大小是否足以容纳格式化后的结果。如果  <code>path</code>  很长，加上数字  <code>errno</code>  和其他字符，可能会超过  <code>MAX_PATH</code> ，导致缓冲区溢出。</li>\n<li>修复：  <code>snprintf(buf, sizeof(buf), &quot;%s - %d\\n&quot;, path, errno);</code></li>\n</ul>\n<h1 id=\"Stack buffer overflow prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Stack buffer overflow prevention\">#</a>Stack buffer overflow prevention</h1>\n<ol>\n<li>Spotting Buffer Overflows</li>\n</ol>\n<ul>\n<li>Check inputs, whether read from the network, a file, or from the command line</li>\n<li>Check transfer of data from said input to internal structures</li>\n<li>Look for use of unsafe string handling calls</li>\n<li>Look for use of arithmetic to calculate an allocation size or remaining buffer size</li>\n</ul>\n<ol start=\"2\">\n<li>Fixing Buffer Overflows</li>\n</ol>\n<ul>\n<li>Replace dangerous string handling functions</li>\n<li>Replace C string buffers with C++ strings</li>\n<li>Replace static arrays with STL containers</li>\n<li>Use analysis tools, Examples include Fortify, Coverity, PREfast, and Klocwor</li>\n</ul>\n<ol start=\"3\">\n<li>Code Analysis</li>\n</ol>\n<ul>\n<li>Statically check source to detect buffer overflows s</li>\n<li>Several tools exist to automate the review process<br>\nStanford:  Engler, et al.  Test trust inconsistency<br>\n@stake.com  (<span class=\"exturl\" data-url=\"aHR0cDovL2wwcGh0LmNvbQ==\">l0pht.com</span>): SLINT (designed for UNIX)<br>\nBerkeley:  Wagner, et al.  Test constraint violations</li>\n<li>Find lots of bugs, but not all</li>\n</ul>\n<ol start=\"4\">\n<li>Marking Stack as Non-Execute<br>\nBasic stack exploit can be prevented by marking stack segment as non-executable<br>\nLimitations and Problems</li>\n</ol>\n<ul>\n<li>Some apps need executable stack (e.g. LISP interpreters)</li>\n<li>Does not block more general overflow exploits</li>\n<li>Overflow on heap: overflow buffer next to func pointer</li>\n<li>Cannot make all the data segment non-executable</li>\n<li>More recent UNIX and MS windows emit dynamic code into program data for performance optimisations</li>\n</ul>\n<ol start=\"5\">\n<li>Stack Protection and Run-time Checking<br>\nMany run-time checking techniques\n<ol>\n<li>Example:  StackGuard (WireX)</li>\n</ol>\n<ul>\n<li>Run time tests for stack integrity</li>\n<li>Code generator for emitting code to set up and tear down functions</li>\n<li>Embeds “canaries” in stack frames and verify their integrity prior to function return</li>\n</ul>\n<ol start=\"2\">\n<li>Libsafe (Avaya Labs)</li>\n</ol>\n<ul>\n<li>Dynamically loaded library</li>\n<li>Intercepts calls to  <code>strcpy (dest, src)</code>\n<ul>\n<li>Validate sufficient space in current stack frame: |framepointer–dest| &gt; strlen(src)</li>\n<li>If so, does strcpy. Otherwise, terminates application</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Address obfuscation (Stony Brook’03)</li>\n</ol>\n<ul>\n<li>Encrypt return address on stack by XORing with random string. Decrypt just before returning from function</li>\n<li>Attacker needs decryption key to set return address to desired value</li>\n</ul>\n<ol start=\"7\">\n<li>PaX ASLR: Randomise location of libc</li>\n</ol>\n<ul>\n<li>Attacker cannot jump directly to exec function</li>\n</ul>\n",
            "tags": [
                "C",
                "software security",
                "vulnerability"
            ]
        }
    ]
}