{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"tcp\" tag",
    "description": "🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/course/Layer-4-Transport-Protocols-TCP-and-UDP/",
            "url": "http://example.com/course/Layer-4-Transport-Protocols-TCP-and-UDP/",
            "title": "(Layer 4) Transport Protocols TCP and UDP",
            "date_published": "2024-11-03T08:55:45.000Z",
            "content_html": "<h1 id=\"Layer 4\" class=\"active\"><a class=\"anchor\"  href=\"#Layer 4\">#</a>Layer 4</h1>\n<ol>\n<li>\n<p>接收主机的解封装过程与连接设备<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/2e9e1d69eabb58ba.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>Role of Transport Layer</p>\n</li>\n</ol>\n<ul>\n<li>Role: to transport application-layer payloads from one application to another\n<ul>\n<li>Layer 4 establishes end-to-end connectivity</li>\n<li>Recall: Layer 3 performs end-to-end delivery of packets</li>\n</ul>\n</li>\n<li>Two main protocols:\n<ul>\n<li>Transmission Control Protocol (TCP): A connection-oriented protocol designed for reliable transfer of information</li>\n<li>User Datagram Protocol (UDP): A connectionless protocol designed for efficient communication of generally small smounts of data</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Segments and Datagrams</li>\n</ol>\n<ul>\n<li>Transport-layer protocols work with units of data called segments (TCP) or datagrams (UDP)</li>\n<li>Both TCP and UDP add a header to payload. This is known as encapsulation</li>\n<li>The Transport-layer protocol then passes the segment or datagram to the Internetwork protocol (IP)</li>\n<li>With incoming data, the Transport-layer receives the segment or datagram from the Internetwork protocol, processes it, decapsulates it and sends the resulting data up to the Application layer</li>\n</ul>\n<ol start=\"5\">\n<li>Identify Source/Destination Processes/Applications</li>\n</ol>\n<ul>\n<li>A <strong>port number</strong> is a way to identify a specific process/application to which an Internet or other network message is to be forwarded when it arrives at a server.</li>\n<li>For TCP and UDP, a port number is a 16-bit integer that is put in the header appended to a message unit.\n<ul>\n<li>TCP and UDP use port numbers to specify the source and destination Application-layer protocols</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Detect Data integrity with a Checksum mechanism</li>\n</ol>\n<ul>\n<li>To protect data integrity, TCP and UDP provide a checksum similar to a cyclic redundancy check (CRC). CRC is an error-detecting code</li>\n<li>Intermediate nodes do NOT recalculate the checksum in the Transport layer. So if data corruption occurs during transmission, the final receiving host detects the checksum error and discards the data</li>\n</ul>\n<h1 id=\"TCP (Transmission Control Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#TCP (Transmission Control Protocol)\">#</a>TCP (Transmission Control Protocol)</h1>\n<h2 id=\"TCP\" class=\"active\"><a class=\"anchor\"  href=\"#TCP\">#</a>TCP</h2>\n<ol>\n<li>Characteristics of TCP</li>\n</ol>\n<ul>\n<li>Connection-oriented\n<ol>\n<li>TCP’s handshaking processes</li>\n</ol>\n<ul>\n<li>Before data transmission: It establishes a <strong>three-way handshake</strong> process with the destination, then data is transferred</li>\n<li>After data transmission:  The connection is terminated by a <strong>four-way handshake</strong> process</li>\n</ul>\n<ol start=\"2\">\n<li>TCP offers full-duplex service</li>\n</ol>\n<ul>\n<li>Data can be carried in both directions at the same time</li>\n</ul>\n<ol start=\"3\">\n<li>TCP segment format</li>\n</ol>\n<ul>\n<li>Encapsulated by IP packet in Network layer  becomes IP packet’s “data”</li>\n</ul>\n</li>\n<li>Sequencing and checksums—TCP sends a character string called a checksum that is checked by the destination host along with a sequence number for each segment</li>\n<li>Flow control—Gauges rate of transmission based on how quickly recipient can accept data</li>\n<li>重传机制 Retry mechanism\n<ol>\n<li>确认机制：TCP 在数据传输过程中会使用 确认（ACK） 来通知发送方哪些数据包已成功到达接收方。每当接收方收到一个数据段时，它会向发送方发送一个确认消息，表示该数据段已成功接收。</li>\n<li>重传丢失的段：如果某个数据段在传输过程中丢失或损坏，接收方不会发送确认消息。TCP 会使用重传超时（retransmission timeout RTO）机制 来确保丢失的段得到重传。</li>\n<li>重传超时（RTO）机制：当 TCP 发送一个数据段时，会启动一个定时器。如果在设定的超时时间内没有收到该段的确认（ACK），则认为该数据段可能丢失，TCP 将会重传该数据段。定时器在接收到确认消息后停止，以防止不必要的重传。</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Fields of a TCP Segment<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/9f400dd05957f1a3.png\" alt=\"img\"><br>\nAn Example<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/fa75fbe787ff410b.png\" alt=\"img\"></li>\n</ol>\n<ul>\n<li>16-bit SOURCE field\n<ul>\n<li>Identifies the sending port</li>\n</ul>\n</li>\n<li>16-bit DESTINATION PORT field\n<ul>\n<li>Identifies the receiving port</li>\n</ul>\n</li>\n<li>32-bit SEQUENCE NUMBER field\n<ul>\n<li>Defines the  1st byte number of this datagram</li>\n<li>The numbering does not necessarily start from 0</li>\n</ul>\n</li>\n<li>32-bit ACKNOWLEDGEMENT NUMBER field\n<ul>\n<li>Indicates explicitly that a specific set of data received successfully</li>\n<li>Indicates the next byte expected sequence number from the other side of the communication</li>\n</ul>\n</li>\n<li>16-bit WINDOW field\n<ul>\n<li>Indicates the size of the TCP receiver buffer in bytes</li>\n</ul>\n</li>\n<li>CHECKSUM 16-bit checksum field:\n<ul>\n<li>For the integrity of the header and data</li>\n</ul>\n</li>\n<li>URGENT POINTER 16-bit field\n<ul>\n<li>It is used with the URGENT flag to point to the end of urgent data sent in a segment</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标志位</th>\n<th>说明</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>URG (U)</strong></td>\n<td>紧急指针</td>\n<td>通知接收方报文中某些数据是紧急的，需要优先处理，接收方会评估紧急指针</td>\n</tr>\n<tr>\n<td><strong>ACK (A)</strong></td>\n<td>确认</td>\n<td>表示发送该报文的设备请求确认接收，用于确认数据的接收</td>\n</tr>\n<tr>\n<td><strong>PSH §</strong></td>\n<td>推送</td>\n<td>请求立即发送数据，将缓冲区中的数据推送到接收端</td>\n</tr>\n<tr>\n<td><strong>RST ®</strong></td>\n<td>复位</td>\n<td>重置连接，用于立即终止连接</td>\n</tr>\n<tr>\n<td><strong>SYN (S)</strong></td>\n<td>同步</td>\n<td>用于初始化连接，表明正在建立新的连接</td>\n</tr>\n<tr>\n<td><strong>FIN (F)</strong></td>\n<td>结束</td>\n<td>表示发送方已经没有更多的数据要发送，表示连接的结束</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TCP Connection and Disconnection\" class=\"active\"><a class=\"anchor\"  href=\"#TCP Connection and Disconnection\">#</a>TCP Connection and Disconnection</h2>\nThree stages of a TCP connection:\n<ol>\n<li>Connection establishment with a 3-way handshake</li>\n</ol>\n<ul>\n<li>Three transmissions sent before data transmission:\n<ul>\n<li>Step 1 — (A → B) Request for a connection (SYN)</li>\n<li>Step 2 — (B → A) Response to the request (SYN/ACK)</li>\n<li>Step 3 — (A → B) Connection established (ACK)</li>\n</ul>\n</li>\n<li>After the three initial messages, the payload or data is sent</li>\n<li>Sequence numbers will be increased by the number of bits included in each received segment<br>\nThis confirms that the correct length of message was received<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/5e6910628ec58039.png\" alt=\"img\"></li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>Data transfer<br>\nReceipt of data must be acknowledged with an ACK that specifies the byte number that the receiver is expecting to receive from the sender<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/5bcef8a1b7ac03dc.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>Connection termination with a 4-way handshake</p>\n</li>\n</ol>\n<ul>\n<li>Four segments may need to be exchanged to terminate a TCP connection\n<ol>\n<li>Since a TCP connection is full-duplex, data may flow independently in each direction</li>\n<li>Each direction must be shut down independently</li>\n<li>Each half-close will require a FIN and ACK segments to be sent.<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/793afec4c1014846.png\" alt=\"img\"></li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>summary</li>\n</ol>\n<ul>\n<li>TCP provides a connection mechanism for the application program\n<ul>\n<li>The client makes a connection with the server, i.e.,\n<ul>\n<li>a virtual circuit connection is established before data is transferred</li>\n</ul>\n</li>\n<li>The client and server exchange data in both directions\n<ul>\n<li>Data is then streamed through this connection</li>\n</ul>\n</li>\n<li>Terminate the connection when the data transmission is done</li>\n</ul>\n</li>\n<li>TCP offers full-duplex service\n<ul>\n<li>Each TCP has a sending and receiving buffer and segments are sent in both direction</li>\n</ul>\n</li>\n<li>TCP provides reliable transmission via\n<ul>\n<li>Error control (checksum), flow control (sliding window protocol), and ACK/Retry mechanism (Ack to sender for received packets, timeout, retransmission)</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Process-to-Process Communications</li>\n</ol>\n<ul>\n<li>IP is for host-to-host communications</li>\n<li>TCP is for delivery of the message to the appropriate application program, i.e.,<br>\nprocess-to-process communications</li>\n<li>A computer may be running several programs at the same time\n<ul>\n<li>To make every connection unique, we need to use IP address and port number to establish a  unique identifier on a machine</li>\n<li>This is achieved through <strong>socket</strong></li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Socket Addresses – Unique Connections</li>\n</ol>\n<ul>\n<li>Every connection has 2 sockets or endpoints:\n<ul>\n<li>Source IP: Source port, \te.g., 131.181.143.129:2525</li>\n<li>Destination IP: Destination port, \te.g., 131.181.118.220: 80</li>\n</ul>\n</li>\n<li>The connection creates a unique virtual channel.<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/300ed231c5e2e1de.png\" alt=\"socket\"></li>\n</ul>\n<ol start=\"7\">\n<li>Sockets and Ports</li>\n</ol>\n<ul>\n<li>Port number range: 0 to 65535</li>\n<li>Three types\n<ol>\n<li>Well Known Ports</li>\n</ol>\n<ul>\n<li>Range: 0 to 1023</li>\n<li>Operating system or administrator use</li>\n</ul>\n<ol start=\"2\">\n<li>Registered Ports</li>\n</ol>\n<ul>\n<li>Range: 1024 to 49151</li>\n<li>Network users, processes with no special privileges</li>\n</ul>\n<ol start=\"3\">\n<li>Dynamic and/or Private Ports</li>\n</ol>\n<ul>\n<li>Range: 49152 to 65535</li>\n<li>Normally for a client use</li>\n<li>No restrictions</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Port number</th>\n<th>Process name</th>\n<th>Protocol used</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20</td>\n<td>FTP-DATA</td>\n<td>TCP</td>\n<td>File transfer—data</td>\n</tr>\n<tr>\n<td>21</td>\n<td>FTP</td>\n<td>TCP</td>\n<td>File transfer—control</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SSH</td>\n<td>TCP</td>\n<td>Secure Shell</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TELNET</td>\n<td>TCP</td>\n<td>Telnet</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SMTP</td>\n<td>TCP</td>\n<td>Simple Mail Transfer Protocol</td>\n</tr>\n<tr>\n<td>53</td>\n<td>DNS</td>\n<td>TCP and UDP</td>\n<td>Domain Name System</td>\n</tr>\n<tr>\n<td>67 (client to server) and 68 (server to client)</td>\n<td>DHCPv4</td>\n<td>UDP</td>\n<td>Dynamic Host Configuration Protocol version 4</td>\n</tr>\n<tr>\n<td>69</td>\n<td>TFTP</td>\n<td>UDP</td>\n<td>Trivial File Transfer Protocol</td>\n</tr>\n<tr>\n<td>80</td>\n<td>HTTP</td>\n<td>TCP and UDP</td>\n<td>Hypertext Transfer Protocol</td>\n</tr>\n<tr>\n<td>110</td>\n<td>POP3</td>\n<td>TCP</td>\n<td>Post Office Protocol 3</td>\n</tr>\n<tr>\n<td>123</td>\n<td>NTP</td>\n<td>TCP</td>\n<td>Network Time Protocol</td>\n</tr>\n<tr>\n<td>143</td>\n<td>IMAP</td>\n<td>TCP</td>\n<td>Internet Message Access Protocol</td>\n</tr>\n<tr>\n<td>443</td>\n<td>HTTPS</td>\n<td>TCP</td>\n<td>Secure implementation of HTTP</td>\n</tr>\n<tr>\n<td>546 (client to server) and 547 (server to client)</td>\n<td>DHCPv6</td>\n<td>UDP</td>\n<td>Dynamic Host Configuration Protocol version 6</td>\n</tr>\n<tr>\n<td>3389</td>\n<td>RDP</td>\n<td>TCP</td>\n<td>Remote Desktop Protocol</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"UDP (User Datagram Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#UDP (User Datagram Protocol)\">#</a>UDP (User Datagram Protocol)</h1>\n<ol>\n<li>UDP and its Features</li>\n</ol>\n<ul>\n<li>UDP is a Transport layer protocol</li>\n<li>It provides unreliable data delivery services\n<ul>\n<li>Connectionless transport service\n<ul>\n<li>No guarantee packets received at all</li>\n</ul>\n</li>\n<li>No error checking, no sequencing, no flow control\n<ul>\n<li>No assurance packets received correctly and in correct sequence</li>\n<li>Lower overhead than TCP</li>\n</ul>\n</li>\n<li>Lacks sophistication = simple\n<ul>\n<li>More efficient than TCP</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Useful situations\n<ul>\n<li>Great volume of data transferred quickly, e.g., video streaming</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Format of UDP Messages</li>\n</ol>\n<ul>\n<li>Each UDP message is called a <strong>user datagram</strong></li>\n<li>Has a fixed size header of 8 bytes</li>\n<li>16 bit SOURCE / DESTINATION PORT fields\n<ul>\n<li>Port number (between 0 and 65535)\n<ul>\n<li>Well-known ports 0 ~1023</li>\n<li>Client host’s operating system may randomly choose a port  to communicate with a server</li>\n</ul>\n</li>\n<li>Checksum is optional for IPv4, but mandatory for IPv6<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/eaa62641752a90e7.png\" alt=\"UDPheader\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Use</li>\n</ol>\n<ul>\n<li>UDP is used while error checking and correction are performed by the application, such as\n<ul>\n<li>Domain Name System (DNS)</li>\n<li>Dynamic Host Configuration Protocol (DHCP)</li>\n<li>Trivial File Transfer Protocol (TFTP)</li>\n<li>IPTV</li>\n<li>Voice over IP (VoIP)</li>\n<li>Real Time Streaming Protocol</li>\n<li>Routing Information Protocol (RIP)</li>\n<li>Simple Network Management Protocol (SNMP)</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "network system",
                "TCP",
                "UDP"
            ]
        }
    ]
}