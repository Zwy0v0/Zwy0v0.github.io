{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"javascript\" tag",
    "description": "🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/study/js%E7%BB%A7%E6%89%BF/",
            "url": "http://example.com/study/js%E7%BB%A7%E6%89%BF/",
            "title": "js继承",
            "date_published": "2024-10-23T13:25:27.000Z",
            "content_html": "<h1 id=\"ES5\" class=\"active\"><a class=\"anchor\"  href=\"#ES5\">#</a> ES5</h1>\n<h2 id=\"ES5 原型链继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 原型链继承\">#</a> ES5 原型链继承</h2>\n<ol>\n<li>将父类的实例作为子类的原型实现继承</li>\n<li>这种继承方法的缺点是父类中的引用类型数据会被所有子类共享</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Son</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>(<span class=\"string\">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 构造函数继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 构造函数继承\">#</a> ES5 构造函数继承</h2>\n<ol>\n<li>在子类的构造函数中通过 <code>call</code>  或者 <code>apply</code>  调用父类的构造函数</li>\n<li>这种继承方法的缺点是：子类没法使用父类原型上的属性 / 方法</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 组合继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 组合继承\">#</a> ES5 组合继承</h2>\n<ol>\n<li>组合继承结合上面 2 种方法的优点:\n<ol>\n<li>通过原型链继承公共的属性和方法</li>\n<li>通过构造函数继承实例独有的属性和方法</li>\n</ol>\n</li>\n<li>组合继承的特点：调用 2 次父类的构造函数，浪费性能</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用父类构造函数传入this</span></span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">  <span class=\"comment\">// 子类独有的属性和方法单独设置</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置子类的原型为 父类实例</span></span><br><span class=\"line\"><span class=\"title class_\">Son</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 原型式继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 原型式继承\">#</a> ES5 原型式继承</h2>\n<ol>\n<li>直接基于对象实现继承，对某个对象进行浅拷贝，可以通过内置 api <code>Object.create</code>  实现，不需要调用构造函数即可实现继承，主要针对于继承对象的情况</li>\n<li>原型式继承的缺点是：父类中的引用数据类型，会被所有子类共享</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2NyZWF0ZQ==\">参考链接</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以用 Object.create替代</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Fun</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Fun</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = obj</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Fun</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> parent = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;parent&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">  <span class=\"attr\">friend</span>: [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>],</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"title function_\">objectFactory</span>(parent)</span><br><span class=\"line\"><span class=\"comment\">//const son1 = Object.create(parent)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> son2 = <span class=\"title function_\">objectFactory</span>(parent)</span><br><span class=\"line\">son1.<span class=\"property\">friend</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;Gin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(son2.<span class=\"property\">friend</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 寄生式继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 寄生式继承\">#</a> ES5 寄生式继承</h2>\n<ol>\n<li>寄生式继承的核心步骤是：基于对象创建新对象 (可以使用 <code>Object.create</code> ), 并且为新创建的对象增加新的属性和方法，通过定义工厂函数，并在内部:\n<ol>\n<li>对传入的对象进行浅拷贝 (公共属性 / 方法)</li>\n<li>为浅拷贝对象增加属性 / 方法 (独有属性 / 方法)</li>\n</ol>\n</li>\n<li>寄生式继承和原型式继承的区别是：创建出来的新对象，会额外的增加新的<strong>属性 / 方法</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createAnother</span>(<span class=\"params\">origin</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Object.create基于原型创建新对象，对属性进行浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> clone = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(origin)</span><br><span class=\"line\">  <span class=\"comment\">// 为对象增加属性/方法</span></span><br><span class=\"line\">  clone.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> parent = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;parent&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">friend</span>: [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"title function_\">createAnother</span>(parent)</span><br><span class=\"line\"><span class=\"keyword\">const</span> son2 = <span class=\"title function_\">createAnother</span>(parent)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 寄生组合式继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 寄生组合式继承\">#</a> ES5 寄生组合式继承</h2>\n<ol>\n<li>通过构造函数来继承属性，通过原型链来继承方法</li>\n<li>寄生组合式继承和组合式继承的区别是：原型链的继承并没有调用父类的构造函数，而是直接基于父类的原型创建一个新副本实现继承</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承原型函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inheritPrototype</span>(<span class=\"params\">son, parent</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prototype = object.<span class=\"title function_\">create</span>(parent.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">    prototype.<span class=\"property\">constructor</span> = son</span><br><span class=\"line\">    son.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = prototype</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;ss&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>, <span class=\"string\">`My friends are,<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.friends&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类借用父类的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 完成原型继承</span></span><br><span class=\"line\"><span class=\"title function_\">inheritPrototype</span>(<span class=\"title class_\">Son</span>,<span class=\"title class_\">Parent</span>)</span><br><span class=\"line\"><span class=\"comment\">// 可以继续在原型上添加属性/方法</span></span><br><span class=\"line\"><span class=\"title class_\">Son</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayAge</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我的年龄是&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> son2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;hh&#x27;</span>, <span class=\"number\">19</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"ES6\" class=\"active\"><a class=\"anchor\"  href=\"#ES6\">#</a> ES6</h1>\n<h2 id=\"class核心语法\" class=\"active\"><a class=\"anchor\"  href=\"#class核心语法\">#</a> class核心语法</h2>\n<ol>\n<li>通过 <code>class 类名&#123;&#125;</code>  的形式来定义类</li>\n<li>内部直接写实例属性，可以设置默认值，</li>\n<li>实例方法的添加方式为 <code>方法名()&#123;&#125;</code></li>\n<li>构造函数通过 <code>constructor</code>  进行添加</li>\n<li>通过 <code>new 类名()</code>  创建实例，会调用构造函数 <code>constructor</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9jbGFzcw==\">参考链接</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>&#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    friends = [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;ss&#x27;</span>]</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好,我叫:&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"class实现继承\" class=\"active\"><a class=\"anchor\"  href=\"#class实现继承\">#</a> class实现继承</h2>\n<ol>\n<li>子类通过 <code>extends</code>  继承继承父类</li>\n<li>子类如果需要重新定义构造函数，必须在内部通过 <code>super</code>  关键字调用父类的构造函数</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL3N1cGVy\">参考链接</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Parent</span> &#123;</span><br><span class=\"line\">  age</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 子类构造函数使用this以前必须调用super</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">  <span class=\"title function_\">sayHey</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我叫<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>,我今年<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.age&#125;</span>岁`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;yy&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\">s.<span class=\"title function_\">sayHi</span>()</span><br><span class=\"line\">s.<span class=\"title function_\">sayHey</span>()</span><br></pre></td></tr></table></figure>\n<h2 id=\"class私有,静态属性和方法\" class=\"active\"><a class=\"anchor\"  href=\"#class私有,静态属性和方法\">#</a> class私有,静态属性和方法</h2>\n<ol>\n<li>\n<p>class 中私有属性 / 方法</p>\n<ol>\n<li><strong>定义和使用时</strong>需要使用关键字 <code>#</code></li>\n<li>私有属性只能在类的内部使用，外部无法使用 (代码中)</li>\n<li><strong>Chrome</strong> 的控制台中为了方便调试，可以直接访问</li>\n</ol>\n</li>\n<li>\n<p>class 中静态属性 / 方法</p>\n<ol>\n<li><strong>定义和使用时</strong>需要使用关键字 <code>static</code></li>\n<li>通过类访问</li>\n<li>静态方法中的 <code>this</code>  是类本身</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/study/JS%E4%B8%AD%E7%9A%84this%E4%B8%8E%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/",
            "url": "http://example.com/study/JS%E4%B8%AD%E7%9A%84this%E4%B8%8E%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/",
            "title": "JS中的this与相关函数",
            "date_published": "2024-10-23T12:16:26.000Z",
            "content_html": "<h1 id=\"this指向\" class=\"active\"><a class=\"anchor\"  href=\"#this指向\">#</a> this指向</h1>\n在非严格模式下，总是指向一个对象，在严格模式下可以是任意值，开启严格模式可以使用如下两种方式:\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为整个脚本开启严格模式</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span></span><br><span class=\"line\">unction <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为函数开启严格模式</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;use strict&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n然后就可以根据不同的模式来确认this指向啦，\n<ol>\n<li>\n<p>全局执行环境中，指向全局对象 (非严格模式、严格模式)</p>\n</li>\n<li>\n<p>函数内部，取决于函数被调用的方式</p>\n<ol>\n<li>\n<p>直接调用的 this 值:</p>\n<ol>\n<li>非严格模式：全局对象 (window)</li>\n<li>严格模式:undefined</li>\n</ol>\n</li>\n<li>\n<p>对象方法调用的 this 值:<br>\n 调用者</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"如何改变this指向\" class=\"active\"><a class=\"anchor\"  href=\"#如何改变this指向\">#</a> 如何改变this指向</h1>\n<ol>\n<li>\n<p>调用函数并传入具体的 <code>this</code> :</p>\n<ol>\n<li>\n<p><code>call</code> :</p>\n<ol>\n<li>参数 1: <code>this</code></li>\n<li>参数 2: 传递给函数的参数</li>\n</ol>\n</li>\n<li>\n<p><code>apply</code> : 数组作为参数</p>\n<ol>\n<li>参数 1: <code>this</code></li>\n<li>参数 2: 以数组的形式，传递给函数的参数</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>创建绑定 <code>this</code>  的函数:</p>\n<ol>\n<li>bind: 返回一个绑定了 <code>this</code>  的新函数</li>\n<li>箭头函数：就近向父级找 <code>this</code></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"手搓call apply bind\" class=\"active\"><a class=\"anchor\"  href=\"#手搓call apply bind\">#</a> 手搓call apply bind</h1>\n  <h2 id=\"手搓call\" class=\"active\"><a class=\"anchor\"  href=\"#手搓call\">#</a> 手搓call</h2>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vY2FsbA==\">参考链接</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手写myCall 任何函数都能调用所以写到构造函数的原型上</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//使用Symobl产生绝对唯一属性 防止传入对象中含有与新增属性重名的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> z = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//this指的是调用myCall的函数 thisArg为传入的需要设置为this的对象</span></span><br><span class=\"line\">  thisArg[z] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"comment\">//args为传入调用myCall的函数的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = thisArg[z](...args)</span><br><span class=\"line\">  <span class=\"comment\">//删掉传入对象新增属性z</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg[z]</span><br><span class=\"line\">  <span class=\"comment\">//返回myCall调用者的结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"手搓apply\" class=\"active\"><a class=\"anchor\"  href=\"#手搓apply\">#</a> 手搓apply</h2>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYXBwbHk=\">参考链接</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手写myApply</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisAry, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//与myCall唯一的不同就是传入的args参数为数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> w = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">  thisAry[w] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = thisAry[w](...args)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisAry[w]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"手搓bind\" class=\"active\"><a class=\"anchor\"  href=\"#手搓bind\">#</a> 手搓bind</h2>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZA==\">参考链接</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//this是调用myBind的原函数 要把thisArg设置为新函数的this</span></span><br><span class=\"line\">  <span class=\"comment\">//...args是需要绑定的参数 ...reArgs是新函数需要传入的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...reArgs</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">call</span>(thisArg, ...args, ...reArgs)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "JavaScript"
            ]
        }
    ]
}