{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"vulnerability\" tag",
    "description": "🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/course/Format-string-bugs/",
            "url": "http://example.com/course/Format-string-bugs/",
            "title": "Format string bugs",
            "date_published": "2024-10-26T11:52:22.000Z",
            "content_html": "<h1 id=\"Format Functions\" class=\"active\"><a class=\"anchor\"  href=\"#Format Functions\">#</a>Format Functions</h1>\n<ol>\n<li>Format Functions</li>\n</ol>\n<ul>\n<li><code>printf</code>  Output a formatted string</li>\n<li><code>fprintf</code>  Writes the printf to a file</li>\n<li><code>sprintf</code>  Prints into a string</li>\n<li><code>snprintf</code>  Prints into a string checking the length</li>\n<li><code>vprintf</code>  Prints the argument list to stdout</li>\n<li><code>vfprintf</code>  Prints the argument list to a file</li>\n<li><code>vsprintf</code>  Prints the argument list to a string</li>\n<li><code>vsnprintf</code>  Prints the argument to a string checking the length<br>\n 总结： <code>printf</code>  和  <code>fprintf</code>  用于输出格式化字符串到标准输出或文件。<br>\n <code>sprintf</code>  和  <code>snprintf</code>  用于将格式化字符串写入字符串缓冲区， <code>snprintf</code>  更安全。<br>\n <code>vprintf</code> 、 <code>vfprintf</code> 、 <code>vsprintf</code>  和  <code>vsnprintf</code>  用于处理可变参数列表，与前面的函数类似，但专门用于  <code>va_list</code>  参数的处理。</li>\n</ul>\n<ol start=\"2\">\n<li>Format Strings</li>\n</ol>\n<ul>\n<li>Format String is the argument of format functions that contains format parameters. Format parameters are placeholders to be replaced with user inputs</li>\n<li>For example, the statement will output different sentences, depending on what is contained in the variable name:  <code>printf(&quot;Hello, %s.&quot;, &amp;name);</code></li>\n<li>If the variable name contains the string “Zz”, then  <code>printf()</code>  will output: Hello, Zz.</li>\n</ul>\n<ol start=\"3\">\n<li>Common Parameters Used in Format String Attacks</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>传递方式</th>\n<th>在攻击中的作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%s</td>\n<td>打印字符串</td>\n<td>引用（指向字符串的指针）</td>\n<td>攻击者可以利用 % s 打印出内存中的任意数据，通过提供特定的内存地址，读取敏感数据（如密码、密钥等）。</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>打印有符号十进制整数</td>\n<td>整数值</td>\n<td>虽然 % d 通常用于整数显示，但攻击者可以通过它来泄露内存中的整数值。</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>打印无符号十进制整数</td>\n<td>无符号整数值</td>\n<td>与 % d 类似，但用于无符号整数的显示。</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>打印十六进制整数（小写）</td>\n<td>无符号整数值</td>\n<td>攻击者可以通过 % x 逐步读取内存，以十六进制显示地址中的数据内容。</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>打印单个字符</td>\n<td>字符值</td>\n<td>用于显示单个字符，但在攻击中用途有限。</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>将已打印的字符数写入指定变量</td>\n<td>引用（指向整数的指针）</td>\n<td>攻击者可以利用 % n 修改任意内存地址的值，这是格式字符串攻击中最危险的参数之一，可能被用来修改程序的控制流。</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>打印 % 字符</td>\n<td>无</td>\n<td>用于输出 % 字符，无特别的攻击价值。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>How Do Format Functions Work?<br>\nAccording to the data format dictated by the format parameters, format functions retrieve the arguments from the stack</li>\n</ol>\n<ul>\n<li>printf(“A is the number %d, B is the string %s”, A, &amp;B);<br>\nThe  <code>printf()</code>  function will attempt to retrieve the value of A and the address of string B from the stack<br>\n 在格式化字符串中，每个格式参数（如  <code>%d</code> 、 <code>%s</code> ）都告诉  <code>printf()</code>  如何解释栈中的数据： <code>%d</code>  表示检索一个 整数值。 <code>%s</code>  表示检索一个 字符串指针（地址），然后根据地址打印对应的字符串。</li>\n</ul>\n<h1 id=\"Exploit\" class=\"active\"><a class=\"anchor\"  href=\"#Exploit\">#</a>Exploit</h1>\nThe vulnerability occurs when there is a mismatch between the number of format parameters and the number of function arguments provided to fill those places \n- For example, if an attacker is able to supply more placeholders than there are arguments, he/she can use format functions to read or write the stack! \nFormat functions can be exploited when an attacker is given direct control over the format string fed into the function\n<ol>\n<li>Reading Data from Stack</li>\n</ol>\n<ul>\n<li>printf(&quot;A is the number  <code>%d</code> , reading stack data:  <code>%x</code> &quot;, A);\n<ul>\n<li><code>printf()</code>  will attempt to retrieve two values from the stack</li>\n<li>But only one of those is placed on the stack</li>\n<li><code>printf()</code>  will retrieve the next value on the stack and display it in hex format!</li>\n</ul>\n</li>\n<li>To print the next 20 items on the stack:\n<ul>\n<li>printf(&quot;%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x&quot;);</li>\n</ul>\n</li>\n<li>To print the tenth element next on the stack:\n<ul>\n<li>printf(&quot;%10$x&quot;);</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Reading Data at Arbitrary Location  <code>%s</code></li>\n</ol>\n<ul>\n<li>Format functions treat the data on the stack as an address to go fetch a string\n<ul>\n<li>Note that  <code>%s</code>  is passed as reference!</li>\n</ul>\n</li>\n<li>How to control the address accessed by  <code>%s</code> ?\n<ul>\n<li>Place an address on the format string (the string is stored on stack)</li>\n<li>Get  <code>%s</code>  to dereference it!</li>\n</ul>\n</li>\n<li>To print the string located at address 0x12345678:\n<ul>\n<li>printf(&quot;\\x78\\x56\\x34\\x12%x%x%x%s&quot;, A, B, C);</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Writing Data at Arbitrary Location  <code>%n</code></li>\n</ol>\n<ul>\n<li><code>%n</code>  stores the number of characters written so far into the corresponding function argument! For example, the following code put the integer 5 into the variable  <code>num_char</code></li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num_char; </span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;11111%n&quot;</span>, &amp;num_char); </span><br></pre></td></tr></table></figure>\n<p>With width-controlling format parameters, the attacker can write arbitrary integers to the location pointed to by the function argument</p>\n<ul>\n<li>Write 10 to num_char using width-controlling format parameter</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num_char; </span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%10d%n&quot;</span>, <span class=\"number\">0</span>, &amp;num_char);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Control the amount of data written with length parameter\n<ul>\n<li><code>printf(&quot;%10d%hn&quot;, 0, &amp;num_char);</code></li>\n<li>Writes 2 bytes (instead of 4 bytes) to  <code>&amp;num_char</code></li>\n</ul>\n</li>\n<li>Combined with the trick to access arbitrary memory locations, the attacker can write to arbitrary memory locations</li>\n</ul>\n<ol start=\"4\">\n<li>Example</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">char</span> buf[<span class=\"number\">512</span>]; </span><br><span class=\"line\">     fgets(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"built_in\">stdin</span>); <span class=\"comment\">// 安全读取输入，不会导致缓冲区溢出</span></span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The input is:&quot;</span>); </span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(buf);  <span class=\"comment\">// 存在格式化字符串漏洞</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>printf(buf);</code>  直接使用了用户输入的内容作为格式化字符串。如果  <code>buf</code>  中包含格式化占位符（如  <code>%s</code> 、 <code>%x</code> 、 <code>%n</code>  等）， <code>printf()</code>  会将其解释为格式化指令，从而造成安全隐患。</li>\n<li>修复：  <code>printf(&quot;The input is: %s&quot;, buf);</code> ：% s 确保输入内容被当作普通字符串处理，而不是格式化字符串</li>\n</ul>\n<h1 id=\"Denial of Service Attacks\" class=\"active\"><a class=\"anchor\"  href=\"#Denial of Service Attacks\">#</a>Denial of Service Attacks</h1>\n<ul>\n<li>\n<p>Crash the program by attempting to access an invalid address</p>\n<ul>\n<li>Use  <code>%s</code>  to retrieve a value from the stack till encountering an invalid memory location</li>\n</ul>\n</li>\n<li>\n<p>The exploit string would look something like this</p>\n<ul>\n<li>·printf(&quot;%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s&quot;);·</li>\n</ul>\n</li>\n<li>\n<p>The more %s used in the format string, the higher the chance of an invalid address</p>\n</li>\n</ul>\n<h1 id=\"Format String Attacks Prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Format String Attacks Prevention\">#</a>Format String Attacks Prevention</h1>\n<ol>\n<li>Hard-coded format strings (e.g. no  <code>printf(arg)</code> )</li>\n<li>Do not use the fancy  <code>%n</code></li>\n<li>Be careful with pass as references</li>\n</ol>\n<ul>\n<li>e.g.  <code>%s</code>  and  <code>sprintf</code>  can be used to create disclosure attacks</li>\n</ul>\n<ol start=\"4\">\n<li>Compiler support to match  <code>printf</code>  arguments with format string</li>\n</ol>\n<ul>\n<li>e.g. the  <code>gcc</code>  compiler provides options to check format strings</li>\n</ul>\n",
            "tags": [
                "software security",
                "C",
                "vulnerability"
            ]
        },
        {
            "id": "http://example.com/course/Stack-buffer-overflow/",
            "url": "http://example.com/course/Stack-buffer-overflow/",
            "title": "Stack buffer overflow",
            "date_published": "2024-10-26T07:50:30.000Z",
            "content_html": "<h1 id=\"Stack buffer overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Stack buffer overflow\">#</a>Stack buffer overflow</h1>\n<ol>\n<li>The Process Stack</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>Sample Process C Code</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">A</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span>  </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer1[<span class=\"number\">5</span>]; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer2[<span class=\"number\">10</span>]; </span><br><span class=\"line\">    \t... </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>  </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">\tA(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(...); </span><br><span class=\"line\">   \t ... </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/26/671ca1b71cfbb.png\" alt=\"img\"></p>\n<p>在调用函数时，函数参数是按照从右到左的顺序依次压入栈中。这种参数传递方式是 x86 架构的标准做法，用于保证函数参数在栈上的正确顺序。<br>\n在这个例子中，函数  <code>A(int a, int b, int c)</code>  被调用时， <code>c</code>  首先被压入栈，然后是  <code>b</code> ，最后是  <code>a</code> 。</p>\n<ol start=\"2\">\n<li>Buffer Overflow</li>\n</ol>\n<ul>\n<li>Occurs when:<br>\nInput is unconstrained<br>\nRuns past the end of a buffer, replacing valid (control) data</li>\n<li>Technique that allows:<br>\nYour code to be executed by another program<br>\nOverflow data area to alter variable values</li>\n<li>Problem: declaration in version of login.c is  <code>char name[80], passwd[80], hash[13];</code> . Attack login procedure:\n<ol>\n<li>User types username, which is stored in name</li>\n<li>Compute hash for the corresponding password</li>\n<li>User types password, pads to 80 chars, and types hash for that password</li>\n<li>The program validates password against user-supplied hash; user is in (with any password)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Stack Smashing<br>\n 缓冲区溢出攻击的核心是覆盖栈上的 返回地址（ret）。当返回地址被覆盖时，程序在函数返回时不会跳回调用函数的位置，而是跳转到攻击者指定的位置。攻击者可以利用这种技术让程序执行任意代码（如恶意代码或 shellcode），这被称为堆栈破坏。</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>Stack Smashing</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">functionA</span><span class=\"params\">(<span class=\"type\">char</span> *str)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer[<span class=\"number\">16</span>]; </span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(buffer, str);   <span class=\"comment\">//segmentation fault</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> large_string[<span class=\"number\">256</span>]; </span><br><span class=\"line\">\t<span class=\"type\">int</span> i; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">255</span>; i++) </span><br><span class=\"line\">       &#123; </span><br><span class=\"line\">\t\tlarge_string[i] = <span class=\"string\">&#x27;A&#x27;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">\tfunctionA(large_string); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>buffer</code> ：在  <code>functionA</code>  中声明为 16 字节的字符数组。</li>\n<li><code>strcpy(buffer, str)</code> ：使用  <code>strcpy</code>  将外部传入的字符串 str 复制到 buffer 中。由于  <code>strcpy</code>  不检查长度，如果  <code>str</code>  的长度超过 16 字节，会导致缓冲区溢出。</li>\n<li>在  <code>main</code>  中， <code>large_string</code>  是一个 256 字节的数组，它被填充为 255 个 ‘A’。当  <code>large_string</code>  被传递给  <code>functionA</code>  时， <code>buffer</code>  被溢出。</li>\n<li>修复：  <code>strcpy(buffer, str)</code>  --&gt;  <code>strncpy(buffer, str, 16);</code></li>\n</ul>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/26/671ca87ccb1e2.png\" alt=\"img\"><br>\n <code>large_str</code>  has overflowed  <code>buffer</code>  and  <code>sfp</code>  and  <code>ret</code>  and  <code>*str</code> .Note that  <code>ret</code>  is the return address!<br>\nThis means we can get the function to return to any point in the code that we specify.</p>\n<ul>\n<li>Buffer overflows allow us to change return address\n<ol>\n<li>Can point to any function in the library</li>\n<li>Can point to own code</li>\n</ol>\n</li>\n<li>Add code in the overflowed buffer\n<ol>\n<li>Run at privilege of process (very useful if root!)</li>\n<li>Even a small buffer can invoke a shell using the system call (often called shellcode)</li>\n</ol>\n</li>\n<li>Attacker would like to run shell at root level\n<ol>\n<li>Make system call to  <code>execve</code> , passing  <code>/bin/sh</code></li>\n<li>Needs to be part of the buffer, and in assembly code (以便精确控制其大小和功能)</li>\n<li>Program has to fit in buffer without overwriting return address (如果 shellcode 覆盖了返回地址本身，可能导致程序崩溃而无法执行攻击代码)</li>\n<li>Pad out buffer to return address, and point return address to start of buffer</li>\n<li>Don’t generate core dump (this will cause suspicion)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>What do You Need to Hack a Buffer Overflow\n<ol>\n<li>Address where buffer begins</li>\n</ol>\n<ul>\n<li>Easy to get if you have access to the same type of system being attacked</li>\n<li>Can use Null Operation (NOP) commands to make the target address bigger</li>\n</ul>\n<ol start=\"2\">\n<li>Location where return address is stored</li>\n</ol>\n<ul>\n<li>Can pad out the buffer with return address</li>\n</ul>\n<ol start=\"3\">\n<li>Assembly language program to spawn a shell (shellcode payload)</li>\n</ol>\n<ul>\n<li>Can use gdb to disassemble a program for you</li>\n</ul>\n</li>\n<li>Affected Languages</li>\n</ol>\n<p>Buffer overflows mainly occur in low-level programming languages that allow direct memory access: Assembler, C, C++<br>\nNote that some high-level languages such as Java, C# and Visual Basic are written in C, C++ or call modules written in these languages</p>\n<ol start=\"6\">\n<li>\n<p>Buffer Overflow Examples<br>\nFunctions that handle arrays but do not check length (checking for termination character is insufficient) In C/C++,   <code>gets</code> ,  <code>strcpy</code> ,  <code>strcat</code> ,  <code>sprintf</code></p>\n<ol>\n<li>Example 1</li>\n</ol>\n</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">20</span>]; </span><br><span class=\"line\"> gets(buf);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>char buf[20]</code> ：定义了一个长度为 20 的字符数组  <code>buf</code> 。</p>\n</li>\n<li>\n<p><code>gets(buf)</code> ：使用  <code>gets()</code>  函数从标准输入读取字符串，并存储在  <code>buf</code>  中</p>\n</li>\n<li>\n<p><code>gets()</code>  函数不检查输入的长度，意味着如果输入的字符串长度超过了  <code>buf</code>  的大小（20 字节），则会发生缓冲区溢出。</p>\n</li>\n<li>\n<p>修复：  <code>fgets(buf, sizeof(buf), stdin);</code></p>\n<ol start=\"2\">\n<li>Example 2</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">20</span>]; </span><br><span class=\"line\"> <span class=\"type\">char</span> prefix[] = <span class=\"string\">&quot;http://&quot;</span>; </span><br><span class=\"line\">   ... </span><br><span class=\"line\">   <span class=\"comment\">// copies the string prefix to buf </span></span><br><span class=\"line\"> <span class=\"built_in\">strcpy</span>(buf, prefix); </span><br><span class=\"line\">   <span class=\"comment\">// concatenates path to the string buf </span></span><br><span class=\"line\"> <span class=\"built_in\">strncat</span>(buf, path, <span class=\"keyword\">sizeof</span>(buf));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>char buf[20]</code> ：定义了一个长度为 20 字节的字符数组  <code>buf</code> 。</p>\n</li>\n<li>\n<p><code>char prefix[] = &quot;http://&quot;;</code> ：定义了一个包含字符串  <code>&quot;http://&quot;</code>  的字符数组。</p>\n</li>\n<li>\n<p><code>strcpy(buf, prefix)</code> ：将字符串  <code>&quot;http://&quot;</code>  复制到  <code>buf</code>  中。</p>\n<ul>\n<li>问题： <code>&quot;http://&quot;</code>  长度为 7 字节（包括终止符 \\0），在复制后， <code>buf</code>  中只剩下 13 个字节可用。</li>\n</ul>\n</li>\n<li>\n<p><code>strncat(buf, path, sizeof(buf))</code> ：将字符串  <code>path</code>  连接到  <code>buf</code>  中，指定的最大长度为  <code>sizeof(buf)</code> （即 20 字节）。</p>\n<ul>\n<li>问题：这里的  <code>sizeof(buf)</code>  是 20 字节，但在前面已经用掉了 7 字节（包括终止符）。 <code>strncat()</code>  试图追加  <code>path</code>  的内容时，可能会超出  <code>buf</code>  的剩余空间（13 字节），导致缓冲区溢出。</li>\n</ul>\n</li>\n<li>\n<p>修复： <code>strncat(buf, path, sizeof(buf) - strlen(buf) - 1);</code></p>\n<ol start=\"3\">\n<li>Example 3</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">32</span>]; </span><br><span class=\"line\"> <span class=\"built_in\">strncpy</span>(buf, data, <span class=\"built_in\">strlen</span>(data)); </span><br></pre></td></tr></table></figure>\n<p><code>strncpy(buf, data, strlen(data))</code> ：将字符串  <code>data</code>  复制到  <code>buf</code>  中，复制的长度为  <code>strlen(data)</code> 。</p>\n<ul>\n<li>\n<p>缺陷 1：缺少终止符 \\0： <code>strncpy</code>  不会自动添加字符串的终止符  <code>\\0</code> ，如果  <code>data</code>  的长度等于或大于 32，那么  <code>buf</code>  不会以  <code>\\0</code>  结尾。这可能导致  <code>buf</code>  被当作未终止的字符串处理，带来不确定的行为或安全风险。</p>\n</li>\n<li>\n<p>缺陷 2：可能的缓冲区溢出：如果  <code>strlen(data) &gt; 32</code> ， <code>strncpy</code>  将尝试复制超过  <code>buf</code>  大小的内容，导致缓冲区溢出。</p>\n</li>\n<li>\n<p>修复： <code>strncpy(buf, data, sizeof(buf) - 1); buf[sizeof(buf) - 1] = '\\0';</code></p>\n<ol start=\"4\">\n<li>Example 4</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[MAX_PATH]; </span><br><span class=\"line\"> <span class=\"built_in\">sprintf</span>(buf, <span class=\"string\">&quot;%s - %d\\n&quot;</span>, path, errno);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>sprintf(buf, &quot;%s - %d\\n&quot;, path, errno)</code>  会将  <code>path</code>  和  <code>errno</code>  的格式化字符串复制到  <code>buf</code>  中。</li>\n<li><code>sprintf</code>  不检查  <code>buf</code>  的大小是否足以容纳格式化后的结果。如果  <code>path</code>  很长，加上数字  <code>errno</code>  和其他字符，可能会超过  <code>MAX_PATH</code> ，导致缓冲区溢出。</li>\n<li>修复：  <code>snprintf(buf, sizeof(buf), &quot;%s - %d\\n&quot;, path, errno);</code></li>\n</ul>\n<h1 id=\"Stack buffer overflow prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Stack buffer overflow prevention\">#</a>Stack buffer overflow prevention</h1>\n<ol>\n<li>Spotting Buffer Overflows</li>\n</ol>\n<ul>\n<li>Check inputs, whether read from the network, a file, or from the command line</li>\n<li>Check transfer of data from said input to internal structures</li>\n<li>Look for use of unsafe string handling calls</li>\n<li>Look for use of arithmetic to calculate an allocation size or remaining buffer size</li>\n</ul>\n<ol start=\"2\">\n<li>Fixing Buffer Overflows</li>\n</ol>\n<ul>\n<li>Replace dangerous string handling functions</li>\n<li>Replace C string buffers with C++ strings</li>\n<li>Replace static arrays with STL containers</li>\n<li>Use analysis tools, Examples include Fortify, Coverity, PREfast, and Klocwor</li>\n</ul>\n<ol start=\"3\">\n<li>Code Analysis</li>\n</ol>\n<ul>\n<li>Statically check source to detect buffer overflows s</li>\n<li>Several tools exist to automate the review process<br>\nStanford:  Engler, et al.  Test trust inconsistency<br>\n@stake.com  (<span class=\"exturl\" data-url=\"aHR0cDovL2wwcGh0LmNvbQ==\">l0pht.com</span>): SLINT (designed for UNIX)<br>\nBerkeley:  Wagner, et al.  Test constraint violations</li>\n<li>Find lots of bugs, but not all</li>\n</ul>\n<ol start=\"4\">\n<li>Marking Stack as Non-Execute<br>\nBasic stack exploit can be prevented by marking stack segment as non-executable<br>\nLimitations and Problems</li>\n</ol>\n<ul>\n<li>Some apps need executable stack (e.g. LISP interpreters)</li>\n<li>Does not block more general overflow exploits</li>\n<li>Overflow on heap: overflow buffer next to func pointer</li>\n<li>Cannot make all the data segment non-executable</li>\n<li>More recent UNIX and MS windows emit dynamic code into program data for performance optimisations</li>\n</ul>\n<ol start=\"5\">\n<li>Stack Protection and Run-time Checking<br>\nMany run-time checking techniques\n<ol>\n<li>Example:  StackGuard (WireX)</li>\n</ol>\n<ul>\n<li>Run time tests for stack integrity</li>\n<li>Code generator for emitting code to set up and tear down functions</li>\n<li>Embeds “canaries” in stack frames and verify their integrity prior to function return</li>\n</ul>\n<ol start=\"2\">\n<li>Libsafe (Avaya Labs)</li>\n</ol>\n<ul>\n<li>Dynamically loaded library</li>\n<li>Intercepts calls to  <code>strcpy (dest, src)</code>\n<ul>\n<li>Validate sufficient space in current stack frame: |framepointer–dest| &gt; strlen(src)</li>\n<li>If so, does strcpy. Otherwise, terminates application</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Address obfuscation (Stony Brook’03)</li>\n</ol>\n<ul>\n<li>Encrypt return address on stack by XORing with random string. Decrypt just before returning from function</li>\n<li>Attacker needs decryption key to set return address to desired value</li>\n</ul>\n<ol start=\"7\">\n<li>PaX ASLR: Randomise location of libc</li>\n</ol>\n<ul>\n<li>Attacker cannot jump directly to exec function</li>\n</ul>\n",
            "tags": [
                "software security",
                "C",
                "vulnerability"
            ]
        }
    ]
}